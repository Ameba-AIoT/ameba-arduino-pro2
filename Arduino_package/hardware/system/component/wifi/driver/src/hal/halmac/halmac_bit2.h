#ifndef __RTL_WLAN_BITDEF_H__
#define __RTL_WLAN_BITDEF_H__

#include "halmac_hw_cfg.h"

#define CPU_OPT_WIDTH 0x1F

#if (HALMAC_8735B_SUPPORT)

/* 2 REG_WL_ISO_CTRL				(Offset 0x0000) */

#define BIT_ISO_AFE					BIT(12)
#define BIT_ISO_RFAFE					BIT(10)
#define BIT_ISO_BB					BIT(9)
#define BIT_ISO_MAC					BIT(8)
#define BIT_PC_BB_EN					BIT(3)
#define BIT_SPC_BB_EN					BIT(2)
#define BIT_PC_MAC_EN					BIT(1)
#define BIT_SPC_MAC_EN					BIT(0)

/* 2 REG_WL_CLK_CTRL				(Offset 0x0002) */

#define BIT_RF_SDMRSTB_AMB				BIT(26)
#define BIT_RF_RSTB_AMB				BIT(25)
#define BIT_RF_EN_AMB					BIT(24)
#define BIT_FEN_BBRSTB_AMB				BIT(17)
#define BIT_FEN_BB_GLB_RSTN_AMB			BIT(16)
#define BIT_IS_PMC_CLK_INSLP				BIT(11)
#define BIT_PMCISR_CK_SEL				BIT(10)
#define BIT_IS_SCH_CLK_INSLP				BIT(9)
#define BIT_WL_PLATFORM_RST_AMB			BIT(9)
#define BIT_TSF_CKSLP_SEL				BIT(8)
#define BIT_FEN_WLON					BIT(4)
#define BIT_FEN_CPUEN_AMB				BIT(3)
#define BIT_WL_CKCPU_EN				BIT(2)
#define BIT_FEN_MACREG					BIT(2)
#define BIT_WL_CKSEC_EN				BIT(1)
#define BIT_FEN_WLOFF					BIT(1)
#define BIT_WL_CKMAC_EN				BIT(0)
#define BIT_FEN_MAC_PMC				BIT(0)

/* 2 REG_CLKDIV				(Offset 0x0008) */

#define BIT_SECCLK_SEL					BIT(20)

#define BIT_SHIFT_PLLCLK_SEL				18
#define BIT_MASK_PLLCLK_SEL				0x3
#define BIT_PLLCLK_SEL(x)				(((x) & BIT_MASK_PLLCLK_SEL) << BIT_SHIFT_PLLCLK_SEL)
#define BITS_PLLCLK_SEL				(BIT_MASK_PLLCLK_SEL << BIT_SHIFT_PLLCLK_SEL)
#define BIT_CLEAR_PLLCLK_SEL(x)			((x) & (~BITS_PLLCLK_SEL))
#define BIT_GET_PLLCLK_SEL(x)				(((x) >> BIT_SHIFT_PLLCLK_SEL) & BIT_MASK_PLLCLK_SEL)
#define BIT_SET_PLLCLK_SEL(x, v)			(BIT_CLEAR_PLLCLK_SEL(x) | BIT_PLLCLK_SEL(v))

#define BIT_SHIFT_CPUCLK_SEL				16
#define BIT_MASK_CPUCLK_SEL				0x3
#define BIT_CPUCLK_SEL(x)				(((x) & BIT_MASK_CPUCLK_SEL) << BIT_SHIFT_CPUCLK_SEL)
#define BITS_CPUCLK_SEL				(BIT_MASK_CPUCLK_SEL << BIT_SHIFT_CPUCLK_SEL)
#define BIT_CLEAR_CPUCLK_SEL(x)			((x) & (~BITS_CPUCLK_SEL))
#define BIT_GET_CPUCLK_SEL(x)				(((x) >> BIT_SHIFT_CPUCLK_SEL) & BIT_MASK_CPUCLK_SEL)
#define BIT_SET_CPUCLK_SEL(x, v)			(BIT_CLEAR_CPUCLK_SEL(x) | BIT_CPUCLK_SEL(v))

#define BIT_CKDIV_SYNC_1SHOT				BIT(15)

#define BIT_SHIFT_CKDIV1_CFG				4
#define BIT_MASK_CKDIV1_CFG				0xf
#define BIT_CKDIV1_CFG(x)				(((x) & BIT_MASK_CKDIV1_CFG) << BIT_SHIFT_CKDIV1_CFG)
#define BITS_CKDIV1_CFG				(BIT_MASK_CKDIV1_CFG << BIT_SHIFT_CKDIV1_CFG)
#define BIT_CLEAR_CKDIV1_CFG(x)			((x) & (~BITS_CKDIV1_CFG))
#define BIT_GET_CKDIV1_CFG(x)				(((x) >> BIT_SHIFT_CKDIV1_CFG) & BIT_MASK_CKDIV1_CFG)
#define BIT_SET_CKDIV1_CFG(x, v)			(BIT_CLEAR_CKDIV1_CFG(x) | BIT_CKDIV1_CFG(v))

#define BIT_SHIFT_CKDIV0_CFG				0
#define BIT_MASK_CKDIV0_CFG				0xf
#define BIT_CKDIV0_CFG(x)				(((x) & BIT_MASK_CKDIV0_CFG) << BIT_SHIFT_CKDIV0_CFG)
#define BITS_CKDIV0_CFG				(BIT_MASK_CKDIV0_CFG << BIT_SHIFT_CKDIV0_CFG)
#define BIT_CLEAR_CKDIV0_CFG(x)			((x) & (~BITS_CKDIV0_CFG))
#define BIT_GET_CKDIV0_CFG(x)				(((x) >> BIT_SHIFT_CKDIV0_CFG) & BIT_MASK_CKDIV0_CFG)
#define BIT_SET_CKDIV0_CFG(x, v)			(BIT_CLEAR_CKDIV0_CFG(x) | BIT_CKDIV0_CFG(v))

/* 2 REG_RSV_CTRL				(Offset 0x001C) */

#define BIT_SHIFT_HREG_DBG_V1				12
#define BIT_MASK_HREG_DBG_V1				0xfff
#define BIT_HREG_DBG_V1(x)				(((x) & BIT_MASK_HREG_DBG_V1) << BIT_SHIFT_HREG_DBG_V1)
#define BITS_HREG_DBG_V1				(BIT_MASK_HREG_DBG_V1 << BIT_SHIFT_HREG_DBG_V1)
#define BIT_CLEAR_HREG_DBG_V1(x)			((x) & (~BITS_HREG_DBG_V1))
#define BIT_GET_HREG_DBG_V1(x)				(((x) >> BIT_SHIFT_HREG_DBG_V1) & BIT_MASK_HREG_DBG_V1)
#define BIT_SET_HREG_DBG_V1(x, v)			(BIT_CLEAR_HREG_DBG_V1(x) | BIT_HREG_DBG_V1(v))

#define BIT_WLMCUIOIF					BIT(8)
#define BIT_LOCK_ALL_EN				BIT(7)
#define BIT_R_DIS_PRST					BIT(6)
#define BIT_WLOCK_1C_B6				BIT(5)
#define BIT_WLOCK_40					BIT(4)
#define BIT_WLOCK_08					BIT(3)
#define BIT_WLOCK_04					BIT(2)
#define BIT_WLOCK_00					BIT(1)
#define BIT_WLOCK_ALL					BIT(0)

/* 2 REG_WL_PMC_CTRL				(Offset 0x0020) */

#define BIT_XTAL_GATED_AFEP				BIT(25)
#define BIT_XTAL_GATED_AFEN				BIT(24)

#define BIT_SHIFT_WL_PMC_CNT_PAR			8
#define BIT_MASK_WL_PMC_CNT_PAR			0x3f
#define BIT_WL_PMC_CNT_PAR(x)				(((x) & BIT_MASK_WL_PMC_CNT_PAR) << BIT_SHIFT_WL_PMC_CNT_PAR)
#define BITS_WL_PMC_CNT_PAR				(BIT_MASK_WL_PMC_CNT_PAR << BIT_SHIFT_WL_PMC_CNT_PAR)
#define BIT_CLEAR_WL_PMC_CNT_PAR(x)			((x) & (~BITS_WL_PMC_CNT_PAR))
#define BIT_GET_WL_PMC_CNT_PAR(x)			(((x) >> BIT_SHIFT_WL_PMC_CNT_PAR) & BIT_MASK_WL_PMC_CNT_PAR)
#define BIT_SET_WL_PMC_CNT_PAR(x, v)			(BIT_CLEAR_WL_PMC_CNT_PAR(x) | BIT_WL_PMC_CNT_PAR(v))

#define BIT_WL_PMC_LPS_EN				BIT(2)
#define BIT_WL_PMC_OFFMAC				BIT(1)
#define BIT_WL_PMC_ONMAC				BIT(0)

/* 2 REG_WL_SYSCONFIG			(Offset 0x0024) */

#define BIT_DIS_TIMEOUT_IO_AMB				BIT(24)
#define BIT_RSM_EN_V1					BIT(24)
#define BIT_WDT_AUTO_MODE_AMB				BIT(21)
#define BIT_WDT_PLATFORM_EN_AMB			BIT(20)
#define BIT_WDT_CPU_EN_AMB				BIT(19)
#define BIT_WDT_OPT_IOWRAPPER_AMB			BIT(18)
#define BIT_ANA_PORT_IDLE_AMB				BIT(17)
#define BIT_MAC_PORT_IDLE_AMB				BIT(16)

#define BIT_SHIFT_TSFT_SEL_AMB				8
#define BIT_MASK_TSFT_SEL_AMB				0x7
#define BIT_TSFT_SEL_AMB(x)				(((x) & BIT_MASK_TSFT_SEL_AMB) << BIT_SHIFT_TSFT_SEL_AMB)
#define BITS_TSFT_SEL_AMB				(BIT_MASK_TSFT_SEL_AMB << BIT_SHIFT_TSFT_SEL_AMB)
#define BIT_CLEAR_TSFT_SEL_AMB(x)			((x) & (~BITS_TSFT_SEL_AMB))
#define BIT_GET_TSFT_SEL_AMB(x)			(((x) >> BIT_SHIFT_TSFT_SEL_AMB) & BIT_MASK_TSFT_SEL_AMB)
#define BIT_SET_TSFT_SEL_AMB(x, v)			(BIT_CLEAR_TSFT_SEL_AMB(x) | BIT_TSFT_SEL_AMB(v))

#define BIT_BB_PWR_CUT9_BBCTRL_EN			BIT(2)
#define BIT_BB_PWR_CUT7_8_BBCTRL_EN			BIT(1)
#define BIT_BB_PWR_CUT1_6_BBCTRL_EN			BIT(0)

/* 2 REG_WL_AFE_POW				(Offset 0x0030) */

#define BIT_RF_PDN11					BIT(15)
#define BIT_XTAL_GATE_RF2_P				BIT(5)
#define BIT_XTAL_GATE_RF2_N				BIT(4)
#define BIT_XTAL_GATE_RF1_P				BIT(3)
#define BIT_XTAL_GATE_RF1_N				BIT(2)
#define BIT_XTAL_GATE_AFE_P				BIT(1)
#define BIT_XTAL_GATE_AFE_N				BIT(0)

/* 2 REG_FSIMR_AMB				(Offset 0x0040) */

#define BIT_FS_BTON_STS_UPDATE_MSK_EN			BIT(7)
#define BIT_FS_PWMERR_INT_EN_AMB			BIT(1)
#define BIT_HCI_TXDMA_REQ_HIMR_AMB			BIT(0)

/* 2 REG_FSISR_AMB				(Offset 0x0044) */

#define BIT_FS_BTON_STS_UPDATE_MSK			BIT(7)
#define BIT_FS_PWMERR_INT_AMB				BIT(1)
#define BIT_HCI_TXDMA_REQ_HISR_AMB			BIT(0)

/* 2 REG_H2C_PKT_READADDR_AMB		(Offset 0x0048) */

#define BIT_SHIFT_H2C_PKT_READADDR_AMB			0
#define BIT_MASK_H2C_PKT_READADDR_AMB			0x3ffff
#define BIT_H2C_PKT_READADDR_AMB(x)			(((x) & BIT_MASK_H2C_PKT_READADDR_AMB) << BIT_SHIFT_H2C_PKT_READADDR_AMB)
#define BITS_H2C_PKT_READADDR_AMB			(BIT_MASK_H2C_PKT_READADDR_AMB << BIT_SHIFT_H2C_PKT_READADDR_AMB)
#define BIT_CLEAR_H2C_PKT_READADDR_AMB(x)		((x) & (~BITS_H2C_PKT_READADDR_AMB))
#define BIT_GET_H2C_PKT_READADDR_AMB(x)		(((x) >> BIT_SHIFT_H2C_PKT_READADDR_AMB) & BIT_MASK_H2C_PKT_READADDR_AMB)
#define BIT_SET_H2C_PKT_READADDR_AMB(x, v)		(BIT_CLEAR_H2C_PKT_READADDR_AMB(x) | BIT_H2C_PKT_READADDR_AMB(v))

/* 2 REG_H2C_PKT_WRITEADDR_AMB		(Offset 0x004C) */

#define BIT_SHIFT_H2C_PKT_WRITEADDR_AMB		0
#define BIT_MASK_H2C_PKT_WRITEADDR_AMB			0x3ffff
#define BIT_H2C_PKT_WRITEADDR_AMB(x)			(((x) & BIT_MASK_H2C_PKT_WRITEADDR_AMB) << BIT_SHIFT_H2C_PKT_WRITEADDR_AMB)
#define BITS_H2C_PKT_WRITEADDR_AMB			(BIT_MASK_H2C_PKT_WRITEADDR_AMB << BIT_SHIFT_H2C_PKT_WRITEADDR_AMB)
#define BIT_CLEAR_H2C_PKT_WRITEADDR_AMB(x)		((x) & (~BITS_H2C_PKT_WRITEADDR_AMB))
#define BIT_GET_H2C_PKT_WRITEADDR_AMB(x)		(((x) >> BIT_SHIFT_H2C_PKT_WRITEADDR_AMB) & BIT_MASK_H2C_PKT_WRITEADDR_AMB)
#define BIT_SET_H2C_PKT_WRITEADDR_AMB(x, v)		(BIT_CLEAR_H2C_PKT_WRITEADDR_AMB(x) | BIT_H2C_PKT_WRITEADDR_AMB(v))

/* 2 REG_FW_DBG0_AMB				(Offset 0x0050) */

#define BIT_SHIFT_FW_DBG0_AMB				0
#define BIT_MASK_FW_DBG0_AMB				0xffffffffL
#define BIT_FW_DBG0_AMB(x)				(((x) & BIT_MASK_FW_DBG0_AMB) << BIT_SHIFT_FW_DBG0_AMB)
#define BITS_FW_DBG0_AMB				(BIT_MASK_FW_DBG0_AMB << BIT_SHIFT_FW_DBG0_AMB)
#define BIT_CLEAR_FW_DBG0_AMB(x)			((x) & (~BITS_FW_DBG0_AMB))
#define BIT_GET_FW_DBG0_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG0_AMB) & BIT_MASK_FW_DBG0_AMB)
#define BIT_SET_FW_DBG0_AMB(x, v)			(BIT_CLEAR_FW_DBG0_AMB(x) | BIT_FW_DBG0_AMB(v))

/* 2 REG_FW_DBG1_AMB				(Offset 0x0054) */

#define BIT_SHIFT_FW_DBG1_AMB				0
#define BIT_MASK_FW_DBG1_AMB				0xffffffffL
#define BIT_FW_DBG1_AMB(x)				(((x) & BIT_MASK_FW_DBG1_AMB) << BIT_SHIFT_FW_DBG1_AMB)
#define BITS_FW_DBG1_AMB				(BIT_MASK_FW_DBG1_AMB << BIT_SHIFT_FW_DBG1_AMB)
#define BIT_CLEAR_FW_DBG1_AMB(x)			((x) & (~BITS_FW_DBG1_AMB))
#define BIT_GET_FW_DBG1_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG1_AMB) & BIT_MASK_FW_DBG1_AMB)
#define BIT_SET_FW_DBG1_AMB(x, v)			(BIT_CLEAR_FW_DBG1_AMB(x) | BIT_FW_DBG1_AMB(v))

/* 2 REG_FW_DBG2_AMB				(Offset 0x0058) */

#define BIT_SHIFT_FW_DBG2_AMB				0
#define BIT_MASK_FW_DBG2_AMB				0xffffffffL
#define BIT_FW_DBG2_AMB(x)				(((x) & BIT_MASK_FW_DBG2_AMB) << BIT_SHIFT_FW_DBG2_AMB)
#define BITS_FW_DBG2_AMB				(BIT_MASK_FW_DBG2_AMB << BIT_SHIFT_FW_DBG2_AMB)
#define BIT_CLEAR_FW_DBG2_AMB(x)			((x) & (~BITS_FW_DBG2_AMB))
#define BIT_GET_FW_DBG2_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG2_AMB) & BIT_MASK_FW_DBG2_AMB)
#define BIT_SET_FW_DBG2_AMB(x, v)			(BIT_CLEAR_FW_DBG2_AMB(x) | BIT_FW_DBG2_AMB(v))

/* 2 REG_FW_DBG3_AMB				(Offset 0x005C) */

#define BIT_SHIFT_FW_DBG3_AMB				0
#define BIT_MASK_FW_DBG3_AMB				0xffffffffL
#define BIT_FW_DBG3_AMB(x)				(((x) & BIT_MASK_FW_DBG3_AMB) << BIT_SHIFT_FW_DBG3_AMB)
#define BITS_FW_DBG3_AMB				(BIT_MASK_FW_DBG3_AMB << BIT_SHIFT_FW_DBG3_AMB)
#define BIT_CLEAR_FW_DBG3_AMB(x)			((x) & (~BITS_FW_DBG3_AMB))
#define BIT_GET_FW_DBG3_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG3_AMB) & BIT_MASK_FW_DBG3_AMB)
#define BIT_SET_FW_DBG3_AMB(x, v)			(BIT_CLEAR_FW_DBG3_AMB(x) | BIT_FW_DBG3_AMB(v))

/* 2 REG_FW_DBG4_AMB				(Offset 0x0060) */

#define BIT_SHIFT_FW_DBG4_AMB				0
#define BIT_MASK_FW_DBG4_AMB				0xffffffffL
#define BIT_FW_DBG4_AMB(x)				(((x) & BIT_MASK_FW_DBG4_AMB) << BIT_SHIFT_FW_DBG4_AMB)
#define BITS_FW_DBG4_AMB				(BIT_MASK_FW_DBG4_AMB << BIT_SHIFT_FW_DBG4_AMB)
#define BIT_CLEAR_FW_DBG4_AMB(x)			((x) & (~BITS_FW_DBG4_AMB))
#define BIT_GET_FW_DBG4_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG4_AMB) & BIT_MASK_FW_DBG4_AMB)
#define BIT_SET_FW_DBG4_AMB(x, v)			(BIT_CLEAR_FW_DBG4_AMB(x) | BIT_FW_DBG4_AMB(v))

/* 2 REG_FW_DBG5_AMB				(Offset 0x0064) */

#define BIT_SHIFT_FW_DBG5_AMB				0
#define BIT_MASK_FW_DBG5_AMB				0xffffffffL
#define BIT_FW_DBG5_AMB(x)				(((x) & BIT_MASK_FW_DBG5_AMB) << BIT_SHIFT_FW_DBG5_AMB)
#define BITS_FW_DBG5_AMB				(BIT_MASK_FW_DBG5_AMB << BIT_SHIFT_FW_DBG5_AMB)
#define BIT_CLEAR_FW_DBG5_AMB(x)			((x) & (~BITS_FW_DBG5_AMB))
#define BIT_GET_FW_DBG5_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG5_AMB) & BIT_MASK_FW_DBG5_AMB)
#define BIT_SET_FW_DBG5_AMB(x, v)			(BIT_CLEAR_FW_DBG5_AMB(x) | BIT_FW_DBG5_AMB(v))

/* 2 REG_FW_DBG6_AMB				(Offset 0x0068) */

#define BIT_SHIFT_FW_DBG6_AMB				0
#define BIT_MASK_FW_DBG6_AMB				0xffffffffL
#define BIT_FW_DBG6_AMB(x)				(((x) & BIT_MASK_FW_DBG6_AMB) << BIT_SHIFT_FW_DBG6_AMB)
#define BITS_FW_DBG6_AMB				(BIT_MASK_FW_DBG6_AMB << BIT_SHIFT_FW_DBG6_AMB)
#define BIT_CLEAR_FW_DBG6_AMB(x)			((x) & (~BITS_FW_DBG6_AMB))
#define BIT_GET_FW_DBG6_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG6_AMB) & BIT_MASK_FW_DBG6_AMB)
#define BIT_SET_FW_DBG6_AMB(x, v)			(BIT_CLEAR_FW_DBG6_AMB(x) | BIT_FW_DBG6_AMB(v))

/* 2 REG_FW_DBG7_AMB				(Offset 0x006C) */

#define BIT_SHIFT_FW_DBG7_AMB				0
#define BIT_MASK_FW_DBG7_AMB				0xffffffffL
#define BIT_FW_DBG7_AMB(x)				(((x) & BIT_MASK_FW_DBG7_AMB) << BIT_SHIFT_FW_DBG7_AMB)
#define BITS_FW_DBG7_AMB				(BIT_MASK_FW_DBG7_AMB << BIT_SHIFT_FW_DBG7_AMB)
#define BIT_CLEAR_FW_DBG7_AMB(x)			((x) & (~BITS_FW_DBG7_AMB))
#define BIT_GET_FW_DBG7_AMB(x)				(((x) >> BIT_SHIFT_FW_DBG7_AMB) & BIT_MASK_FW_DBG7_AMB)
#define BIT_SET_FW_DBG7_AMB(x, v)			(BIT_CLEAR_FW_DBG7_AMB(x) | BIT_FW_DBG7_AMB(v))

/* 2 REG_WL_PIN_FUNC_CTRL0			(Offset 0x0070) */

#define BIT_SHIFT_WL_DBG_SEL				24
#define BIT_MASK_WL_DBG_SEL				0xff
#define BIT_WL_DBG_SEL(x)				(((x) & BIT_MASK_WL_DBG_SEL) << BIT_SHIFT_WL_DBG_SEL)
#define BITS_WL_DBG_SEL				(BIT_MASK_WL_DBG_SEL << BIT_SHIFT_WL_DBG_SEL)
#define BIT_CLEAR_WL_DBG_SEL(x)			((x) & (~BITS_WL_DBG_SEL))
#define BIT_GET_WL_DBG_SEL(x)				(((x) >> BIT_SHIFT_WL_DBG_SEL) & BIT_MASK_WL_DBG_SEL)
#define BIT_SET_WL_DBG_SEL(x, v)			(BIT_CLEAR_WL_DBG_SEL(x) | BIT_WL_DBG_SEL(v))

#define BIT_WL_LED0DIS					BIT(7)
#define BIT_WL_LED0PL					BIT(4)
#define BIT_WL_LED0SV					BIT(3)

#define BIT_SHIFT_WL_LED0CM				0
#define BIT_MASK_WL_LED0CM				0x7
#define BIT_WL_LED0CM(x)				(((x) & BIT_MASK_WL_LED0CM) << BIT_SHIFT_WL_LED0CM)
#define BITS_WL_LED0CM					(BIT_MASK_WL_LED0CM << BIT_SHIFT_WL_LED0CM)
#define BIT_CLEAR_WL_LED0CM(x)				((x) & (~BITS_WL_LED0CM))
#define BIT_GET_WL_LED0CM(x)				(((x) >> BIT_SHIFT_WL_LED0CM) & BIT_MASK_WL_LED0CM)
#define BIT_SET_WL_LED0CM(x, v)			(BIT_CLEAR_WL_LED0CM(x) | BIT_WL_LED0CM(v))

/* 2 REG_WL_PIN_FUNC_CTRL1			(Offset 0x0074) */

#define BIT_BB2_BT_CTRL_SEL				BIT(26)
#define BIT_BB1_BT_CTRL_SEL				BIT(25)
#define BIT_BB0_BT_CTRL_SEL				BIT(24)
#define BIT_DBG_GNT_WL_BT_AMB				BIT(21)
#define BIT_LTE_MUX_CTRL_PATH				BIT(20)
#define BIT_PO_WIFI_PTA_PINS_AMB			BIT(19)

#define BIT_SHIFT_BTMODE_AMB				17
#define BIT_MASK_BTMODE_AMB				0x3
#define BIT_BTMODE_AMB(x)				(((x) & BIT_MASK_BTMODE_AMB) << BIT_SHIFT_BTMODE_AMB)
#define BITS_BTMODE_AMB				(BIT_MASK_BTMODE_AMB << BIT_SHIFT_BTMODE_AMB)
#define BIT_CLEAR_BTMODE_AMB(x)			((x) & (~BITS_BTMODE_AMB))
#define BIT_GET_BTMODE_AMB(x)				(((x) >> BIT_SHIFT_BTMODE_AMB) & BIT_MASK_BTMODE_AMB)
#define BIT_SET_BTMODE_AMB(x, v)			(BIT_CLEAR_BTMODE_AMB(x) | BIT_BTMODE_AMB(v))

#define BIT_ENBT_AMB					BIT(16)
#define BIT_SW_CTRL_DATA2				BIT(13)
#define BIT_BB2_CTRL_SEL				BIT(12)
#define BIT_SW_CTRL_DATA1				BIT(11)
#define BIT_BB1_CTRL_SEL				BIT(10)
#define BIT_SW_CTRL_DATA0				BIT(9)
#define BIT_BB0_CTRL_SEL				BIT(8)
#define BIT_SW_DPDT2_SEL_DATA				BIT(5)
#define BIT_DTDP2_MUX_SEL				BIT(4)
#define BIT_SW_DPDT1_SEL_DATA				BIT(3)
#define BIT_DTDP1_MUX_SEL				BIT(2)
#define BIT_SW_DPDT0_SEL_DATA				BIT(1)
#define BIT_DTDP0_MUX_SEL				BIT(0)

/* 2 REG_DBG_PORT_REG			(Offset 0x007C) */

#define BIT_SHIFT_DEBUG_ST_AMB				0
#define BIT_MASK_DEBUG_ST_AMB				0xffffffffL
#define BIT_DEBUG_ST_AMB(x)				(((x) & BIT_MASK_DEBUG_ST_AMB) << BIT_SHIFT_DEBUG_ST_AMB)
#define BITS_DEBUG_ST_AMB				(BIT_MASK_DEBUG_ST_AMB << BIT_SHIFT_DEBUG_ST_AMB)
#define BIT_CLEAR_DEBUG_ST_AMB(x)			((x) & (~BITS_DEBUG_ST_AMB))
#define BIT_GET_DEBUG_ST_AMB(x)			(((x) >> BIT_SHIFT_DEBUG_ST_AMB) & BIT_MASK_DEBUG_ST_AMB)
#define BIT_SET_DEBUG_ST_AMB(x, v)			(BIT_CLEAR_DEBUG_ST_AMB(x) | BIT_DEBUG_ST_AMB(v))

/* 2 REG_WL_MCUFW_CTRL			(Offset 0x0080) */

#define BIT_ANA_PORT_EN				BIT(22)
#define BIT_MAC_PORT_EN				BIT(21)
#define BIT_BOOTSEL					BIT(20)
#define BIT_ROM_DLEN					BIT(19)

#define BIT_SHIFT_ROM_PGE				16
#define BIT_MASK_ROM_PGE				0x7
#define BIT_ROM_PGE(x)					(((x) & BIT_MASK_ROM_PGE) << BIT_SHIFT_ROM_PGE)
#define BITS_ROM_PGE					(BIT_MASK_ROM_PGE << BIT_SHIFT_ROM_PGE)
#define BIT_CLEAR_ROM_PGE(x)				((x) & (~BITS_ROM_PGE))
#define BIT_GET_ROM_PGE(x)				(((x) >> BIT_SHIFT_ROM_PGE) & BIT_MASK_ROM_PGE)
#define BIT_SET_ROM_PGE(x, v)				(BIT_CLEAR_ROM_PGE(x) | BIT_ROM_PGE(v))

#define BIT_FW_INIT_RDY				BIT(15)
#define BIT_FW_DW_RDY					BIT(14)
#define BIT_CCLK_CHG_MASK				BIT(11)
#define BIT_EMEM__TXBUF_CHKSUM_OK			BIT(10)
#define BIT_EMEM_TXBUF_DW_RDY				BIT(9)
#define BIT_EMEM_CHKSUM_OK				BIT(8)
#define BIT_EMEM_DW_OK					BIT(7)
#define BIT_DMEM_CHKSUM_OK				BIT(6)
#define BIT_DMEM_DW_OK					BIT(5)
#define BIT_IMEM_CHKSUM_OK				BIT(4)
#define BIT_IMEM_DW_OK					BIT(3)
#define BIT_IMEM_BOOT_LOAD_CHKSUM_OK			BIT(2)
#define BIT_IMEM_BOOT_LOAD_DW_OK			BIT(1)
#define BIT_MCUFWDL_EN					BIT(0)

/* 2 REG_FW_DBG8				(Offset 0x0084) */

#define BIT_SHIFT_FW_DBG8				0
#define BIT_MASK_FW_DBG8				0xffffffffL
#define BIT_FW_DBG8(x)					(((x) & BIT_MASK_FW_DBG8) << BIT_SHIFT_FW_DBG8)
#define BITS_FW_DBG8					(BIT_MASK_FW_DBG8 << BIT_SHIFT_FW_DBG8)
#define BIT_CLEAR_FW_DBG8(x)				((x) & (~BITS_FW_DBG8))
#define BIT_GET_FW_DBG8(x)				(((x) >> BIT_SHIFT_FW_DBG8) & BIT_MASK_FW_DBG8)
#define BIT_SET_FW_DBG8(x, v)				(BIT_CLEAR_FW_DBG8(x) | BIT_FW_DBG8(v))

/* 2 REG_HOST_MSG0				(Offset 0x0088) */

#define BIT_SHIFT_HOST_MSG_E1				16
#define BIT_MASK_HOST_MSG_E1				0xffff
#define BIT_HOST_MSG_E1(x)				(((x) & BIT_MASK_HOST_MSG_E1) << BIT_SHIFT_HOST_MSG_E1)
#define BITS_HOST_MSG_E1				(BIT_MASK_HOST_MSG_E1 << BIT_SHIFT_HOST_MSG_E1)
#define BIT_CLEAR_HOST_MSG_E1(x)			((x) & (~BITS_HOST_MSG_E1))
#define BIT_GET_HOST_MSG_E1(x)				(((x) >> BIT_SHIFT_HOST_MSG_E1) & BIT_MASK_HOST_MSG_E1)
#define BIT_SET_HOST_MSG_E1(x, v)			(BIT_CLEAR_HOST_MSG_E1(x) | BIT_HOST_MSG_E1(v))

#define BIT_SHIFT_HOST_MSG_E0				0
#define BIT_MASK_HOST_MSG_E0				0xffff
#define BIT_HOST_MSG_E0(x)				(((x) & BIT_MASK_HOST_MSG_E0) << BIT_SHIFT_HOST_MSG_E0)
#define BITS_HOST_MSG_E0				(BIT_MASK_HOST_MSG_E0 << BIT_SHIFT_HOST_MSG_E0)
#define BIT_CLEAR_HOST_MSG_E0(x)			((x) & (~BITS_HOST_MSG_E0))
#define BIT_GET_HOST_MSG_E0(x)				(((x) >> BIT_SHIFT_HOST_MSG_E0) & BIT_MASK_HOST_MSG_E0)
#define BIT_SET_HOST_MSG_E0(x, v)			(BIT_CLEAR_HOST_MSG_E0(x) | BIT_HOST_MSG_E0(v))

/* 2 REG_HOST_MSG1				(Offset 0x008C) */

#define BIT_SHIFT_HOST_MSG_E3				16
#define BIT_MASK_HOST_MSG_E3				0xffff
#define BIT_HOST_MSG_E3(x)				(((x) & BIT_MASK_HOST_MSG_E3) << BIT_SHIFT_HOST_MSG_E3)
#define BITS_HOST_MSG_E3				(BIT_MASK_HOST_MSG_E3 << BIT_SHIFT_HOST_MSG_E3)
#define BIT_CLEAR_HOST_MSG_E3(x)			((x) & (~BITS_HOST_MSG_E3))
#define BIT_GET_HOST_MSG_E3(x)				(((x) >> BIT_SHIFT_HOST_MSG_E3) & BIT_MASK_HOST_MSG_E3)
#define BIT_SET_HOST_MSG_E3(x, v)			(BIT_CLEAR_HOST_MSG_E3(x) | BIT_HOST_MSG_E3(v))

#define BIT_SHIFT_HOST_MSG_E2				0
#define BIT_MASK_HOST_MSG_E2				0xffff
#define BIT_HOST_MSG_E2(x)				(((x) & BIT_MASK_HOST_MSG_E2) << BIT_SHIFT_HOST_MSG_E2)
#define BITS_HOST_MSG_E2				(BIT_MASK_HOST_MSG_E2 << BIT_SHIFT_HOST_MSG_E2)
#define BIT_CLEAR_HOST_MSG_E2(x)			((x) & (~BITS_HOST_MSG_E2))
#define BIT_GET_HOST_MSG_E2(x)				(((x) >> BIT_SHIFT_HOST_MSG_E2) & BIT_MASK_HOST_MSG_E2)
#define BIT_SET_HOST_MSG_E2(x, v)			(BIT_CLEAR_HOST_MSG_E2(x) | BIT_HOST_MSG_E2(v))

/* 2 REG_LPS_CTRL				(Offset 0x0090) */

#define BIT_LPS_BB_MEM_MOD				BIT(27)
#define BIT_LPS_MACOFF_MEM_MOD				BIT(26)

#define BIT_SHIFT_LPS_TXBUFF1_MOD			24
#define BIT_MASK_LPS_TXBUFF1_MOD			0x3
#define BIT_LPS_TXBUFF1_MOD(x)				(((x) & BIT_MASK_LPS_TXBUFF1_MOD) << BIT_SHIFT_LPS_TXBUFF1_MOD)
#define BITS_LPS_TXBUFF1_MOD				(BIT_MASK_LPS_TXBUFF1_MOD << BIT_SHIFT_LPS_TXBUFF1_MOD)
#define BIT_CLEAR_LPS_TXBUFF1_MOD(x)			((x) & (~BITS_LPS_TXBUFF1_MOD))
#define BIT_GET_LPS_TXBUFF1_MOD(x)			(((x) >> BIT_SHIFT_LPS_TXBUFF1_MOD) & BIT_MASK_LPS_TXBUFF1_MOD)
#define BIT_SET_LPS_TXBUFF1_MOD(x, v)			(BIT_CLEAR_LPS_TXBUFF1_MOD(x) | BIT_LPS_TXBUFF1_MOD(v))

#define BIT_SHIFT_LPS_TXBUFF0_MOD			22
#define BIT_MASK_LPS_TXBUFF0_MOD			0x3
#define BIT_LPS_TXBUFF0_MOD(x)				(((x) & BIT_MASK_LPS_TXBUFF0_MOD) << BIT_SHIFT_LPS_TXBUFF0_MOD)
#define BITS_LPS_TXBUFF0_MOD				(BIT_MASK_LPS_TXBUFF0_MOD << BIT_SHIFT_LPS_TXBUFF0_MOD)
#define BIT_CLEAR_LPS_TXBUFF0_MOD(x)			((x) & (~BITS_LPS_TXBUFF0_MOD))
#define BIT_GET_LPS_TXBUFF0_MOD(x)			(((x) >> BIT_SHIFT_LPS_TXBUFF0_MOD) & BIT_MASK_LPS_TXBUFF0_MOD)
#define BIT_SET_LPS_TXBUFF0_MOD(x, v)			(BIT_CLEAR_LPS_TXBUFF0_MOD(x) | BIT_LPS_TXBUFF0_MOD(v))

#define BIT_SHIFT_LPS_EMEM_MOD				20
#define BIT_MASK_LPS_EMEM_MOD				0x3
#define BIT_LPS_EMEM_MOD(x)				(((x) & BIT_MASK_LPS_EMEM_MOD) << BIT_SHIFT_LPS_EMEM_MOD)
#define BITS_LPS_EMEM_MOD				(BIT_MASK_LPS_EMEM_MOD << BIT_SHIFT_LPS_EMEM_MOD)
#define BIT_CLEAR_LPS_EMEM_MOD(x)			((x) & (~BITS_LPS_EMEM_MOD))
#define BIT_GET_LPS_EMEM_MOD(x)			(((x) >> BIT_SHIFT_LPS_EMEM_MOD) & BIT_MASK_LPS_EMEM_MOD)
#define BIT_SET_LPS_EMEM_MOD(x, v)			(BIT_CLEAR_LPS_EMEM_MOD(x) | BIT_LPS_EMEM_MOD(v))

#define BIT_SHIFT_LPS_DMEM_MOD				18
#define BIT_MASK_LPS_DMEM_MOD				0x3
#define BIT_LPS_DMEM_MOD(x)				(((x) & BIT_MASK_LPS_DMEM_MOD) << BIT_SHIFT_LPS_DMEM_MOD)
#define BITS_LPS_DMEM_MOD				(BIT_MASK_LPS_DMEM_MOD << BIT_SHIFT_LPS_DMEM_MOD)
#define BIT_CLEAR_LPS_DMEM_MOD(x)			((x) & (~BITS_LPS_DMEM_MOD))
#define BIT_GET_LPS_DMEM_MOD(x)			(((x) >> BIT_SHIFT_LPS_DMEM_MOD) & BIT_MASK_LPS_DMEM_MOD)
#define BIT_SET_LPS_DMEM_MOD(x, v)			(BIT_CLEAR_LPS_DMEM_MOD(x) | BIT_LPS_DMEM_MOD(v))

#define BIT_SHIFT_LPS_IMEM_MOD				16
#define BIT_MASK_LPS_IMEM_MOD				0x3
#define BIT_LPS_IMEM_MOD(x)				(((x) & BIT_MASK_LPS_IMEM_MOD) << BIT_SHIFT_LPS_IMEM_MOD)
#define BITS_LPS_IMEM_MOD				(BIT_MASK_LPS_IMEM_MOD << BIT_SHIFT_LPS_IMEM_MOD)
#define BIT_CLEAR_LPS_IMEM_MOD(x)			((x) & (~BITS_LPS_IMEM_MOD))
#define BIT_GET_LPS_IMEM_MOD(x)			(((x) >> BIT_SHIFT_LPS_IMEM_MOD) & BIT_MASK_LPS_IMEM_MOD)
#define BIT_SET_LPS_IMEM_MOD(x, v)			(BIT_CLEAR_LPS_IMEM_MOD(x) | BIT_LPS_IMEM_MOD(v))

#define BIT_WLLPSOP_WLAFEOFF				BIT(10)
#define BIT_WLLPSOP_WLBBOFF_AMB			BIT(9)
#define BIT_WLLPSOP_WLMACOFF_AMB			BIT(8)
#define BIT_WL_MEM_LPS_EN				BIT(4)
#define BIT_WL_LPS_EN					BIT(0)

/* 2 REG_BOOT_REASON_AMB			(Offset 0x0098) */

#define BIT_SHIFT_BOOT_REASON_AMB			0
#define BIT_MASK_BOOT_REASON_AMB			0x7
#define BIT_BOOT_REASON_AMB(x)				(((x) & BIT_MASK_BOOT_REASON_AMB) << BIT_SHIFT_BOOT_REASON_AMB)
#define BITS_BOOT_REASON_AMB				(BIT_MASK_BOOT_REASON_AMB << BIT_SHIFT_BOOT_REASON_AMB)
#define BIT_CLEAR_BOOT_REASON_AMB(x)			((x) & (~BITS_BOOT_REASON_AMB))
#define BIT_GET_BOOT_REASON_AMB(x)			(((x) >> BIT_SHIFT_BOOT_REASON_AMB) & BIT_MASK_BOOT_REASON_AMB)
#define BIT_SET_BOOT_REASON_AMB(x, v)			(BIT_CLEAR_BOOT_REASON_AMB(x) | BIT_BOOT_REASON_AMB(v))

/* 2 REG_RPWM2				(Offset 0x009C) */

#define BIT_SHIFT_RPWM2				16
#define BIT_MASK_RPWM2					0xffff
#define BIT_RPWM2(x)					(((x) & BIT_MASK_RPWM2) << BIT_SHIFT_RPWM2)
#define BITS_RPWM2					(BIT_MASK_RPWM2 << BIT_SHIFT_RPWM2)
#define BIT_CLEAR_RPWM2(x)				((x) & (~BITS_RPWM2))
#define BIT_GET_RPWM2(x)				(((x) >> BIT_SHIFT_RPWM2) & BIT_MASK_RPWM2)
#define BIT_SET_RPWM2(x, v)				(BIT_CLEAR_RPWM2(x) | BIT_RPWM2(v))

#define BIT_SHIFT_RPWM_AMB				0
#define BIT_MASK_RPWM_AMB				0xffff
#define BIT_RPWM_AMB(x)				(((x) & BIT_MASK_RPWM_AMB) << BIT_SHIFT_RPWM_AMB)
#define BITS_RPWM_AMB					(BIT_MASK_RPWM_AMB << BIT_SHIFT_RPWM_AMB)
#define BIT_CLEAR_RPWM_AMB(x)				((x) & (~BITS_RPWM_AMB))
#define BIT_GET_RPWM_AMB(x)				(((x) >> BIT_SHIFT_RPWM_AMB) & BIT_MASK_RPWM_AMB)
#define BIT_SET_RPWM_AMB(x, v)				(BIT_CLEAR_RPWM_AMB(x) | BIT_RPWM_AMB(v))

/* 2 REG_SYSON_FSM_MON_AMB			(Offset 0x00A4) */

#define BIT_FSM_MON_UPD_AMB				BIT(15)

#define BIT_SHIFT_FSM_PAR_AMB				0
#define BIT_MASK_FSM_PAR_AMB				0x7fff
#define BIT_FSM_PAR_AMB(x)				(((x) & BIT_MASK_FSM_PAR_AMB) << BIT_SHIFT_FSM_PAR_AMB)
#define BITS_FSM_PAR_AMB				(BIT_MASK_FSM_PAR_AMB << BIT_SHIFT_FSM_PAR_AMB)
#define BIT_CLEAR_FSM_PAR_AMB(x)			((x) & (~BITS_FSM_PAR_AMB))
#define BIT_GET_FSM_PAR_AMB(x)				(((x) >> BIT_SHIFT_FSM_PAR_AMB) & BIT_MASK_FSM_PAR_AMB)
#define BIT_SET_FSM_PAR_AMB(x, v)			(BIT_CLEAR_FSM_PAR_AMB(x) | BIT_FSM_PAR_AMB(v))

/* 2 REG_PMC_DBG_CTRL1			(Offset 0x00A8) */

#define BIT_BT_INT_EN					BIT(31)

#define BIT_SHIFT_RD_WR_WIFI_BT_INFO			24
#define BIT_MASK_RD_WR_WIFI_BT_INFO			0x7f
#define BIT_RD_WR_WIFI_BT_INFO(x)			(((x) & BIT_MASK_RD_WR_WIFI_BT_INFO) << BIT_SHIFT_RD_WR_WIFI_BT_INFO)
#define BITS_RD_WR_WIFI_BT_INFO			(BIT_MASK_RD_WR_WIFI_BT_INFO << BIT_SHIFT_RD_WR_WIFI_BT_INFO)
#define BIT_CLEAR_RD_WR_WIFI_BT_INFO(x)		((x) & (~BITS_RD_WR_WIFI_BT_INFO))
#define BIT_GET_RD_WR_WIFI_BT_INFO(x)			(((x) >> BIT_SHIFT_RD_WR_WIFI_BT_INFO) & BIT_MASK_RD_WR_WIFI_BT_INFO)
#define BIT_SET_RD_WR_WIFI_BT_INFO(x, v)		(BIT_CLEAR_RD_WR_WIFI_BT_INFO(x) | BIT_RD_WR_WIFI_BT_INFO(v))

#define BIT_PMC_WR_OVF					BIT(8)

#define BIT_SHIFT_WLPMC_ERRINT				0
#define BIT_MASK_WLPMC_ERRINT				0xff
#define BIT_WLPMC_ERRINT(x)				(((x) & BIT_MASK_WLPMC_ERRINT) << BIT_SHIFT_WLPMC_ERRINT)
#define BITS_WLPMC_ERRINT				(BIT_MASK_WLPMC_ERRINT << BIT_SHIFT_WLPMC_ERRINT)
#define BIT_CLEAR_WLPMC_ERRINT(x)			((x) & (~BITS_WLPMC_ERRINT))
#define BIT_GET_WLPMC_ERRINT(x)			(((x) >> BIT_SHIFT_WLPMC_ERRINT) & BIT_MASK_WLPMC_ERRINT)
#define BIT_SET_WLPMC_ERRINT(x, v)			(BIT_CLEAR_WLPMC_ERRINT(x) | BIT_WLPMC_ERRINT(v))

/* 2 REG_PMC_DBG_CTRL2_AMB			(Offset 0x00AC) */

#define BIT_STOP_WL_PMC_AMB				BIT(9)
#define BIT_REG_RST_WLPMC_AMB				BIT(5)
#define BIT_REG_RST_PD12N_AMB				BIT(4)
#define BIT_SYSON_DIS_WLREG_WRMSK_AMB			BIT(3)
#define BIT_SYSON_DIS_PMCREG_WRMSK_AMB			BIT(2)

#define BIT_SHIFT_SYSON_REG_ARB_AMB			0
#define BIT_MASK_SYSON_REG_ARB_AMB			0x3
#define BIT_SYSON_REG_ARB_AMB(x)			(((x) & BIT_MASK_SYSON_REG_ARB_AMB) << BIT_SHIFT_SYSON_REG_ARB_AMB)
#define BITS_SYSON_REG_ARB_AMB				(BIT_MASK_SYSON_REG_ARB_AMB << BIT_SHIFT_SYSON_REG_ARB_AMB)
#define BIT_CLEAR_SYSON_REG_ARB_AMB(x)			((x) & (~BITS_SYSON_REG_ARB_AMB))
#define BIT_GET_SYSON_REG_ARB_AMB(x)			(((x) >> BIT_SHIFT_SYSON_REG_ARB_AMB) & BIT_MASK_SYSON_REG_ARB_AMB)
#define BIT_SET_SYSON_REG_ARB_AMB(x, v)		(BIT_CLEAR_SYSON_REG_ARB_AMB(x) | BIT_SYSON_REG_ARB_AMB(v))

/* 2 REG_HIMR0				(Offset 0x00B0) */

#define BIT_TIMEOUT_INTERRUPT2_MASK			BIT(31)
#define BIT_TIMEOUT_INTERRUTP1_MASK			BIT(30)
#define BIT_PSTIMEOUT_MSK				BIT(29)
#define BIT_GTINT4_MSK					BIT(28)
#define BIT_GTINT3_MSK					BIT(27)
#define BIT_TXBCN0ERR_MSK				BIT(26)
#define BIT_TXBCN0OK_MSK				BIT(25)
#define BIT_TSF_BIT32_TOGGLE_MSK			BIT(24)
#define BIT_BCNDMAINT0_MSK				BIT(20)
#define BIT_BCNDERR0_MSK				BIT(16)
#define BIT_HISR3_IND_MSK				BIT(14)
#define BIT_HISR2_IND_MSK				BIT(13)
#define BIT_HISR1_IND_MSK				BIT(11)
#define BIT_C2HCMD_MSK					BIT(10)
#define BIT_CPWM2_MSK					BIT(9)
#define BIT_CPWM_MSK					BIT(8)
#define BIT_HIGHDOK_MSK				BIT(7)
#define BIT_MGTDOK_MSK					BIT(6)
#define BIT_BKDOK_MSK					BIT(5)
#define BIT_BEDOK_MSK					BIT(4)
#define BIT_VIDOK_MSK					BIT(3)
#define BIT_VODOK_MSK					BIT(2)
#define BIT_RDU_MSK					BIT(1)
#define BIT_RXOK_MSK					BIT(0)

/* 2 REG_HISR0				(Offset 0x00B4) */

#define BIT_TIMEOUT_INTERRUPT2				BIT(31)
#define BIT_TIMEOUT_INTERRUTP1				BIT(30)
#define BIT_TXFIFO_TH_INT				BIT(30)
#define BIT_PSTIMEOUT					BIT(29)
#define BIT_GTINT4					BIT(28)
#define BIT_GTINT3					BIT(27)
#define BIT_TXBCN0ERR					BIT(26)
#define BIT_TXBCN0OK					BIT(25)
#define BIT_TSF_BIT32_TOGGLE				BIT(24)
#define BIT_BCNDMAINT0					BIT(20)
#define BIT_BCNDERR0					BIT(16)
#define BIT_HISR3_IND_INT				BIT(14)
#define BIT_HISR2_IND_INT				BIT(13)
#define BIT_HISR1_IND_INT				BIT(11)
#define BIT_C2HCMD					BIT(10)
#define BIT_CPWM2					BIT(9)
#define BIT_CPWM					BIT(8)
#define BIT_HIGHDOK					BIT(7)
#define BIT_MGTDOK					BIT(6)
#define BIT_BKDOK					BIT(5)
#define BIT_BEDOK					BIT(4)
#define BIT_VIDOK					BIT(3)
#define BIT_VODOK					BIT(2)
#define BIT_RDU					BIT(1)
#define BIT_RXOK					BIT(0)

/* 2 REG_HIMR1				(Offset 0x00B8) */

#define BIT_BTON_STS_UPDATE_MASK			BIT(29)
#define BIT_MCU_ERR_MASK				BIT(28)
#define BIT_BCNDMAINT7__MSK				BIT(27)
#define BIT_BCNDMAINT6__MSK				BIT(26)
#define BIT_BCNDMAINT5__MSK				BIT(25)
#define BIT_BCNDMAINT4__MSK				BIT(24)
#define BIT_BCNDMAINT3_MSK				BIT(23)
#define BIT_BCNDMAINT2_MSK				BIT(22)
#define BIT_BCNDMAINT1_MSK				BIT(21)
#define BIT_BCNDERR7_MSK				BIT(20)
#define BIT_BCNDERR6_MSK				BIT(19)
#define BIT_BCNDERR5_MSK				BIT(18)
#define BIT_BCNDERR4_MSK				BIT(17)
#define BIT_BCNDERR3_MSK				BIT(16)
#define BIT_BCNDERR2_MSK				BIT(15)
#define BIT_BCNDERR1_MSK				BIT(14)
#define BIT_ATIMEND_E_MSK				BIT(13)
#define BIT_ATIMEND__MSK				BIT(12)
#define BIT_TXERR_MSK					BIT(11)
#define BIT_RXERR_MSK					BIT(10)
#define BIT_TXFOVW_MSK					BIT(9)
#define BIT_FOVW_MSK					BIT(8)
#define BIT_CPU_MGQ_TXDONE_MSK				BIT(5)
#define BIT_PS_TIMER_C_MSK				BIT(4)
#define BIT_PS_TIMER_B_MSK				BIT(3)
#define BIT_PS_TIMER_A_MSK				BIT(2)
#define BIT_CPUMGQ_TX_TIMER_MSK			BIT(1)

/* 2 REG_HISR1				(Offset 0x00BC) */

#define BIT_BTON_STS_UPDATE_INT			BIT(29)
#define BIT_MCU_ERR					BIT(28)
#define BIT_BCNDMAINT7					BIT(27)
#define BIT_BCNDMAINT6					BIT(26)
#define BIT_BCNDMAINT5					BIT(25)
#define BIT_BCNDMAINT4					BIT(24)
#define BIT_BCNDMAINT3					BIT(23)
#define BIT_BCNDMAINT2					BIT(22)
#define BIT_BCNDMAINT1					BIT(21)
#define BIT_BCNDERR7					BIT(20)
#define BIT_BCNDERR6					BIT(19)
#define BIT_BCNDERR5					BIT(18)
#define BIT_BCNDERR4					BIT(17)
#define BIT_BCNDERR3					BIT(16)
#define BIT_BCNDERR2					BIT(15)
#define BIT_BCNDERR1					BIT(14)
#define BIT_ATIMEND_E					BIT(13)
#define BIT_ATIMEND					BIT(12)
#define BIT_TXERR_INT					BIT(11)
#define BIT_RXERR_INT					BIT(10)
#define BIT_TXFOVW					BIT(9)
#define BIT_FOVW					BIT(8)
#define BIT_CPU_MGQ_TXDONE				BIT(5)
#define BIT_PS_TIMER_C					BIT(4)
#define BIT_PS_TIMER_B					BIT(3)
#define BIT_PS_TIMER_A					BIT(2)
#define BIT_CPUMGQ_TX_TIMER				BIT(1)

/* 2 REG_HIMR2_AMB				(Offset 0x00C0) */

#define BIT_BCNDMAINT_P4_MSK_AMB			BIT(31)
#define BIT_BCNDMAINT_P3_MSK_AMB			BIT(30)
#define BIT_BCNDMAINT_P2_MSK_AMB			BIT(29)
#define BIT_BCNDMAINT_P1_MSK_AMB			BIT(28)
#define BIT_ATIMEND7_MSK_AMB				BIT(22)
#define BIT_ATIMEND6_MSK_AMB				BIT(21)
#define BIT_ATIMEND5_MSK_AMB				BIT(20)
#define BIT_ATIMEND4_MSK_AMB				BIT(19)
#define BIT_ATIMEND3_MSK_AMB				BIT(18)
#define BIT_ATIMEND2_MSK_AMB				BIT(17)
#define BIT_ATIMEND1_MSK_AMB				BIT(16)
#define BIT_TXBCN7OK_MSK_AMB				BIT(14)
#define BIT_TXBCN6OK_MSK_AMB				BIT(13)
#define BIT_TXBCN5OK_MSK_AMB				BIT(12)
#define BIT_TXBCN4OK_MSK_AMB				BIT(11)
#define BIT_TXBCN3OK_MSK_AMB				BIT(10)
#define BIT_TXBCN2OK_MSK_AMB				BIT(9)
#define BIT_TXBCN1OK_MSK_V1_AMB			BIT(8)
#define BIT_TXBCN7ERR_MSK_AMB				BIT(6)
#define BIT_TXBCN6ERR_MSK_AMB				BIT(5)
#define BIT_TXBCN5ERR_MSK_AMB				BIT(4)
#define BIT_TXBCN4ERR_MSK_AMB				BIT(3)
#define BIT_TXBCN3ERR_MSK_AMB				BIT(2)
#define BIT_TXBCN2ERR_MSK_AMB				BIT(1)
#define BIT_TXBCN1ERR_MSK_V1_AMB			BIT(0)

/* 2 REG_HISR2_AMB				(Offset 0x00C4) */

#define BIT_BCNDMAINT_P4_AMB				BIT(31)
#define BIT_BCNDMAINT_P3_AMB				BIT(30)
#define BIT_BCNDMAINT_P2_AMB				BIT(29)
#define BIT_BCNDMAINT_P1_AMB				BIT(28)
#define BIT_ATIMEND7__AMB				BIT(22)
#define BIT_ATIMEND6__AMB				BIT(21)
#define BIT_ATIMEND5_AMB				BIT(20)
#define BIT_ATIMEND4_AMB				BIT(19)
#define BIT_ATIMEND3_AMB				BIT(18)
#define BIT_ATIMEND2_AMB				BIT(17)
#define BIT_ATIMEND1_AMB				BIT(16)
#define BIT_TXBCN7OK_AMB				BIT(14)
#define BIT_TXBCN6OK_AMB				BIT(13)
#define BIT_TXBCN5OK_AMB				BIT(12)
#define BIT_TXBCN4OK_AMB				BIT(11)
#define BIT_TXBCN3OK_AMB				BIT(10)
#define BIT_TXBCN2OK_AMB				BIT(9)
#define BIT_TXBCN1OK_AMB				BIT(8)
#define BIT_TXBCN7ERR_AMB				BIT(6)
#define BIT_TXBCN6ERR_AMB				BIT(5)
#define BIT_TXBCN5ERR_AMB				BIT(4)
#define BIT_TXBCN4ERR_AMB				BIT(3)
#define BIT_TXBCN3ERR_AMB				BIT(2)
#define BIT_TXBCN2ERR_AMB				BIT(1)
#define BIT_TXBCN1ERR_AMB				BIT(0)

/* 2 REG_HIMR3_AMB				(Offset 0x00C8) */

#define BIT_WDT_PLATFORM_INT_MSK_AMB			BIT(18)
#define BIT_WDT_CPU_INT_MSK_AMB			BIT(17)
#define BIT_SETH2CDOK_MASK_AMB				BIT(16)
#define BIT_H2C_CMD_FULL_MASK_AMB			BIT(15)
#define BIT_PWR_INT_127_MASK_AMB			BIT(14)
#define BIT_TXSHORTCUT_TXDESUPDATEOK_MASK_AMB		BIT(13)
#define BIT_TXSHORTCUT_BKUPDATEOK_MASK_AMB		BIT(12)
#define BIT_TXSHORTCUT_BEUPDATEOK_MASK_AMB		BIT(11)
#define BIT_TXSHORTCUT_VIUPDATEOK_MASK_AMB		BIT(10)
#define BIT_TXSHORTCUT_VOUPDATEOK_MASK_AMB		BIT(9)
#define BIT_PWR_INT_127_MASK_V1_AMB			BIT(8)
#define BIT_PWR_INT_126TO96_MASK_AMB			BIT(7)
#define BIT_PWR_INT_95TO64_MASK_AMB			BIT(6)
#define BIT_PWR_INT_63TO32_MASK_AMB			BIT(5)
#define BIT_PWR_INT_31TO0_MASK_AMB			BIT(4)
#define BIT_DDMA0_LP_INT_MSK_AMB			BIT(1)
#define BIT_DDMA0_HP_INT_MSK_AMB			BIT(0)

/* 2 REG_HISR3_AMB				(Offset 0x00CC) */

#define BIT_WDT_PLATFORM_INT_AMB			BIT(18)
#define BIT_WDT_CPU_INT_AMB				BIT(17)
#define BIT_SETH2CDOK_AMB				BIT(16)
#define BIT_H2C_CMD_FULL_AMB				BIT(15)
#define BIT_PWR_INT_127_AMB				BIT(14)
#define BIT_TXSHORTCUT_TXDESUPDATEOK_AMB		BIT(13)
#define BIT_TXSHORTCUT_BKUPDATEOK_AMB			BIT(12)
#define BIT_TXSHORTCUT_BEUPDATEOK_AMB			BIT(11)
#define BIT_TXSHORTCUT_VIUPDATEOK_AMB			BIT(10)
#define BIT_TXSHORTCUT_VOUPDATEOK_AMB			BIT(9)
#define BIT_PWR_INT_127_V1_AMB				BIT(8)
#define BIT_PWR_INT_126TO96_AMB			BIT(7)
#define BIT_PWR_INT_95TO64_AMB				BIT(6)
#define BIT_PWR_INT_63TO32_AMB				BIT(5)
#define BIT_PWR_INT_31TO0_AMB				BIT(4)
#define BIT_DDMA0_LP_INT_AMB				BIT(1)
#define BIT_DDMA0_HP_INT_AMB				BIT(0)

/* 2 REG_BIST_CTRL				(Offset 0x00D0) */

#define BIT_BIST_DRFMON_EN				BIT(30)
#define BIT_BIST_DRFM					BIT(29)

#define BIT_SHIFT_BIST_RPT_SEL_AMB			16
#define BIT_MASK_BIST_RPT_SEL_AMB			0x3f
#define BIT_BIST_RPT_SEL_AMB(x)			(((x) & BIT_MASK_BIST_RPT_SEL_AMB) << BIT_SHIFT_BIST_RPT_SEL_AMB)
#define BITS_BIST_RPT_SEL_AMB				(BIT_MASK_BIST_RPT_SEL_AMB << BIT_SHIFT_BIST_RPT_SEL_AMB)
#define BIT_CLEAR_BIST_RPT_SEL_AMB(x)			((x) & (~BITS_BIST_RPT_SEL_AMB))
#define BIT_GET_BIST_RPT_SEL_AMB(x)			(((x) >> BIT_SHIFT_BIST_RPT_SEL_AMB) & BIT_MASK_BIST_RPT_SEL_AMB)
#define BIT_SET_BIST_RPT_SEL_AMB(x, v)			(BIT_CLEAR_BIST_RPT_SEL_AMB(x) | BIT_BIST_RPT_SEL_AMB(v))

#define BIT_SHIFT_BIST_WLMCU_EN			13
#define BIT_MASK_BIST_WLMCU_EN				0x7
#define BIT_BIST_WLMCU_EN(x)				(((x) & BIT_MASK_BIST_WLMCU_EN) << BIT_SHIFT_BIST_WLMCU_EN)
#define BITS_BIST_WLMCU_EN				(BIT_MASK_BIST_WLMCU_EN << BIT_SHIFT_BIST_WLMCU_EN)
#define BIT_CLEAR_BIST_WLMCU_EN(x)			((x) & (~BITS_BIST_WLMCU_EN))
#define BIT_GET_BIST_WLMCU_EN(x)			(((x) >> BIT_SHIFT_BIST_WLMCU_EN) & BIT_MASK_BIST_WLMCU_EN)
#define BIT_SET_BIST_WLMCU_EN(x, v)			(BIT_CLEAR_BIST_WLMCU_EN(x) | BIT_BIST_WLMCU_EN(v))

#define BIT_SHIFT_BIST_WLMAC_EN			8
#define BIT_MASK_BIST_WLMAC_EN				0x1f
#define BIT_BIST_WLMAC_EN(x)				(((x) & BIT_MASK_BIST_WLMAC_EN) << BIT_SHIFT_BIST_WLMAC_EN)
#define BITS_BIST_WLMAC_EN				(BIT_MASK_BIST_WLMAC_EN << BIT_SHIFT_BIST_WLMAC_EN)
#define BIT_CLEAR_BIST_WLMAC_EN(x)			((x) & (~BITS_BIST_WLMAC_EN))
#define BIT_GET_BIST_WLMAC_EN(x)			(((x) >> BIT_SHIFT_BIST_WLMAC_EN) & BIT_MASK_BIST_WLMAC_EN)
#define BIT_SET_BIST_WLMAC_EN(x, v)			(BIT_CLEAR_BIST_WLMAC_EN(x) | BIT_BIST_WLMAC_EN(v))

#define BIT_BIST_TRSM_PS				BIT(4)
#define BIT_BIST_TRSM_LV				BIT(3)
#define BIT_BIST_MODE					BIT(2)
#define BIT_BIST_RSTN					BIT(1)
#define BIT_BIST_CLK_EN				BIT(0)

/* 2 REG_BIST_RPT				(Offset 0x00D4) */

#define BIT_MBIST_START_PAUSE				BIT(2)
#define BIT_MBIST_FAIL					BIT(1)
#define BIT_MBIST_DONE					BIT(0)

/* 2 REG_MEM_CTRL0				(Offset 0x00E0) */

#define BIT_SHIFT_SNPS_1PRF_WPULSE			26
#define BIT_MASK_SNPS_1PRF_WPULSE			0x7
#define BIT_SNPS_1PRF_WPULSE(x)			(((x) & BIT_MASK_SNPS_1PRF_WPULSE) << BIT_SHIFT_SNPS_1PRF_WPULSE)
#define BITS_SNPS_1PRF_WPULSE				(BIT_MASK_SNPS_1PRF_WPULSE << BIT_SHIFT_SNPS_1PRF_WPULSE)
#define BIT_CLEAR_SNPS_1PRF_WPULSE(x)			((x) & (~BITS_SNPS_1PRF_WPULSE))
#define BIT_GET_SNPS_1PRF_WPULSE(x)			(((x) >> BIT_SHIFT_SNPS_1PRF_WPULSE) & BIT_MASK_SNPS_1PRF_WPULSE)
#define BIT_SET_SNPS_1PRF_WPULSE(x, v)			(BIT_CLEAR_SNPS_1PRF_WPULSE(x) | BIT_SNPS_1PRF_WPULSE(v))

#define BIT_RETMEM_POW_MOD				BIT(24)

#define BIT_SHIFT_SNPS_1PRF_WA				23
#define BIT_MASK_SNPS_1PRF_WA				0x7
#define BIT_SNPS_1PRF_WA(x)				(((x) & BIT_MASK_SNPS_1PRF_WA) << BIT_SHIFT_SNPS_1PRF_WA)
#define BITS_SNPS_1PRF_WA				(BIT_MASK_SNPS_1PRF_WA << BIT_SHIFT_SNPS_1PRF_WA)
#define BIT_CLEAR_SNPS_1PRF_WA(x)			((x) & (~BITS_SNPS_1PRF_WA))
#define BIT_GET_SNPS_1PRF_WA(x)			(((x) >> BIT_SHIFT_SNPS_1PRF_WA) & BIT_MASK_SNPS_1PRF_WA)
#define BIT_SET_SNPS_1PRF_WA(x, v)			(BIT_CLEAR_SNPS_1PRF_WA(x) | BIT_SNPS_1PRF_WA(v))

#define BIT_SHIFT_SNPS_1PRF_RA				21
#define BIT_MASK_SNPS_1PRF_RA				0x3
#define BIT_SNPS_1PRF_RA(x)				(((x) & BIT_MASK_SNPS_1PRF_RA) << BIT_SHIFT_SNPS_1PRF_RA)
#define BITS_SNPS_1PRF_RA				(BIT_MASK_SNPS_1PRF_RA << BIT_SHIFT_SNPS_1PRF_RA)
#define BIT_CLEAR_SNPS_1PRF_RA(x)			((x) & (~BITS_SNPS_1PRF_RA))
#define BIT_GET_SNPS_1PRF_RA(x)			(((x) >> BIT_SHIFT_SNPS_1PRF_RA) & BIT_MASK_SNPS_1PRF_RA)
#define BIT_SET_SNPS_1PRF_RA(x, v)			(BIT_CLEAR_SNPS_1PRF_RA(x) | BIT_SNPS_1PRF_RA(v))

#define BIT_SNPS_1PRF_RME				BIT(20)

#define BIT_SHIFT_SNPS_1PRF_RM				16
#define BIT_MASK_SNPS_1PRF_RM				0xf
#define BIT_SNPS_1PRF_RM(x)				(((x) & BIT_MASK_SNPS_1PRF_RM) << BIT_SHIFT_SNPS_1PRF_RM)
#define BITS_SNPS_1PRF_RM				(BIT_MASK_SNPS_1PRF_RM << BIT_SHIFT_SNPS_1PRF_RM)
#define BIT_CLEAR_SNPS_1PRF_RM(x)			((x) & (~BITS_SNPS_1PRF_RM))
#define BIT_GET_SNPS_1PRF_RM(x)			(((x) >> BIT_SHIFT_SNPS_1PRF_RM) & BIT_MASK_SNPS_1PRF_RM)
#define BIT_SET_SNPS_1PRF_RM(x, v)			(BIT_CLEAR_SNPS_1PRF_RM(x) | BIT_SNPS_1PRF_RM(v))

#define BIT_SHIFT_SNPS_1PSRAM_WPULSE			10
#define BIT_MASK_SNPS_1PSRAM_WPULSE			0x7
#define BIT_SNPS_1PSRAM_WPULSE(x)			(((x) & BIT_MASK_SNPS_1PSRAM_WPULSE) << BIT_SHIFT_SNPS_1PSRAM_WPULSE)
#define BITS_SNPS_1PSRAM_WPULSE			(BIT_MASK_SNPS_1PSRAM_WPULSE << BIT_SHIFT_SNPS_1PSRAM_WPULSE)
#define BIT_CLEAR_SNPS_1PSRAM_WPULSE(x)		((x) & (~BITS_SNPS_1PSRAM_WPULSE))
#define BIT_GET_SNPS_1PSRAM_WPULSE(x)			(((x) >> BIT_SHIFT_SNPS_1PSRAM_WPULSE) & BIT_MASK_SNPS_1PSRAM_WPULSE)
#define BIT_SET_SNPS_1PSRAM_WPULSE(x, v)		(BIT_CLEAR_SNPS_1PSRAM_WPULSE(x) | BIT_SNPS_1PSRAM_WPULSE(v))

#define BIT_SHIFT_SNPS_1PSRAM_WA			7
#define BIT_MASK_SNPS_1PSRAM_WA			0x7
#define BIT_SNPS_1PSRAM_WA(x)				(((x) & BIT_MASK_SNPS_1PSRAM_WA) << BIT_SHIFT_SNPS_1PSRAM_WA)
#define BITS_SNPS_1PSRAM_WA				(BIT_MASK_SNPS_1PSRAM_WA << BIT_SHIFT_SNPS_1PSRAM_WA)
#define BIT_CLEAR_SNPS_1PSRAM_WA(x)			((x) & (~BITS_SNPS_1PSRAM_WA))
#define BIT_GET_SNPS_1PSRAM_WA(x)			(((x) >> BIT_SHIFT_SNPS_1PSRAM_WA) & BIT_MASK_SNPS_1PSRAM_WA)
#define BIT_SET_SNPS_1PSRAM_WA(x, v)			(BIT_CLEAR_SNPS_1PSRAM_WA(x) | BIT_SNPS_1PSRAM_WA(v))

#define BIT_SHIFT_SNPS_1PSRAM_RA			5
#define BIT_MASK_SNPS_1PSRAM_RA			0x3
#define BIT_SNPS_1PSRAM_RA(x)				(((x) & BIT_MASK_SNPS_1PSRAM_RA) << BIT_SHIFT_SNPS_1PSRAM_RA)
#define BITS_SNPS_1PSRAM_RA				(BIT_MASK_SNPS_1PSRAM_RA << BIT_SHIFT_SNPS_1PSRAM_RA)
#define BIT_CLEAR_SNPS_1PSRAM_RA(x)			((x) & (~BITS_SNPS_1PSRAM_RA))
#define BIT_GET_SNPS_1PSRAM_RA(x)			(((x) >> BIT_SHIFT_SNPS_1PSRAM_RA) & BIT_MASK_SNPS_1PSRAM_RA)
#define BIT_SET_SNPS_1PSRAM_RA(x, v)			(BIT_CLEAR_SNPS_1PSRAM_RA(x) | BIT_SNPS_1PSRAM_RA(v))

#define BIT_SNPS_1PSRAM_RME				BIT(4)
#define BIT_SNPS_ROM_RME				BIT(4)

#define BIT_SHIFT_SNPS_1PSRAM_RM			0
#define BIT_MASK_SNPS_1PSRAM_RM			0xf
#define BIT_SNPS_1PSRAM_RM(x)				(((x) & BIT_MASK_SNPS_1PSRAM_RM) << BIT_SHIFT_SNPS_1PSRAM_RM)
#define BITS_SNPS_1PSRAM_RM				(BIT_MASK_SNPS_1PSRAM_RM << BIT_SHIFT_SNPS_1PSRAM_RM)
#define BIT_CLEAR_SNPS_1PSRAM_RM(x)			((x) & (~BITS_SNPS_1PSRAM_RM))
#define BIT_GET_SNPS_1PSRAM_RM(x)			(((x) >> BIT_SHIFT_SNPS_1PSRAM_RM) & BIT_MASK_SNPS_1PSRAM_RM)
#define BIT_SET_SNPS_1PSRAM_RM(x, v)			(BIT_CLEAR_SNPS_1PSRAM_RM(x) | BIT_SNPS_1PSRAM_RM(v))

#define BIT_SHIFT_SNPS_ROM_RM				0
#define BIT_MASK_SNPS_ROM_RM				0xf
#define BIT_SNPS_ROM_RM(x)				(((x) & BIT_MASK_SNPS_ROM_RM) << BIT_SHIFT_SNPS_ROM_RM)
#define BITS_SNPS_ROM_RM				(BIT_MASK_SNPS_ROM_RM << BIT_SHIFT_SNPS_ROM_RM)
#define BIT_CLEAR_SNPS_ROM_RM(x)			((x) & (~BITS_SNPS_ROM_RM))
#define BIT_GET_SNPS_ROM_RM(x)				(((x) >> BIT_SHIFT_SNPS_ROM_RM) & BIT_MASK_SNPS_ROM_RM)
#define BIT_SET_SNPS_ROM_RM(x, v)			(BIT_CLEAR_SNPS_ROM_RM(x) | BIT_SNPS_ROM_RM(v))

/* 2 REG_SYS_CONFIG0				(Offset 0x00F0) */

#define BIT_SHIFT_VENDOR_ID				16
#define BIT_MASK_VENDOR_ID				0xf
#define BIT_VENDOR_ID(x)				(((x) & BIT_MASK_VENDOR_ID) << BIT_SHIFT_VENDOR_ID)
#define BITS_VENDOR_ID					(BIT_MASK_VENDOR_ID << BIT_SHIFT_VENDOR_ID)
#define BIT_CLEAR_VENDOR_ID(x)				((x) & (~BITS_VENDOR_ID))
#define BIT_GET_VENDOR_ID(x)				(((x) >> BIT_SHIFT_VENDOR_ID) & BIT_MASK_VENDOR_ID)
#define BIT_SET_VENDOR_ID(x, v)			(BIT_CLEAR_VENDOR_ID(x) | BIT_VENDOR_ID(v))

#define BIT_SHIFT_CHIP_VER				12
#define BIT_MASK_CHIP_VER				0xf
#define BIT_CHIP_VER(x)				(((x) & BIT_MASK_CHIP_VER) << BIT_SHIFT_CHIP_VER)
#define BITS_CHIP_VER					(BIT_MASK_CHIP_VER << BIT_SHIFT_CHIP_VER)
#define BIT_CLEAR_CHIP_VER(x)				((x) & (~BITS_CHIP_VER))
#define BIT_GET_CHIP_VER(x)				(((x) >> BIT_SHIFT_CHIP_VER) & BIT_MASK_CHIP_VER)
#define BIT_SET_CHIP_VER(x, v)				(BIT_CLEAR_CHIP_VER(x) | BIT_CHIP_VER(v))

/* 2 REG_SYS_CONFIG3				(Offset 0x00FC) */

#define BIT_SW_OFFLOAD_EN_AMB				BIT(16)
#define BIT_BD_MAC3_AMB				BIT(11)
#define BIT_BD_MAC1_AMB				BIT(10)
#define BIT_BD_MAC2_AMB				BIT(9)
#define BIT_ACLK_VLD_AMB				BIT(8)

#define BIT_SHIFT_HW_ID				0
#define BIT_MASK_HW_ID					0xff
#define BIT_HW_ID(x)					(((x) & BIT_MASK_HW_ID) << BIT_SHIFT_HW_ID)
#define BITS_HW_ID					(BIT_MASK_HW_ID << BIT_SHIFT_HW_ID)
#define BIT_CLEAR_HW_ID(x)				((x) & (~BITS_HW_ID))
#define BIT_GET_HW_ID(x)				(((x) >> BIT_SHIFT_HW_ID) & BIT_MASK_HW_ID)
#define BIT_SET_HW_ID(x, v)				(BIT_CLEAR_HW_ID(x) | BIT_HW_ID(v))

/* 2 REG_CR					(Offset 0x0100) */

#define BIT_SHIFT_LBMODE				24
#define BIT_MASK_LBMODE				0x1f
#define BIT_LBMODE(x)					(((x) & BIT_MASK_LBMODE) << BIT_SHIFT_LBMODE)
#define BITS_LBMODE					(BIT_MASK_LBMODE << BIT_SHIFT_LBMODE)
#define BIT_CLEAR_LBMODE(x)				((x) & (~BITS_LBMODE))
#define BIT_GET_LBMODE(x)				(((x) >> BIT_SHIFT_LBMODE) & BIT_MASK_LBMODE)
#define BIT_SET_LBMODE(x, v)				(BIT_CLEAR_LBMODE(x) | BIT_LBMODE(v))

#define BIT_SHIFT_NETYPE1				18
#define BIT_MASK_NETYPE1				0x3
#define BIT_NETYPE1(x)					(((x) & BIT_MASK_NETYPE1) << BIT_SHIFT_NETYPE1)
#define BITS_NETYPE1					(BIT_MASK_NETYPE1 << BIT_SHIFT_NETYPE1)
#define BIT_CLEAR_NETYPE1(x)				((x) & (~BITS_NETYPE1))
#define BIT_GET_NETYPE1(x)				(((x) >> BIT_SHIFT_NETYPE1) & BIT_MASK_NETYPE1)
#define BIT_SET_NETYPE1(x, v)				(BIT_CLEAR_NETYPE1(x) | BIT_NETYPE1(v))

#define BIT_SHIFT_NETYPE0				16
#define BIT_MASK_NETYPE0				0x3
#define BIT_NETYPE0(x)					(((x) & BIT_MASK_NETYPE0) << BIT_SHIFT_NETYPE0)
#define BITS_NETYPE0					(BIT_MASK_NETYPE0 << BIT_SHIFT_NETYPE0)
#define BIT_CLEAR_NETYPE0(x)				((x) & (~BITS_NETYPE0))
#define BIT_GET_NETYPE0(x)				(((x) >> BIT_SHIFT_NETYPE0) & BIT_MASK_NETYPE0)
#define BIT_SET_NETYPE0(x, v)				(BIT_CLEAR_NETYPE0(x) | BIT_NETYPE0(v))

#define BIT_COUNTER_STS_EN				BIT(13)
#define BIT_I2C_MAILBOX_EN				BIT(12)
#define BIT_SHCUT_EN					BIT(11)
#define BIT_32K_CAL_TMR_EN				BIT(10)
#define BIT_MAC_SEC_EN					BIT(9)
#define BIT_ENSWBCN					BIT(8)
#define BIT_MACRXEN					BIT(7)
#define BIT_MACTXEN					BIT(6)
#define BIT_SCHEDULE_EN				BIT(5)
#define BIT_PROTOCOL_EN				BIT(4)
#define BIT_RXDMA_EN					BIT(3)
#define BIT_TXDMA_EN					BIT(2)
#define BIT_HCI_RXDMA_EN				BIT(1)
#define BIT_HCI_TXDMA_EN				BIT(0)

/* 2 REG_PG_SIZE				(Offset 0x0104) */

#define BIT_SHIFT_DBG_FIFO_SEL				16
#define BIT_MASK_DBG_FIFO_SEL				0xff
#define BIT_DBG_FIFO_SEL(x)				(((x) & BIT_MASK_DBG_FIFO_SEL) << BIT_SHIFT_DBG_FIFO_SEL)
#define BITS_DBG_FIFO_SEL				(BIT_MASK_DBG_FIFO_SEL << BIT_SHIFT_DBG_FIFO_SEL)
#define BIT_CLEAR_DBG_FIFO_SEL(x)			((x) & (~BITS_DBG_FIFO_SEL))
#define BIT_GET_DBG_FIFO_SEL(x)			(((x) >> BIT_SHIFT_DBG_FIFO_SEL) & BIT_MASK_DBG_FIFO_SEL)
#define BIT_SET_DBG_FIFO_SEL(x, v)			(BIT_CLEAR_DBG_FIFO_SEL(x) | BIT_DBG_FIFO_SEL(v))

/* 2 REG_PKT_BUFF_ACCESS_CTRL		(Offset 0x0106) */

#define BIT_SHIFT_PKT_BUFF_ACCESS_CTRL			0
#define BIT_MASK_PKT_BUFF_ACCESS_CTRL			0xff
#define BIT_PKT_BUFF_ACCESS_CTRL(x)			(((x) & BIT_MASK_PKT_BUFF_ACCESS_CTRL) << BIT_SHIFT_PKT_BUFF_ACCESS_CTRL)
#define BITS_PKT_BUFF_ACCESS_CTRL			(BIT_MASK_PKT_BUFF_ACCESS_CTRL << BIT_SHIFT_PKT_BUFF_ACCESS_CTRL)
#define BIT_CLEAR_PKT_BUFF_ACCESS_CTRL(x)		((x) & (~BITS_PKT_BUFF_ACCESS_CTRL))
#define BIT_GET_PKT_BUFF_ACCESS_CTRL(x)		(((x) >> BIT_SHIFT_PKT_BUFF_ACCESS_CTRL) & BIT_MASK_PKT_BUFF_ACCESS_CTRL)
#define BIT_SET_PKT_BUFF_ACCESS_CTRL(x, v)		(BIT_CLEAR_PKT_BUFF_ACCESS_CTRL(x) | BIT_PKT_BUFF_ACCESS_CTRL(v))

/* 2 REG_TSF_CLK_STATE			(Offset 0x0108) */

#define BIT_TSF_CLK_STABLE				BIT(15)

/* 2 REG_TXDMA_PQ_MAP			(Offset 0x010C) */

#define BIT_CSI_BW_EN					BIT(31)

#define BIT_SHIFT_TXDMA_H2C_MAP			16
#define BIT_MASK_TXDMA_H2C_MAP				0x3
#define BIT_TXDMA_H2C_MAP(x)				(((x) & BIT_MASK_TXDMA_H2C_MAP) << BIT_SHIFT_TXDMA_H2C_MAP)
#define BITS_TXDMA_H2C_MAP				(BIT_MASK_TXDMA_H2C_MAP << BIT_SHIFT_TXDMA_H2C_MAP)
#define BIT_CLEAR_TXDMA_H2C_MAP(x)			((x) & (~BITS_TXDMA_H2C_MAP))
#define BIT_GET_TXDMA_H2C_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_H2C_MAP) & BIT_MASK_TXDMA_H2C_MAP)
#define BIT_SET_TXDMA_H2C_MAP(x, v)			(BIT_CLEAR_TXDMA_H2C_MAP(x) | BIT_TXDMA_H2C_MAP(v))

#define BIT_SHIFT_TXDMA_HIQ_MAP			14
#define BIT_MASK_TXDMA_HIQ_MAP				0x3
#define BIT_TXDMA_HIQ_MAP(x)				(((x) & BIT_MASK_TXDMA_HIQ_MAP) << BIT_SHIFT_TXDMA_HIQ_MAP)
#define BITS_TXDMA_HIQ_MAP				(BIT_MASK_TXDMA_HIQ_MAP << BIT_SHIFT_TXDMA_HIQ_MAP)
#define BIT_CLEAR_TXDMA_HIQ_MAP(x)			((x) & (~BITS_TXDMA_HIQ_MAP))
#define BIT_GET_TXDMA_HIQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_HIQ_MAP) & BIT_MASK_TXDMA_HIQ_MAP)
#define BIT_SET_TXDMA_HIQ_MAP(x, v)			(BIT_CLEAR_TXDMA_HIQ_MAP(x) | BIT_TXDMA_HIQ_MAP(v))

#define BIT_SHIFT_TXDMA_MGQ_MAP			12
#define BIT_MASK_TXDMA_MGQ_MAP				0x3
#define BIT_TXDMA_MGQ_MAP(x)				(((x) & BIT_MASK_TXDMA_MGQ_MAP) << BIT_SHIFT_TXDMA_MGQ_MAP)
#define BITS_TXDMA_MGQ_MAP				(BIT_MASK_TXDMA_MGQ_MAP << BIT_SHIFT_TXDMA_MGQ_MAP)
#define BIT_CLEAR_TXDMA_MGQ_MAP(x)			((x) & (~BITS_TXDMA_MGQ_MAP))
#define BIT_GET_TXDMA_MGQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_MGQ_MAP) & BIT_MASK_TXDMA_MGQ_MAP)
#define BIT_SET_TXDMA_MGQ_MAP(x, v)			(BIT_CLEAR_TXDMA_MGQ_MAP(x) | BIT_TXDMA_MGQ_MAP(v))

#define BIT_SHIFT_TXDMA_BKQ_MAP			10
#define BIT_MASK_TXDMA_BKQ_MAP				0x3
#define BIT_TXDMA_BKQ_MAP(x)				(((x) & BIT_MASK_TXDMA_BKQ_MAP) << BIT_SHIFT_TXDMA_BKQ_MAP)
#define BITS_TXDMA_BKQ_MAP				(BIT_MASK_TXDMA_BKQ_MAP << BIT_SHIFT_TXDMA_BKQ_MAP)
#define BIT_CLEAR_TXDMA_BKQ_MAP(x)			((x) & (~BITS_TXDMA_BKQ_MAP))
#define BIT_GET_TXDMA_BKQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_BKQ_MAP) & BIT_MASK_TXDMA_BKQ_MAP)
#define BIT_SET_TXDMA_BKQ_MAP(x, v)			(BIT_CLEAR_TXDMA_BKQ_MAP(x) | BIT_TXDMA_BKQ_MAP(v))

#define BIT_SHIFT_TXDMA_BEQ_MAP			8
#define BIT_MASK_TXDMA_BEQ_MAP				0x3
#define BIT_TXDMA_BEQ_MAP(x)				(((x) & BIT_MASK_TXDMA_BEQ_MAP) << BIT_SHIFT_TXDMA_BEQ_MAP)
#define BITS_TXDMA_BEQ_MAP				(BIT_MASK_TXDMA_BEQ_MAP << BIT_SHIFT_TXDMA_BEQ_MAP)
#define BIT_CLEAR_TXDMA_BEQ_MAP(x)			((x) & (~BITS_TXDMA_BEQ_MAP))
#define BIT_GET_TXDMA_BEQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_BEQ_MAP) & BIT_MASK_TXDMA_BEQ_MAP)
#define BIT_SET_TXDMA_BEQ_MAP(x, v)			(BIT_CLEAR_TXDMA_BEQ_MAP(x) | BIT_TXDMA_BEQ_MAP(v))

#define BIT_SHIFT_TXDMA_VIQ_MAP			6
#define BIT_MASK_TXDMA_VIQ_MAP				0x3
#define BIT_TXDMA_VIQ_MAP(x)				(((x) & BIT_MASK_TXDMA_VIQ_MAP) << BIT_SHIFT_TXDMA_VIQ_MAP)
#define BITS_TXDMA_VIQ_MAP				(BIT_MASK_TXDMA_VIQ_MAP << BIT_SHIFT_TXDMA_VIQ_MAP)
#define BIT_CLEAR_TXDMA_VIQ_MAP(x)			((x) & (~BITS_TXDMA_VIQ_MAP))
#define BIT_GET_TXDMA_VIQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_VIQ_MAP) & BIT_MASK_TXDMA_VIQ_MAP)
#define BIT_SET_TXDMA_VIQ_MAP(x, v)			(BIT_CLEAR_TXDMA_VIQ_MAP(x) | BIT_TXDMA_VIQ_MAP(v))

#define BIT_SHIFT_TXDMA_VOQ_MAP			4
#define BIT_MASK_TXDMA_VOQ_MAP				0x3
#define BIT_TXDMA_VOQ_MAP(x)				(((x) & BIT_MASK_TXDMA_VOQ_MAP) << BIT_SHIFT_TXDMA_VOQ_MAP)
#define BITS_TXDMA_VOQ_MAP				(BIT_MASK_TXDMA_VOQ_MAP << BIT_SHIFT_TXDMA_VOQ_MAP)
#define BIT_CLEAR_TXDMA_VOQ_MAP(x)			((x) & (~BITS_TXDMA_VOQ_MAP))
#define BIT_GET_TXDMA_VOQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_VOQ_MAP) & BIT_MASK_TXDMA_VOQ_MAP)
#define BIT_SET_TXDMA_VOQ_MAP(x, v)			(BIT_CLEAR_TXDMA_VOQ_MAP(x) | BIT_TXDMA_VOQ_MAP(v))

#define BIT_TXDMA_BW_EN				BIT(3)
#define BIT_RXDMA_AGG_EN				BIT(2)
#define BIT_RXSHFT_EN					BIT(1)
#define BIT_RXDMA_ARBBW_EN				BIT(0)

/* 2 REG_TRXFF_BNDY				(Offset 0x0114) */

#define BIT_SHIFT_FWFFOVFL_RSV				16
#define BIT_MASK_FWFFOVFL_RSV				0xf
#define BIT_FWFFOVFL_RSV(x)				(((x) & BIT_MASK_FWFFOVFL_RSV) << BIT_SHIFT_FWFFOVFL_RSV)
#define BITS_FWFFOVFL_RSV				(BIT_MASK_FWFFOVFL_RSV << BIT_SHIFT_FWFFOVFL_RSV)
#define BIT_CLEAR_FWFFOVFL_RSV(x)			((x) & (~BITS_FWFFOVFL_RSV))
#define BIT_GET_FWFFOVFL_RSV(x)			(((x) >> BIT_SHIFT_FWFFOVFL_RSV) & BIT_MASK_FWFFOVFL_RSV)
#define BIT_SET_FWFFOVFL_RSV(x, v)			(BIT_CLEAR_FWFFOVFL_RSV(x) | BIT_FWFFOVFL_RSV(v))

#define BIT_SHIFT_RXFFOVFL_RSV_V2			8
#define BIT_MASK_RXFFOVFL_RSV_V2			0xf
#define BIT_RXFFOVFL_RSV_V2(x)				(((x) & BIT_MASK_RXFFOVFL_RSV_V2) << BIT_SHIFT_RXFFOVFL_RSV_V2)
#define BITS_RXFFOVFL_RSV_V2				(BIT_MASK_RXFFOVFL_RSV_V2 << BIT_SHIFT_RXFFOVFL_RSV_V2)
#define BIT_CLEAR_RXFFOVFL_RSV_V2(x)			((x) & (~BITS_RXFFOVFL_RSV_V2))
#define BIT_GET_RXFFOVFL_RSV_V2(x)			(((x) >> BIT_SHIFT_RXFFOVFL_RSV_V2) & BIT_MASK_RXFFOVFL_RSV_V2)
#define BIT_SET_RXFFOVFL_RSV_V2(x, v)			(BIT_CLEAR_RXFFOVFL_RSV_V2(x) | BIT_RXFFOVFL_RSV_V2(v))

#define BIT_SHIFT_I2C_M_STATUS				8
#define BIT_MASK_I2C_M_STATUS				0xf
#define BIT_I2C_M_STATUS(x)				(((x) & BIT_MASK_I2C_M_STATUS) << BIT_SHIFT_I2C_M_STATUS)
#define BITS_I2C_M_STATUS				(BIT_MASK_I2C_M_STATUS << BIT_SHIFT_I2C_M_STATUS)
#define BIT_CLEAR_I2C_M_STATUS(x)			((x) & (~BITS_I2C_M_STATUS))
#define BIT_GET_I2C_M_STATUS(x)			(((x) >> BIT_SHIFT_I2C_M_STATUS) & BIT_MASK_I2C_M_STATUS)
#define BIT_SET_I2C_M_STATUS(x, v)			(BIT_CLEAR_I2C_M_STATUS(x) | BIT_I2C_M_STATUS(v))

#define BIT_SHIFT_I2C_M_BUS_GNT_FW			4
#define BIT_MASK_I2C_M_BUS_GNT_FW			0x7
#define BIT_I2C_M_BUS_GNT_FW(x)			(((x) & BIT_MASK_I2C_M_BUS_GNT_FW) << BIT_SHIFT_I2C_M_BUS_GNT_FW)
#define BITS_I2C_M_BUS_GNT_FW				(BIT_MASK_I2C_M_BUS_GNT_FW << BIT_SHIFT_I2C_M_BUS_GNT_FW)
#define BIT_CLEAR_I2C_M_BUS_GNT_FW(x)			((x) & (~BITS_I2C_M_BUS_GNT_FW))
#define BIT_GET_I2C_M_BUS_GNT_FW(x)			(((x) >> BIT_SHIFT_I2C_M_BUS_GNT_FW) & BIT_MASK_I2C_M_BUS_GNT_FW)
#define BIT_SET_I2C_M_BUS_GNT_FW(x, v)			(BIT_CLEAR_I2C_M_BUS_GNT_FW(x) | BIT_I2C_M_BUS_GNT_FW(v))

#define BIT_I2C_M_GNT_FW				BIT(3)

#define BIT_SHIFT_I2C_M_SPEED				1
#define BIT_MASK_I2C_M_SPEED				0x3
#define BIT_I2C_M_SPEED(x)				(((x) & BIT_MASK_I2C_M_SPEED) << BIT_SHIFT_I2C_M_SPEED)
#define BITS_I2C_M_SPEED				(BIT_MASK_I2C_M_SPEED << BIT_SHIFT_I2C_M_SPEED)
#define BIT_CLEAR_I2C_M_SPEED(x)			((x) & (~BITS_I2C_M_SPEED))
#define BIT_GET_I2C_M_SPEED(x)				(((x) >> BIT_SHIFT_I2C_M_SPEED) & BIT_MASK_I2C_M_SPEED)
#define BIT_SET_I2C_M_SPEED(x, v)			(BIT_CLEAR_I2C_M_SPEED(x) | BIT_I2C_M_SPEED(v))

#define BIT_I2C_M_UNLOCK				BIT(0)

#define BIT_SHIFT_RXFF0_BNDY_V2			0
#define BIT_MASK_RXFF0_BNDY_V2				0x3ffff
#define BIT_RXFF0_BNDY_V2(x)				(((x) & BIT_MASK_RXFF0_BNDY_V2) << BIT_SHIFT_RXFF0_BNDY_V2)
#define BITS_RXFF0_BNDY_V2				(BIT_MASK_RXFF0_BNDY_V2 << BIT_SHIFT_RXFF0_BNDY_V2)
#define BIT_CLEAR_RXFF0_BNDY_V2(x)			((x) & (~BITS_RXFF0_BNDY_V2))
#define BIT_GET_RXFF0_BNDY_V2(x)			(((x) >> BIT_SHIFT_RXFF0_BNDY_V2) & BIT_MASK_RXFF0_BNDY_V2)
#define BIT_SET_RXFF0_BNDY_V2(x, v)			(BIT_CLEAR_RXFF0_BNDY_V2(x) | BIT_RXFF0_BNDY_V2(v))

/* 2 REG_FE1IMR				(Offset 0x0120) */

#define BIT_FS_SW_PLL_LEAVE_32K_INT_EN			BIT(31)
#define BIT_FS_FWFF_FULL_INT_EN			BIT(30)
#define BIT_FS_BB_STOP_RX_INT_EN			BIT(29)
#define BIT_FS_RXDMA2_DONE_INT_EN			BIT(28)
#define BIT_FS_RXDONE2_INT_EN				BIT(26)
#define BIT_FS_RX_BCN_P4_INT_EN			BIT(25)
#define BIT_FS_RX_BCN_P3_INT_EN			BIT(24)
#define BIT_FS_RX_BCN_P2_INT_EN			BIT(23)
#define BIT_FS_RX_BCN_P1_INT_EN			BIT(22)
#define BIT_FS_RX_BCN_P0_INT_EN			BIT(21)
#define BIT_FS_RX_UMD0_INT_EN				BIT(20)
#define BIT_FS_RX_UMD1_INT_EN				BIT(19)
#define BIT_FS_RX_BMD0_INT_EN				BIT(18)
#define BIT_FS_RX_BMD1_INT_EN				BIT(17)
#define BIT_FS_RXDONE_INT_EN				BIT(16)
#define BIT_FS_WWLAN_INT_EN				BIT(15)
#define BIT_FS_SOUND_DONE_INT_EN			BIT(14)
#define BIT_FS_BF1_PRETO_INT_EN			BIT(11)
#define BIT_FS_BF0_PRETO_INT_EN			BIT(10)
#define BIT_FS_PTCL_RELEASE_MACID_INT_EN		BIT(9)
#define BIT_FS_PRETX_ERRHLD_INT_EN			BIT(8)
#define BIT_FS_LTE_COEX_EN				BIT(6)
#define BIT_FS_WLACTOFF_INT_EN				BIT(5)
#define BIT_FS_WLACTON_INT_EN				BIT(4)
#define BIT_FS_BTCMD_INT_EN				BIT(3)
#define BIT_FS_REG_MAILBOX_TO_I2C_INT_EN		BIT(2)
#define BIT_FS_TRPC_TO_INT_EN_V1			BIT(1)
#define BIT_FS_RPC_O_T_INT_EN_V1			BIT(0)

/* 2 REG_FE1ISR				(Offset 0x0124) */

#define BIT_FS_SW_PLL_LEAVE_32K_INT			BIT(31)
#define BIT_FS_FS_FWFF_FULL_INT			BIT(30)
#define BIT_FS_BB_STOP_RX_INT				BIT(29)
#define BIT_FS_RXDMA2_DONE_INT				BIT(28)
#define BIT_FS_RXDONE2_INT				BIT(26)
#define BIT_FS_RX_BCN_P4_INT				BIT(25)
#define BIT_FS_RX_BCN_P3_INT				BIT(24)
#define BIT_FS_RX_BCN_P2_INT				BIT(23)
#define BIT_FS_RX_BCN_P1_INT				BIT(22)
#define BIT_FS_RX_BCN_P0_INT				BIT(21)
#define BIT_FS_RX_UMD0_INT				BIT(20)
#define BIT_FS_RX_UMD1_INT				BIT(19)
#define BIT_FS_RX_BMD0_INT				BIT(18)
#define BIT_FS_RX_BMD1_INT				BIT(17)
#define BIT_FS_RXDONE_INT				BIT(16)
#define BIT_FS_WWLAN_INT				BIT(15)
#define BIT_FS_SOUND_DONE_INT				BIT(14)
#define BIT_FS_BF1_PRETO_INT				BIT(11)
#define BIT_FS_BF0_PRETO_INT				BIT(10)
#define BIT_FS_PTCL_RELEASE_MACID_INT			BIT(9)
#define BIT_FS_PRETX_ERRHLD_INT			BIT(8)
#define BIT_FS_LTE_COEX_INT				BIT(6)
#define BIT_FS_WLACTOFF_INT				BIT(5)
#define BIT_FS_WLACTON_INT				BIT(4)
#define BIT_FS_BCN_RX_INT_INT				BIT(3)
#define BIT_FS_MAILBOX_TO_I2C_INT			BIT(2)
#define BIT_FS_TRPC_TO_INT				BIT(1)
#define BIT_FS_RPC_O_T_INT				BIT(0)

/* 2 REG_CPWM				(Offset 0x012C) */

#define BIT_CPWM_TOGGLING				BIT(31)

#define BIT_SHIFT_CPWM_MOD				24
#define BIT_MASK_CPWM_MOD				0x7f
#define BIT_CPWM_MOD(x)				(((x) & BIT_MASK_CPWM_MOD) << BIT_SHIFT_CPWM_MOD)
#define BITS_CPWM_MOD					(BIT_MASK_CPWM_MOD << BIT_SHIFT_CPWM_MOD)
#define BIT_CLEAR_CPWM_MOD(x)				((x) & (~BITS_CPWM_MOD))
#define BIT_GET_CPWM_MOD(x)				(((x) >> BIT_SHIFT_CPWM_MOD) & BIT_MASK_CPWM_MOD)
#define BIT_SET_CPWM_MOD(x, v)				(BIT_CLEAR_CPWM_MOD(x) | BIT_CPWM_MOD(v))

/* 2 REG_FWIMR				(Offset 0x0130) */

#define BIT_FS_TXBCNOK_MB7_INT_EN			BIT(31)
#define BIT_FS_TXBCNOK_MB6_INT_EN			BIT(30)
#define BIT_FS_TXBCNOK_MB5_INT_EN			BIT(29)
#define BIT_FS_TXBCNOK_MB4_INT_EN			BIT(28)
#define BIT_FS_TXBCNOK_MB3_INT_EN			BIT(27)
#define BIT_FS_TXBCNOK_MB2_INT_EN			BIT(26)
#define BIT_FS_TXBCNOK_MB1_INT_EN			BIT(25)
#define BIT_FS_TXBCNOK_MB0_INT_EN			BIT(24)
#define BIT_FS_TXBCNERR_MB7_INT_EN			BIT(23)
#define BIT_FS_TXBCNERR_MB6_INT_EN			BIT(22)
#define BIT_FS_TXBCNERR_MB5_INT_EN			BIT(21)
#define BIT_FS_TXBCNERR_MB4_INT_EN			BIT(20)
#define BIT_FS_TXBCNERR_MB3_INT_EN			BIT(19)
#define BIT_FS_TXBCNERR_MB2_INT_EN			BIT(18)
#define BIT_FS_TXBCNERR_MB1_INT_EN			BIT(17)
#define BIT_FS_TXBCNERR_MB0_INT_EN			BIT(16)
#define BIT_CPU_MGQ_TXDONE_INT_EN			BIT(15)
#define BIT_SIFS_OVERSPEC_INT_EN			BIT(14)
#define BIT_FS_MGNTQ_RPTR_RELEASE_INT_EN		BIT(13)
#define BIT_FS_MGNTQFF_TO_INT_EN			BIT(12)
#define BIT_FS_CPUMGQ_ERR_INT_EN			BIT(11)
#define BIT_FS_TM_WAKE_INT_EN				BIT(10)
#define BIT_FS_DDMA0_LP_INT_EN				BIT(9)
#define BIT_FS_DDMA0_HP_INT_EN				BIT(8)
#define BIT_FS_TRXRPT_INT_EN				BIT(7)
#define BIT_FS_C2H_W_READY_INT_EN			BIT(6)
#define BIT_FS_HRCV_INT_EN				BIT(5)
#define BIT_FS_H2CCMD_INT_EN				BIT(4)
#define BIT_FS_TXPKTIN_INT_EN				BIT(3)
#define BIT_FS_ERRORHDL_INT_EN				BIT(2)
#define BIT_FS_TXCCX_INT_EN				BIT(1)
#define BIT_FS_TXCLOSE_INT_EN				BIT(0)

/* 2 REG_FWISR				(Offset 0x0134) */

#define BIT_FS_TXBCNOK_MB7_INT				BIT(31)
#define BIT_FS_TXBCNOK_MB6_INT				BIT(30)
#define BIT_FS_TXBCNOK_MB5_INT				BIT(29)
#define BIT_FS_TXBCNOK_MB4_INT				BIT(28)
#define BIT_FS_TXBCNOK_MB3_INT				BIT(27)
#define BIT_FS_TXBCNOK_MB2_INT				BIT(26)
#define BIT_FS_TXBCNOK_MB1_INT				BIT(25)
#define BIT_FS_TXBCNOK_MB0_INT				BIT(24)
#define BIT_FS_TXBCNERR_MB7_INT			BIT(23)
#define BIT_FS_TXBCNERR_MB6_INT			BIT(22)
#define BIT_FS_TXBCNERR_MB5_INT			BIT(21)
#define BIT_FS_TXBCNERR_MB4_INT			BIT(20)
#define BIT_FS_TXBCNERR_MB3_INT			BIT(19)
#define BIT_FS_TXBCNERR_MB2_INT			BIT(18)
#define BIT_FS_TXBCNERR_MB1_INT			BIT(17)
#define BIT_FS_TXBCNERR_MB0_INT			BIT(16)
#define BIT_CPU_MGQ_TXDONE_INT				BIT(15)
#define BIT_SIFS_OVERSPEC_INT				BIT(14)
#define BIT_FS_MGNTQ_RPTR_RELEASE_INT			BIT(13)
#define BIT_FS_MGNTQFF_TO_INT				BIT(12)
#define BIT_FS_CPUMGQ_ERR_INT				BIT(11)
#define BIT_FS_TM_WAKE_INT				BIT(10)
#define BIT_FS_DDMA0_LP_INT				BIT(9)
#define BIT_FS_DDMA0_HP_INT				BIT(8)
#define BIT_FS_TRXRPT_INT				BIT(7)
#define BIT_FS_C2H_W_READY_INT				BIT(6)
#define BIT_FS_HRCV_INT				BIT(5)
#define BIT_FS_H2CCMD_INT				BIT(4)
#define BIT_FS_TXPKTIN_INT				BIT(3)
#define BIT_FS_ERRORHDL_INT				BIT(2)
#define BIT_FS_TXCCX_INT				BIT(1)
#define BIT_FS_TXCLOSE_INT				BIT(0)

/* 2 REG_FTIMR				(Offset 0x0138) */

#define BIT_PS_TIMER_C_EARLY_INT_EN			BIT(23)
#define BIT_PS_TIMER_B_EARLY_INT_EN			BIT(22)
#define BIT_PS_TIMER_A_EARLY_INT_EN			BIT(21)
#define BIT_CPUMGQ_TX_TIMER_EARLY_INT_EN		BIT(20)
#define BIT_PS_TIMER_C_INT_EN				BIT(19)
#define BIT_PS_TIMER_B_INT_EN				BIT(18)
#define BIT_PS_TIMER_A_INT_EN				BIT(17)
#define BIT_CPUMGQ_TX_TIMER_INT_EN			BIT(16)
#define BIT_FS_PS_TIMEOUT2_EN				BIT(15)
#define BIT_FS_PS_TIMEOUT1_EN				BIT(14)
#define BIT_FS_PS_TIMEOUT0_EN				BIT(13)
#define BIT_FS_GTINT8_EN				BIT(8)
#define BIT_FS_GTINT7_EN				BIT(7)
#define BIT_FS_GTINT6_EN				BIT(6)
#define BIT_FS_GTINT5_EN				BIT(5)
#define BIT_FS_GTINT4_EN				BIT(4)
#define BIT_FS_GTINT3_EN				BIT(3)
#define BIT_FS_GTINT2_EN				BIT(2)
#define BIT_FS_GTINT1_EN				BIT(1)
#define BIT_FS_GTINT0_EN				BIT(0)

/* 2 REG_FTISR				(Offset 0x013C) */

#define BIT_PS_TIMER_C_EARLY__INT			BIT(23)
#define BIT_PS_TIMER_B_EARLY__INT			BIT(22)
#define BIT_PS_TIMER_A_EARLY__INT			BIT(21)
#define BIT_CPUMGQ_TX_TIMER_EARLY_INT			BIT(20)
#define BIT_PS_TIMER_C_INT				BIT(19)
#define BIT_PS_TIMER_B_INT				BIT(18)
#define BIT_PS_TIMER_A_INT				BIT(17)
#define BIT_CPUMGQ_TX_TIMER_INT			BIT(16)
#define BIT_FS_PS_TIMEOUT2_INT				BIT(15)
#define BIT_FS_PS_TIMEOUT1_INT				BIT(14)
#define BIT_FS_PS_TIMEOUT0_INT				BIT(13)
#define BIT_FS_GTINT8_INT				BIT(8)
#define BIT_FS_GTINT7_INT				BIT(7)
#define BIT_FS_GTINT6_INT				BIT(6)
#define BIT_FS_GTINT5_INT				BIT(5)
#define BIT_FS_GTINT4_INT				BIT(4)
#define BIT_FS_GTINT3_INT				BIT(3)
#define BIT_FS_GTINT2_INT				BIT(2)
#define BIT_FS_GTINT1_INT				BIT(1)
#define BIT_FS_GTINT0_INT				BIT(0)

/* 2 REG_PKTBUF_DBG_CTRL			(Offset 0x0140) */

#define BIT_SHIFT_PKTBUF_WRITE_EN			24
#define BIT_MASK_PKTBUF_WRITE_EN			0xff
#define BIT_PKTBUF_WRITE_EN(x)				(((x) & BIT_MASK_PKTBUF_WRITE_EN) << BIT_SHIFT_PKTBUF_WRITE_EN)
#define BITS_PKTBUF_WRITE_EN				(BIT_MASK_PKTBUF_WRITE_EN << BIT_SHIFT_PKTBUF_WRITE_EN)
#define BIT_CLEAR_PKTBUF_WRITE_EN(x)			((x) & (~BITS_PKTBUF_WRITE_EN))
#define BIT_GET_PKTBUF_WRITE_EN(x)			(((x) >> BIT_SHIFT_PKTBUF_WRITE_EN) & BIT_MASK_PKTBUF_WRITE_EN)
#define BIT_SET_PKTBUF_WRITE_EN(x, v)			(BIT_CLEAR_PKTBUF_WRITE_EN(x) | BIT_PKTBUF_WRITE_EN(v))

#define BIT_TXRPTBUF_DBG				BIT(23)
#define BIT_TXPKTBUF_DBG_V2				BIT(20)
#define BIT_RXPKTBUF_DBG				BIT(16)

#define BIT_SHIFT_PKTBUF_DBG_ADDR			0
#define BIT_MASK_PKTBUF_DBG_ADDR			0x1fff
#define BIT_PKTBUF_DBG_ADDR(x)				(((x) & BIT_MASK_PKTBUF_DBG_ADDR) << BIT_SHIFT_PKTBUF_DBG_ADDR)
#define BITS_PKTBUF_DBG_ADDR				(BIT_MASK_PKTBUF_DBG_ADDR << BIT_SHIFT_PKTBUF_DBG_ADDR)
#define BIT_CLEAR_PKTBUF_DBG_ADDR(x)			((x) & (~BITS_PKTBUF_DBG_ADDR))
#define BIT_GET_PKTBUF_DBG_ADDR(x)			(((x) >> BIT_SHIFT_PKTBUF_DBG_ADDR) & BIT_MASK_PKTBUF_DBG_ADDR)
#define BIT_SET_PKTBUF_DBG_ADDR(x, v)			(BIT_CLEAR_PKTBUF_DBG_ADDR(x) | BIT_PKTBUF_DBG_ADDR(v))

/* 2 REG_PKTBUF_DBG_DATA_L			(Offset 0x0144) */

#define BIT_SHIFT_PKTBUF_DBG_DATA_L			0
#define BIT_MASK_PKTBUF_DBG_DATA_L			0xffffffffL
#define BIT_PKTBUF_DBG_DATA_L(x)			(((x) & BIT_MASK_PKTBUF_DBG_DATA_L) << BIT_SHIFT_PKTBUF_DBG_DATA_L)
#define BITS_PKTBUF_DBG_DATA_L				(BIT_MASK_PKTBUF_DBG_DATA_L << BIT_SHIFT_PKTBUF_DBG_DATA_L)
#define BIT_CLEAR_PKTBUF_DBG_DATA_L(x)			((x) & (~BITS_PKTBUF_DBG_DATA_L))
#define BIT_GET_PKTBUF_DBG_DATA_L(x)			(((x) >> BIT_SHIFT_PKTBUF_DBG_DATA_L) & BIT_MASK_PKTBUF_DBG_DATA_L)
#define BIT_SET_PKTBUF_DBG_DATA_L(x, v)		(BIT_CLEAR_PKTBUF_DBG_DATA_L(x) | BIT_PKTBUF_DBG_DATA_L(v))

/* 2 REG_PKTBUF_DBG_DATA_H			(Offset 0x0148) */

#define BIT_SHIFT_PKTBUF_DBG_DATA_H			0
#define BIT_MASK_PKTBUF_DBG_DATA_H			0xffffffffL
#define BIT_PKTBUF_DBG_DATA_H(x)			(((x) & BIT_MASK_PKTBUF_DBG_DATA_H) << BIT_SHIFT_PKTBUF_DBG_DATA_H)
#define BITS_PKTBUF_DBG_DATA_H				(BIT_MASK_PKTBUF_DBG_DATA_H << BIT_SHIFT_PKTBUF_DBG_DATA_H)
#define BIT_CLEAR_PKTBUF_DBG_DATA_H(x)			((x) & (~BITS_PKTBUF_DBG_DATA_H))
#define BIT_GET_PKTBUF_DBG_DATA_H(x)			(((x) >> BIT_SHIFT_PKTBUF_DBG_DATA_H) & BIT_MASK_PKTBUF_DBG_DATA_H)
#define BIT_SET_PKTBUF_DBG_DATA_H(x, v)		(BIT_CLEAR_PKTBUF_DBG_DATA_H(x) | BIT_PKTBUF_DBG_DATA_H(v))

/* 2 REG_CPWM2				(Offset 0x014C) */

#define BIT_SHIFT_L0S_TO_RCVY_NUM			16
#define BIT_MASK_L0S_TO_RCVY_NUM			0xff
#define BIT_L0S_TO_RCVY_NUM(x)				(((x) & BIT_MASK_L0S_TO_RCVY_NUM) << BIT_SHIFT_L0S_TO_RCVY_NUM)
#define BITS_L0S_TO_RCVY_NUM				(BIT_MASK_L0S_TO_RCVY_NUM << BIT_SHIFT_L0S_TO_RCVY_NUM)
#define BIT_CLEAR_L0S_TO_RCVY_NUM(x)			((x) & (~BITS_L0S_TO_RCVY_NUM))
#define BIT_GET_L0S_TO_RCVY_NUM(x)			(((x) >> BIT_SHIFT_L0S_TO_RCVY_NUM) & BIT_MASK_L0S_TO_RCVY_NUM)
#define BIT_SET_L0S_TO_RCVY_NUM(x, v)			(BIT_CLEAR_L0S_TO_RCVY_NUM(x) | BIT_L0S_TO_RCVY_NUM(v))

#define BIT_CPWM2_TOGGLING				BIT(15)

#define BIT_SHIFT_CPWM2_MOD				0
#define BIT_MASK_CPWM2_MOD				0x7fff
#define BIT_CPWM2_MOD(x)				(((x) & BIT_MASK_CPWM2_MOD) << BIT_SHIFT_CPWM2_MOD)
#define BITS_CPWM2_MOD					(BIT_MASK_CPWM2_MOD << BIT_SHIFT_CPWM2_MOD)
#define BIT_CLEAR_CPWM2_MOD(x)				((x) & (~BITS_CPWM2_MOD))
#define BIT_GET_CPWM2_MOD(x)				(((x) >> BIT_SHIFT_CPWM2_MOD) & BIT_MASK_CPWM2_MOD)
#define BIT_SET_CPWM2_MOD(x, v)			(BIT_CLEAR_CPWM2_MOD(x) | BIT_CPWM2_MOD(v))

/* 2 REG_LPS_SORT_EN				(Offset 0x0150) */

#define BIT_MAC_SORT_EN				BIT(0)

/* 2 REG_TM_BKP_RES_CTRL			(Offset 0x0154) */

#define BIT_SHIFT_SORTING_ROLE				8
#define BIT_MASK_SORTING_ROLE				0x3f
#define BIT_SORTING_ROLE(x)				(((x) & BIT_MASK_SORTING_ROLE) << BIT_SHIFT_SORTING_ROLE)
#define BITS_SORTING_ROLE				(BIT_MASK_SORTING_ROLE << BIT_SHIFT_SORTING_ROLE)
#define BIT_CLEAR_SORTING_ROLE(x)			((x) & (~BITS_SORTING_ROLE))
#define BIT_GET_SORTING_ROLE(x)			(((x) >> BIT_SHIFT_SORTING_ROLE) & BIT_MASK_SORTING_ROLE)
#define BIT_SET_SORTING_ROLE(x, v)			(BIT_CLEAR_SORTING_ROLE(x) | BIT_SORTING_ROLE(v))

#define BIT_TM_WAKE_IND				BIT(7)
#define BIT_TM_BKP_EN_STS				BIT(6)
#define BIT_TM_RES_EN_SCH				BIT(4)
#define BIT_PRE_CHK_DONE				BIT(3)
#define BIT_PRE_CHK_VALID				BIT(2)
#define BIT_TM_RES_EN					BIT(1)
#define BIT_TM_BKP_EN_TRIGGER				BIT(0)

/* 2 REG_PRE_CHK_CTRL0			(Offset 0x0158) */

#define BIT_SHIFT_PRE_CHK_THD				16
#define BIT_MASK_PRE_CHK_THD				0xffff
#define BIT_PRE_CHK_THD(x)				(((x) & BIT_MASK_PRE_CHK_THD) << BIT_SHIFT_PRE_CHK_THD)
#define BITS_PRE_CHK_THD				(BIT_MASK_PRE_CHK_THD << BIT_SHIFT_PRE_CHK_THD)
#define BIT_CLEAR_PRE_CHK_THD(x)			((x) & (~BITS_PRE_CHK_THD))
#define BIT_GET_PRE_CHK_THD(x)				(((x) >> BIT_SHIFT_PRE_CHK_THD) & BIT_MASK_PRE_CHK_THD)
#define BIT_SET_PRE_CHK_THD(x, v)			(BIT_CLEAR_PRE_CHK_THD(x) | BIT_PRE_CHK_THD(v))

#define BIT_SHIFT_PRE_WAKE_TIME			0
#define BIT_MASK_PRE_WAKE_TIME				0xffff
#define BIT_PRE_WAKE_TIME(x)				(((x) & BIT_MASK_PRE_WAKE_TIME) << BIT_SHIFT_PRE_WAKE_TIME)
#define BITS_PRE_WAKE_TIME				(BIT_MASK_PRE_WAKE_TIME << BIT_SHIFT_PRE_WAKE_TIME)
#define BIT_CLEAR_PRE_WAKE_TIME(x)			((x) & (~BITS_PRE_WAKE_TIME))
#define BIT_GET_PRE_WAKE_TIME(x)			(((x) >> BIT_SHIFT_PRE_WAKE_TIME) & BIT_MASK_PRE_WAKE_TIME)
#define BIT_SET_PRE_WAKE_TIME(x, v)			(BIT_CLEAR_PRE_WAKE_TIME(x) | BIT_PRE_WAKE_TIME(v))

/* 2 REG_LPS_WTM_SC				(Offset 0x015C) */

#define BIT_SHIFT_LPS_WTM_SC				0
#define BIT_MASK_LPS_WTM_SC				0xffffffffL
#define BIT_LPS_WTM_SC(x)				(((x) & BIT_MASK_LPS_WTM_SC) << BIT_SHIFT_LPS_WTM_SC)
#define BITS_LPS_WTM_SC				(BIT_MASK_LPS_WTM_SC << BIT_SHIFT_LPS_WTM_SC)
#define BIT_CLEAR_LPS_WTM_SC(x)			((x) & (~BITS_LPS_WTM_SC))
#define BIT_GET_LPS_WTM_SC(x)				(((x) >> BIT_SHIFT_LPS_WTM_SC) & BIT_MASK_LPS_WTM_SC)
#define BIT_SET_LPS_WTM_SC(x, v)			(BIT_CLEAR_LPS_WTM_SC(x) | BIT_LPS_WTM_SC(v))

/* 2 REG_LPS_WTM_CNT				(Offset 0x0160) */

#define BIT_SHIFT_LPS_WTM_CNT				0
#define BIT_MASK_LPS_WTM_CNT				0xffffffffL
#define BIT_LPS_WTM_CNT(x)				(((x) & BIT_MASK_LPS_WTM_CNT) << BIT_SHIFT_LPS_WTM_CNT)
#define BITS_LPS_WTM_CNT				(BIT_MASK_LPS_WTM_CNT << BIT_SHIFT_LPS_WTM_CNT)
#define BIT_CLEAR_LPS_WTM_CNT(x)			((x) & (~BITS_LPS_WTM_CNT))
#define BIT_GET_LPS_WTM_CNT(x)				(((x) >> BIT_SHIFT_LPS_WTM_CNT) & BIT_MASK_LPS_WTM_CNT)
#define BIT_SET_LPS_WTM_CNT(x, v)			(BIT_CLEAR_LPS_WTM_CNT(x) | BIT_LPS_WTM_CNT(v))

/* 2 REG_32K_CLK_SEL				(Offset 0x0164) */

#define BIT_32K_SRC_SEL				BIT(8)

#define BIT_SHIFT_US_TIME_VALUE			0
#define BIT_MASK_US_TIME_VALUE				0xff
#define BIT_US_TIME_VALUE(x)				(((x) & BIT_MASK_US_TIME_VALUE) << BIT_SHIFT_US_TIME_VALUE)
#define BITS_US_TIME_VALUE				(BIT_MASK_US_TIME_VALUE << BIT_SHIFT_US_TIME_VALUE)
#define BIT_CLEAR_US_TIME_VALUE(x)			((x) & (~BITS_US_TIME_VALUE))
#define BIT_GET_US_TIME_VALUE(x)			(((x) >> BIT_SHIFT_US_TIME_VALUE) & BIT_MASK_US_TIME_VALUE)
#define BIT_SET_US_TIME_VALUE(x, v)			(BIT_CLEAR_US_TIME_VALUE(x) | BIT_US_TIME_VALUE(v))

/* 2 REG_MBIST_DRF_FAIL			(Offset 0x0170) */

#define BIT_SHIFT_8051_MBIST_DRF_FAIL			26
#define BIT_MASK_8051_MBIST_DRF_FAIL			0x3f
#define BIT_8051_MBIST_DRF_FAIL(x)			(((x) & BIT_MASK_8051_MBIST_DRF_FAIL) << BIT_SHIFT_8051_MBIST_DRF_FAIL)
#define BITS_8051_MBIST_DRF_FAIL			(BIT_MASK_8051_MBIST_DRF_FAIL << BIT_SHIFT_8051_MBIST_DRF_FAIL)
#define BIT_CLEAR_8051_MBIST_DRF_FAIL(x)		((x) & (~BITS_8051_MBIST_DRF_FAIL))
#define BIT_GET_8051_MBIST_DRF_FAIL(x)			(((x) >> BIT_SHIFT_8051_MBIST_DRF_FAIL) & BIT_MASK_8051_MBIST_DRF_FAIL)
#define BIT_SET_8051_MBIST_DRF_FAIL(x, v)		(BIT_CLEAR_8051_MBIST_DRF_FAIL(x) | BIT_8051_MBIST_DRF_FAIL(v))

#define BIT_SHIFT_USB_MBIST_DRF_FAIL			24
#define BIT_MASK_USB_MBIST_DRF_FAIL			0x3
#define BIT_USB_MBIST_DRF_FAIL(x)			(((x) & BIT_MASK_USB_MBIST_DRF_FAIL) << BIT_SHIFT_USB_MBIST_DRF_FAIL)
#define BITS_USB_MBIST_DRF_FAIL			(BIT_MASK_USB_MBIST_DRF_FAIL << BIT_SHIFT_USB_MBIST_DRF_FAIL)
#define BIT_CLEAR_USB_MBIST_DRF_FAIL(x)		((x) & (~BITS_USB_MBIST_DRF_FAIL))
#define BIT_GET_USB_MBIST_DRF_FAIL(x)			(((x) >> BIT_SHIFT_USB_MBIST_DRF_FAIL) & BIT_MASK_USB_MBIST_DRF_FAIL)
#define BIT_SET_USB_MBIST_DRF_FAIL(x, v)		(BIT_CLEAR_USB_MBIST_DRF_FAIL(x) | BIT_USB_MBIST_DRF_FAIL(v))

#define BIT_SHIFT_PCIE_MBIST_DRF_FAIL			18
#define BIT_MASK_PCIE_MBIST_DRF_FAIL			0x3f
#define BIT_PCIE_MBIST_DRF_FAIL(x)			(((x) & BIT_MASK_PCIE_MBIST_DRF_FAIL) << BIT_SHIFT_PCIE_MBIST_DRF_FAIL)
#define BITS_PCIE_MBIST_DRF_FAIL			(BIT_MASK_PCIE_MBIST_DRF_FAIL << BIT_SHIFT_PCIE_MBIST_DRF_FAIL)
#define BIT_CLEAR_PCIE_MBIST_DRF_FAIL(x)		((x) & (~BITS_PCIE_MBIST_DRF_FAIL))
#define BIT_GET_PCIE_MBIST_DRF_FAIL(x)			(((x) >> BIT_SHIFT_PCIE_MBIST_DRF_FAIL) & BIT_MASK_PCIE_MBIST_DRF_FAIL)
#define BIT_SET_PCIE_MBIST_DRF_FAIL(x, v)		(BIT_CLEAR_PCIE_MBIST_DRF_FAIL(x) | BIT_PCIE_MBIST_DRF_FAIL(v))

#define BIT_SHIFT_MAC_MBIST_DRF_FAIL			0
#define BIT_MASK_MAC_MBIST_DRF_FAIL			0x3ffff
#define BIT_MAC_MBIST_DRF_FAIL(x)			(((x) & BIT_MASK_MAC_MBIST_DRF_FAIL) << BIT_SHIFT_MAC_MBIST_DRF_FAIL)
#define BITS_MAC_MBIST_DRF_FAIL			(BIT_MASK_MAC_MBIST_DRF_FAIL << BIT_SHIFT_MAC_MBIST_DRF_FAIL)
#define BIT_CLEAR_MAC_MBIST_DRF_FAIL(x)		((x) & (~BITS_MAC_MBIST_DRF_FAIL))
#define BIT_GET_MAC_MBIST_DRF_FAIL(x)			(((x) >> BIT_SHIFT_MAC_MBIST_DRF_FAIL) & BIT_MASK_MAC_MBIST_DRF_FAIL)
#define BIT_SET_MAC_MBIST_DRF_FAIL(x, v)		(BIT_CLEAR_MAC_MBIST_DRF_FAIL(x) | BIT_MAC_MBIST_DRF_FAIL(v))

/* 2 REG_MBIST_START_PAUSE			(Offset 0x0174) */

#define BIT_SHIFT_8051_MBIST_START_PAUSE_V1		26
#define BIT_MASK_8051_MBIST_START_PAUSE_V1		0x3f
#define BIT_8051_MBIST_START_PAUSE_V1(x)		(((x) & BIT_MASK_8051_MBIST_START_PAUSE_V1) << BIT_SHIFT_8051_MBIST_START_PAUSE_V1)
#define BITS_8051_MBIST_START_PAUSE_V1			(BIT_MASK_8051_MBIST_START_PAUSE_V1 << BIT_SHIFT_8051_MBIST_START_PAUSE_V1)
#define BIT_CLEAR_8051_MBIST_START_PAUSE_V1(x)	((x) & (~BITS_8051_MBIST_START_PAUSE_V1))
#define BIT_GET_8051_MBIST_START_PAUSE_V1(x)		(((x) >> BIT_SHIFT_8051_MBIST_START_PAUSE_V1) & BIT_MASK_8051_MBIST_START_PAUSE_V1)
#define BIT_SET_8051_MBIST_START_PAUSE_V1(x, v)	(BIT_CLEAR_8051_MBIST_START_PAUSE_V1(x) | BIT_8051_MBIST_START_PAUSE_V1(v))

#define BIT_SHIFT_USB_MBIST_START_PAUSE_V1		24
#define BIT_MASK_USB_MBIST_START_PAUSE_V1		0x3
#define BIT_USB_MBIST_START_PAUSE_V1(x)		(((x) & BIT_MASK_USB_MBIST_START_PAUSE_V1) << BIT_SHIFT_USB_MBIST_START_PAUSE_V1)
#define BITS_USB_MBIST_START_PAUSE_V1			(BIT_MASK_USB_MBIST_START_PAUSE_V1 << BIT_SHIFT_USB_MBIST_START_PAUSE_V1)
#define BIT_CLEAR_USB_MBIST_START_PAUSE_V1(x)		((x) & (~BITS_USB_MBIST_START_PAUSE_V1))
#define BIT_GET_USB_MBIST_START_PAUSE_V1(x)		(((x) >> BIT_SHIFT_USB_MBIST_START_PAUSE_V1) & BIT_MASK_USB_MBIST_START_PAUSE_V1)
#define BIT_SET_USB_MBIST_START_PAUSE_V1(x, v)	(BIT_CLEAR_USB_MBIST_START_PAUSE_V1(x) | BIT_USB_MBIST_START_PAUSE_V1(v))

#define BIT_SHIFT_PCIE_MBIST_START_PAUSE_V1		18
#define BIT_MASK_PCIE_MBIST_START_PAUSE_V1		0x3f
#define BIT_PCIE_MBIST_START_PAUSE_V1(x)		(((x) & BIT_MASK_PCIE_MBIST_START_PAUSE_V1) << BIT_SHIFT_PCIE_MBIST_START_PAUSE_V1)
#define BITS_PCIE_MBIST_START_PAUSE_V1			(BIT_MASK_PCIE_MBIST_START_PAUSE_V1 << BIT_SHIFT_PCIE_MBIST_START_PAUSE_V1)
#define BIT_CLEAR_PCIE_MBIST_START_PAUSE_V1(x)	((x) & (~BITS_PCIE_MBIST_START_PAUSE_V1))
#define BIT_GET_PCIE_MBIST_START_PAUSE_V1(x)		(((x) >> BIT_SHIFT_PCIE_MBIST_START_PAUSE_V1) & BIT_MASK_PCIE_MBIST_START_PAUSE_V1)
#define BIT_SET_PCIE_MBIST_START_PAUSE_V1(x, v)	(BIT_CLEAR_PCIE_MBIST_START_PAUSE_V1(x) | BIT_PCIE_MBIST_START_PAUSE_V1(v))

#define BIT_SHIFT_MAC_MBIST_START_PAUSE_V1		0
#define BIT_MASK_MAC_MBIST_START_PAUSE_V1		0x3ffff
#define BIT_MAC_MBIST_START_PAUSE_V1(x)		(((x) & BIT_MASK_MAC_MBIST_START_PAUSE_V1) << BIT_SHIFT_MAC_MBIST_START_PAUSE_V1)
#define BITS_MAC_MBIST_START_PAUSE_V1			(BIT_MASK_MAC_MBIST_START_PAUSE_V1 << BIT_SHIFT_MAC_MBIST_START_PAUSE_V1)
#define BIT_CLEAR_MAC_MBIST_START_PAUSE_V1(x)		((x) & (~BITS_MAC_MBIST_START_PAUSE_V1))
#define BIT_GET_MAC_MBIST_START_PAUSE_V1(x)		(((x) >> BIT_SHIFT_MAC_MBIST_START_PAUSE_V1) & BIT_MASK_MAC_MBIST_START_PAUSE_V1)
#define BIT_SET_MAC_MBIST_START_PAUSE_V1(x, v)	(BIT_CLEAR_MAC_MBIST_START_PAUSE_V1(x) | BIT_MAC_MBIST_START_PAUSE_V1(v))

/* 2 REG_MBIST_DONE				(Offset 0x0178) */

#define BIT_SHIFT_8051_MBIST_DONE_V1			26
#define BIT_MASK_8051_MBIST_DONE_V1			0x3f
#define BIT_8051_MBIST_DONE_V1(x)			(((x) & BIT_MASK_8051_MBIST_DONE_V1) << BIT_SHIFT_8051_MBIST_DONE_V1)
#define BITS_8051_MBIST_DONE_V1			(BIT_MASK_8051_MBIST_DONE_V1 << BIT_SHIFT_8051_MBIST_DONE_V1)
#define BIT_CLEAR_8051_MBIST_DONE_V1(x)		((x) & (~BITS_8051_MBIST_DONE_V1))
#define BIT_GET_8051_MBIST_DONE_V1(x)			(((x) >> BIT_SHIFT_8051_MBIST_DONE_V1) & BIT_MASK_8051_MBIST_DONE_V1)
#define BIT_SET_8051_MBIST_DONE_V1(x, v)		(BIT_CLEAR_8051_MBIST_DONE_V1(x) | BIT_8051_MBIST_DONE_V1(v))

#define BIT_SHIFT_USB_MBIST_DONE_V1			24
#define BIT_MASK_USB_MBIST_DONE_V1			0x3
#define BIT_USB_MBIST_DONE_V1(x)			(((x) & BIT_MASK_USB_MBIST_DONE_V1) << BIT_SHIFT_USB_MBIST_DONE_V1)
#define BITS_USB_MBIST_DONE_V1				(BIT_MASK_USB_MBIST_DONE_V1 << BIT_SHIFT_USB_MBIST_DONE_V1)
#define BIT_CLEAR_USB_MBIST_DONE_V1(x)			((x) & (~BITS_USB_MBIST_DONE_V1))
#define BIT_GET_USB_MBIST_DONE_V1(x)			(((x) >> BIT_SHIFT_USB_MBIST_DONE_V1) & BIT_MASK_USB_MBIST_DONE_V1)
#define BIT_SET_USB_MBIST_DONE_V1(x, v)		(BIT_CLEAR_USB_MBIST_DONE_V1(x) | BIT_USB_MBIST_DONE_V1(v))

#define BIT_SHIFT_PCIE_MBIST_DONE_V1			18
#define BIT_MASK_PCIE_MBIST_DONE_V1			0x3f
#define BIT_PCIE_MBIST_DONE_V1(x)			(((x) & BIT_MASK_PCIE_MBIST_DONE_V1) << BIT_SHIFT_PCIE_MBIST_DONE_V1)
#define BITS_PCIE_MBIST_DONE_V1			(BIT_MASK_PCIE_MBIST_DONE_V1 << BIT_SHIFT_PCIE_MBIST_DONE_V1)
#define BIT_CLEAR_PCIE_MBIST_DONE_V1(x)		((x) & (~BITS_PCIE_MBIST_DONE_V1))
#define BIT_GET_PCIE_MBIST_DONE_V1(x)			(((x) >> BIT_SHIFT_PCIE_MBIST_DONE_V1) & BIT_MASK_PCIE_MBIST_DONE_V1)
#define BIT_SET_PCIE_MBIST_DONE_V1(x, v)		(BIT_CLEAR_PCIE_MBIST_DONE_V1(x) | BIT_PCIE_MBIST_DONE_V1(v))

#define BIT_SHIFT_MAC_MBIST_DONE_V1			0
#define BIT_MASK_MAC_MBIST_DONE_V1			0x3ffff
#define BIT_MAC_MBIST_DONE_V1(x)			(((x) & BIT_MASK_MAC_MBIST_DONE_V1) << BIT_SHIFT_MAC_MBIST_DONE_V1)
#define BITS_MAC_MBIST_DONE_V1				(BIT_MASK_MAC_MBIST_DONE_V1 << BIT_SHIFT_MAC_MBIST_DONE_V1)
#define BIT_CLEAR_MAC_MBIST_DONE_V1(x)			((x) & (~BITS_MAC_MBIST_DONE_V1))
#define BIT_GET_MAC_MBIST_DONE_V1(x)			(((x) >> BIT_SHIFT_MAC_MBIST_DONE_V1) & BIT_MASK_MAC_MBIST_DONE_V1)
#define BIT_SET_MAC_MBIST_DONE_V1(x, v)		(BIT_CLEAR_MAC_MBIST_DONE_V1(x) | BIT_MAC_MBIST_DONE_V1(v))

/* 2 REG_MBIST_READ_BIST_RPT			(Offset 0x017C) */

#define BIT_SHIFT_MBIST_READ_BIST_RPT			0
#define BIT_MASK_MBIST_READ_BIST_RPT			0xffffffffL
#define BIT_MBIST_READ_BIST_RPT(x)			(((x) & BIT_MASK_MBIST_READ_BIST_RPT) << BIT_SHIFT_MBIST_READ_BIST_RPT)
#define BITS_MBIST_READ_BIST_RPT			(BIT_MASK_MBIST_READ_BIST_RPT << BIT_SHIFT_MBIST_READ_BIST_RPT)
#define BIT_CLEAR_MBIST_READ_BIST_RPT(x)		((x) & (~BITS_MBIST_READ_BIST_RPT))
#define BIT_GET_MBIST_READ_BIST_RPT(x)			(((x) >> BIT_SHIFT_MBIST_READ_BIST_RPT) & BIT_MASK_MBIST_READ_BIST_RPT)
#define BIT_SET_MBIST_READ_BIST_RPT(x, v)		(BIT_CLEAR_MBIST_READ_BIST_RPT(x) | BIT_MBIST_READ_BIST_RPT(v))

/* 2 REG_AES_DECRPT_DATA			(Offset 0x0180) */

#define BIT_SHIFT_IPS_CFG_ADDR				0
#define BIT_MASK_IPS_CFG_ADDR				0xff
#define BIT_IPS_CFG_ADDR(x)				(((x) & BIT_MASK_IPS_CFG_ADDR) << BIT_SHIFT_IPS_CFG_ADDR)
#define BITS_IPS_CFG_ADDR				(BIT_MASK_IPS_CFG_ADDR << BIT_SHIFT_IPS_CFG_ADDR)
#define BIT_CLEAR_IPS_CFG_ADDR(x)			((x) & (~BITS_IPS_CFG_ADDR))
#define BIT_GET_IPS_CFG_ADDR(x)			(((x) >> BIT_SHIFT_IPS_CFG_ADDR) & BIT_MASK_IPS_CFG_ADDR)
#define BIT_SET_IPS_CFG_ADDR(x, v)			(BIT_CLEAR_IPS_CFG_ADDR(x) | BIT_IPS_CFG_ADDR(v))

/* 2 REG_AES_DECRPT_CFG			(Offset 0x0184) */

#define BIT_SHIFT_IPS_CFG_DATA				0
#define BIT_MASK_IPS_CFG_DATA				0xffffffffL
#define BIT_IPS_CFG_DATA(x)				(((x) & BIT_MASK_IPS_CFG_DATA) << BIT_SHIFT_IPS_CFG_DATA)
#define BITS_IPS_CFG_DATA				(BIT_MASK_IPS_CFG_DATA << BIT_SHIFT_IPS_CFG_DATA)
#define BIT_CLEAR_IPS_CFG_DATA(x)			((x) & (~BITS_IPS_CFG_DATA))
#define BIT_GET_IPS_CFG_DATA(x)			(((x) >> BIT_SHIFT_IPS_CFG_DATA) & BIT_MASK_IPS_CFG_DATA)
#define BIT_SET_IPS_CFG_DATA(x, v)			(BIT_CLEAR_IPS_CFG_DATA(x) | BIT_IPS_CFG_DATA(v))

/* 2 REG_HIOE_CTRL				(Offset 0x0188) */

#define BIT_HIOE_CFG_FILE_LOC_SEL			BIT(31)
#define BIT_HIOE_WRITE_REQ				BIT(30)
#define BIT_HIOE_READ_REQ				BIT(29)
#define BIT_INST_FORMAT_ERR				BIT(25)
#define BIT_OP_TIMEOUT_ERR				BIT(24)

#define BIT_SHIFT_HIOE_OP_TIMEOUT			16
#define BIT_MASK_HIOE_OP_TIMEOUT			0xff
#define BIT_HIOE_OP_TIMEOUT(x)				(((x) & BIT_MASK_HIOE_OP_TIMEOUT) << BIT_SHIFT_HIOE_OP_TIMEOUT)
#define BITS_HIOE_OP_TIMEOUT				(BIT_MASK_HIOE_OP_TIMEOUT << BIT_SHIFT_HIOE_OP_TIMEOUT)
#define BIT_CLEAR_HIOE_OP_TIMEOUT(x)			((x) & (~BITS_HIOE_OP_TIMEOUT))
#define BIT_GET_HIOE_OP_TIMEOUT(x)			(((x) >> BIT_SHIFT_HIOE_OP_TIMEOUT) & BIT_MASK_HIOE_OP_TIMEOUT)
#define BIT_SET_HIOE_OP_TIMEOUT(x, v)			(BIT_CLEAR_HIOE_OP_TIMEOUT(x) | BIT_HIOE_OP_TIMEOUT(v))

#define BIT_SHIFT_BITDATA_CHECKSUM			0
#define BIT_MASK_BITDATA_CHECKSUM			0xffff
#define BIT_BITDATA_CHECKSUM(x)			(((x) & BIT_MASK_BITDATA_CHECKSUM) << BIT_SHIFT_BITDATA_CHECKSUM)
#define BITS_BITDATA_CHECKSUM				(BIT_MASK_BITDATA_CHECKSUM << BIT_SHIFT_BITDATA_CHECKSUM)
#define BIT_CLEAR_BITDATA_CHECKSUM(x)			((x) & (~BITS_BITDATA_CHECKSUM))
#define BIT_GET_BITDATA_CHECKSUM(x)			(((x) >> BIT_SHIFT_BITDATA_CHECKSUM) & BIT_MASK_BITDATA_CHECKSUM)
#define BIT_SET_BITDATA_CHECKSUM(x, v)			(BIT_CLEAR_BITDATA_CHECKSUM(x) | BIT_BITDATA_CHECKSUM(v))

/* 2 REG_HIOE_CFG_FILE			(Offset 0x018C) */

#define BIT_SHIFT_TXBF_END_ADDR			16
#define BIT_MASK_TXBF_END_ADDR				0xffff
#define BIT_TXBF_END_ADDR(x)				(((x) & BIT_MASK_TXBF_END_ADDR) << BIT_SHIFT_TXBF_END_ADDR)
#define BITS_TXBF_END_ADDR				(BIT_MASK_TXBF_END_ADDR << BIT_SHIFT_TXBF_END_ADDR)
#define BIT_CLEAR_TXBF_END_ADDR(x)			((x) & (~BITS_TXBF_END_ADDR))
#define BIT_GET_TXBF_END_ADDR(x)			(((x) >> BIT_SHIFT_TXBF_END_ADDR) & BIT_MASK_TXBF_END_ADDR)
#define BIT_SET_TXBF_END_ADDR(x, v)			(BIT_CLEAR_TXBF_END_ADDR(x) | BIT_TXBF_END_ADDR(v))

#define BIT_SHIFT_TXBF_STR_ADDR			0
#define BIT_MASK_TXBF_STR_ADDR				0xffff
#define BIT_TXBF_STR_ADDR(x)				(((x) & BIT_MASK_TXBF_STR_ADDR) << BIT_SHIFT_TXBF_STR_ADDR)
#define BITS_TXBF_STR_ADDR				(BIT_MASK_TXBF_STR_ADDR << BIT_SHIFT_TXBF_STR_ADDR)
#define BIT_CLEAR_TXBF_STR_ADDR(x)			((x) & (~BITS_TXBF_STR_ADDR))
#define BIT_GET_TXBF_STR_ADDR(x)			(((x) >> BIT_SHIFT_TXBF_STR_ADDR) & BIT_MASK_TXBF_STR_ADDR)
#define BIT_SET_TXBF_STR_ADDR(x, v)			(BIT_CLEAR_TXBF_STR_ADDR(x) | BIT_TXBF_STR_ADDR(v))

/* 2 REG_TMETER				(Offset 0x0190) */

#define BIT_TEMP_VALID					BIT(31)

#define BIT_SHIFT_TEMP_VALUE				24
#define BIT_MASK_TEMP_VALUE				0x3f
#define BIT_TEMP_VALUE(x)				(((x) & BIT_MASK_TEMP_VALUE) << BIT_SHIFT_TEMP_VALUE)
#define BITS_TEMP_VALUE				(BIT_MASK_TEMP_VALUE << BIT_SHIFT_TEMP_VALUE)
#define BIT_CLEAR_TEMP_VALUE(x)			((x) & (~BITS_TEMP_VALUE))
#define BIT_GET_TEMP_VALUE(x)				(((x) >> BIT_SHIFT_TEMP_VALUE) & BIT_MASK_TEMP_VALUE)
#define BIT_SET_TEMP_VALUE(x, v)			(BIT_CLEAR_TEMP_VALUE(x) | BIT_TEMP_VALUE(v))

#define BIT_SHIFT_REG_TMETER_TIMER			8
#define BIT_MASK_REG_TMETER_TIMER			0xfff
#define BIT_REG_TMETER_TIMER(x)			(((x) & BIT_MASK_REG_TMETER_TIMER) << BIT_SHIFT_REG_TMETER_TIMER)
#define BITS_REG_TMETER_TIMER				(BIT_MASK_REG_TMETER_TIMER << BIT_SHIFT_REG_TMETER_TIMER)
#define BIT_CLEAR_REG_TMETER_TIMER(x)			((x) & (~BITS_REG_TMETER_TIMER))
#define BIT_GET_REG_TMETER_TIMER(x)			(((x) >> BIT_SHIFT_REG_TMETER_TIMER) & BIT_MASK_REG_TMETER_TIMER)
#define BIT_SET_REG_TMETER_TIMER(x, v)			(BIT_CLEAR_REG_TMETER_TIMER(x) | BIT_REG_TMETER_TIMER(v))

#define BIT_SHIFT_REG_TEMP_DELTA			2
#define BIT_MASK_REG_TEMP_DELTA			0x3f
#define BIT_REG_TEMP_DELTA(x)				(((x) & BIT_MASK_REG_TEMP_DELTA) << BIT_SHIFT_REG_TEMP_DELTA)
#define BITS_REG_TEMP_DELTA				(BIT_MASK_REG_TEMP_DELTA << BIT_SHIFT_REG_TEMP_DELTA)
#define BIT_CLEAR_REG_TEMP_DELTA(x)			((x) & (~BITS_REG_TEMP_DELTA))
#define BIT_GET_REG_TEMP_DELTA(x)			(((x) >> BIT_SHIFT_REG_TEMP_DELTA) & BIT_MASK_REG_TEMP_DELTA)
#define BIT_SET_REG_TEMP_DELTA(x, v)			(BIT_CLEAR_REG_TEMP_DELTA(x) | BIT_REG_TEMP_DELTA(v))

#define BIT_REG_TMETER_EN				BIT(0)

/* 2 REG_OSC_32K_CTRL			(Offset 0x0194) */

#define BIT_SHIFT_OSC_32K_CLKGEN_0			16
#define BIT_MASK_OSC_32K_CLKGEN_0			0xffff
#define BIT_OSC_32K_CLKGEN_0(x)			(((x) & BIT_MASK_OSC_32K_CLKGEN_0) << BIT_SHIFT_OSC_32K_CLKGEN_0)
#define BITS_OSC_32K_CLKGEN_0				(BIT_MASK_OSC_32K_CLKGEN_0 << BIT_SHIFT_OSC_32K_CLKGEN_0)
#define BIT_CLEAR_OSC_32K_CLKGEN_0(x)			((x) & (~BITS_OSC_32K_CLKGEN_0))
#define BIT_GET_OSC_32K_CLKGEN_0(x)			(((x) >> BIT_SHIFT_OSC_32K_CLKGEN_0) & BIT_MASK_OSC_32K_CLKGEN_0)
#define BIT_SET_OSC_32K_CLKGEN_0(x, v)			(BIT_CLEAR_OSC_32K_CLKGEN_0(x) | BIT_OSC_32K_CLKGEN_0(v))

#define BIT_SHIFT_OSC_32K_RES_COMP			4
#define BIT_MASK_OSC_32K_RES_COMP			0x3
#define BIT_OSC_32K_RES_COMP(x)			(((x) & BIT_MASK_OSC_32K_RES_COMP) << BIT_SHIFT_OSC_32K_RES_COMP)
#define BITS_OSC_32K_RES_COMP				(BIT_MASK_OSC_32K_RES_COMP << BIT_SHIFT_OSC_32K_RES_COMP)
#define BIT_CLEAR_OSC_32K_RES_COMP(x)			((x) & (~BITS_OSC_32K_RES_COMP))
#define BIT_GET_OSC_32K_RES_COMP(x)			(((x) >> BIT_SHIFT_OSC_32K_RES_COMP) & BIT_MASK_OSC_32K_RES_COMP)
#define BIT_SET_OSC_32K_RES_COMP(x, v)			(BIT_CLEAR_OSC_32K_RES_COMP(x) | BIT_OSC_32K_RES_COMP(v))

#define BIT_OSC_32K_OUT_SEL				BIT(3)
#define BIT_ISO_WL_2_OSC_32K				BIT(1)
#define BIT_POW_CKGEN					BIT(0)

/* 2 REG_32K_CAL_REG1			(Offset 0x0198) */

#define BIT_CAL_32K_REG_WR				BIT(31)
#define BIT_CAL_32K_DBG_SEL				BIT(22)

#define BIT_SHIFT_CAL_32K_REG_ADDR			16
#define BIT_MASK_CAL_32K_REG_ADDR			0x3f
#define BIT_CAL_32K_REG_ADDR(x)			(((x) & BIT_MASK_CAL_32K_REG_ADDR) << BIT_SHIFT_CAL_32K_REG_ADDR)
#define BITS_CAL_32K_REG_ADDR				(BIT_MASK_CAL_32K_REG_ADDR << BIT_SHIFT_CAL_32K_REG_ADDR)
#define BIT_CLEAR_CAL_32K_REG_ADDR(x)			((x) & (~BITS_CAL_32K_REG_ADDR))
#define BIT_GET_CAL_32K_REG_ADDR(x)			(((x) >> BIT_SHIFT_CAL_32K_REG_ADDR) & BIT_MASK_CAL_32K_REG_ADDR)
#define BIT_SET_CAL_32K_REG_ADDR(x, v)			(BIT_CLEAR_CAL_32K_REG_ADDR(x) | BIT_CAL_32K_REG_ADDR(v))

#define BIT_SHIFT_CAL_32K_REG_DATA			0
#define BIT_MASK_CAL_32K_REG_DATA			0xffff
#define BIT_CAL_32K_REG_DATA(x)			(((x) & BIT_MASK_CAL_32K_REG_DATA) << BIT_SHIFT_CAL_32K_REG_DATA)
#define BITS_CAL_32K_REG_DATA				(BIT_MASK_CAL_32K_REG_DATA << BIT_SHIFT_CAL_32K_REG_DATA)
#define BIT_CLEAR_CAL_32K_REG_DATA(x)			((x) & (~BITS_CAL_32K_REG_DATA))
#define BIT_GET_CAL_32K_REG_DATA(x)			(((x) >> BIT_SHIFT_CAL_32K_REG_DATA) & BIT_MASK_CAL_32K_REG_DATA)
#define BIT_SET_CAL_32K_REG_DATA(x, v)			(BIT_CLEAR_CAL_32K_REG_DATA(x) | BIT_CAL_32K_REG_DATA(v))

/* 2 REG_C2HEVT				(Offset 0x01A0) */

#define BIT_SHIFT_C2HEVT_MSG_V1			0
#define BIT_MASK_C2HEVT_MSG_V1				0xffffffffL
#define BIT_C2HEVT_MSG_V1(x)				(((x) & BIT_MASK_C2HEVT_MSG_V1) << BIT_SHIFT_C2HEVT_MSG_V1)
#define BITS_C2HEVT_MSG_V1				(BIT_MASK_C2HEVT_MSG_V1 << BIT_SHIFT_C2HEVT_MSG_V1)
#define BIT_CLEAR_C2HEVT_MSG_V1(x)			((x) & (~BITS_C2HEVT_MSG_V1))
#define BIT_GET_C2HEVT_MSG_V1(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_V1) & BIT_MASK_C2HEVT_MSG_V1)
#define BIT_SET_C2HEVT_MSG_V1(x, v)			(BIT_CLEAR_C2HEVT_MSG_V1(x) | BIT_C2HEVT_MSG_V1(v))

/* 2 REG_C2HEVT_1				(Offset 0x01A4) */

#define BIT_SHIFT_C2HEVT_MSG_1				0
#define BIT_MASK_C2HEVT_MSG_1				0xffffffffL
#define BIT_C2HEVT_MSG_1(x)				(((x) & BIT_MASK_C2HEVT_MSG_1) << BIT_SHIFT_C2HEVT_MSG_1)
#define BITS_C2HEVT_MSG_1				(BIT_MASK_C2HEVT_MSG_1 << BIT_SHIFT_C2HEVT_MSG_1)
#define BIT_CLEAR_C2HEVT_MSG_1(x)			((x) & (~BITS_C2HEVT_MSG_1))
#define BIT_GET_C2HEVT_MSG_1(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_1) & BIT_MASK_C2HEVT_MSG_1)
#define BIT_SET_C2HEVT_MSG_1(x, v)			(BIT_CLEAR_C2HEVT_MSG_1(x) | BIT_C2HEVT_MSG_1(v))

/* 2 REG_C2HEVT_2				(Offset 0x01A8) */

#define BIT_SHIFT_C2HEVT_MSG_2				0
#define BIT_MASK_C2HEVT_MSG_2				0xffffffffL
#define BIT_C2HEVT_MSG_2(x)				(((x) & BIT_MASK_C2HEVT_MSG_2) << BIT_SHIFT_C2HEVT_MSG_2)
#define BITS_C2HEVT_MSG_2				(BIT_MASK_C2HEVT_MSG_2 << BIT_SHIFT_C2HEVT_MSG_2)
#define BIT_CLEAR_C2HEVT_MSG_2(x)			((x) & (~BITS_C2HEVT_MSG_2))
#define BIT_GET_C2HEVT_MSG_2(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_2) & BIT_MASK_C2HEVT_MSG_2)
#define BIT_SET_C2HEVT_MSG_2(x, v)			(BIT_CLEAR_C2HEVT_MSG_2(x) | BIT_C2HEVT_MSG_2(v))

/* 2 REG_C2HEVT_3				(Offset 0x01AC) */

#define BIT_SHIFT_C2HEVT_MSG_3				0
#define BIT_MASK_C2HEVT_MSG_3				0xffffffffL
#define BIT_C2HEVT_MSG_3(x)				(((x) & BIT_MASK_C2HEVT_MSG_3) << BIT_SHIFT_C2HEVT_MSG_3)
#define BITS_C2HEVT_MSG_3				(BIT_MASK_C2HEVT_MSG_3 << BIT_SHIFT_C2HEVT_MSG_3)
#define BIT_CLEAR_C2HEVT_MSG_3(x)			((x) & (~BITS_C2HEVT_MSG_3))
#define BIT_GET_C2HEVT_MSG_3(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_3) & BIT_MASK_C2HEVT_MSG_3)
#define BIT_SET_C2HEVT_MSG_3(x, v)			(BIT_CLEAR_C2HEVT_MSG_3(x) | BIT_C2HEVT_MSG_3(v))

/* 2 REG_SW_DEFINED_PAGE1			(Offset 0x01B8) */

#define BIT_SHIFT_SW_DEFINED_PAGE1_V1			0
#define BIT_MASK_SW_DEFINED_PAGE1_V1			0xffffffffL
#define BIT_SW_DEFINED_PAGE1_V1(x)			(((x) & BIT_MASK_SW_DEFINED_PAGE1_V1) << BIT_SHIFT_SW_DEFINED_PAGE1_V1)
#define BITS_SW_DEFINED_PAGE1_V1			(BIT_MASK_SW_DEFINED_PAGE1_V1 << BIT_SHIFT_SW_DEFINED_PAGE1_V1)
#define BIT_CLEAR_SW_DEFINED_PAGE1_V1(x)		((x) & (~BITS_SW_DEFINED_PAGE1_V1))
#define BIT_GET_SW_DEFINED_PAGE1_V1(x)			(((x) >> BIT_SHIFT_SW_DEFINED_PAGE1_V1) & BIT_MASK_SW_DEFINED_PAGE1_V1)
#define BIT_SET_SW_DEFINED_PAGE1_V1(x, v)		(BIT_CLEAR_SW_DEFINED_PAGE1_V1(x) | BIT_SW_DEFINED_PAGE1_V1(v))

/* 2 REG_SW_DEFINED_PAGE2			(Offset 0x01BC) */

#define BIT_SHIFT_SW_DEFINED_PAGE2			0
#define BIT_MASK_SW_DEFINED_PAGE2			0xffffffffL
#define BIT_SW_DEFINED_PAGE2(x)			(((x) & BIT_MASK_SW_DEFINED_PAGE2) << BIT_SHIFT_SW_DEFINED_PAGE2)
#define BITS_SW_DEFINED_PAGE2				(BIT_MASK_SW_DEFINED_PAGE2 << BIT_SHIFT_SW_DEFINED_PAGE2)
#define BIT_CLEAR_SW_DEFINED_PAGE2(x)			((x) & (~BITS_SW_DEFINED_PAGE2))
#define BIT_GET_SW_DEFINED_PAGE2(x)			(((x) >> BIT_SHIFT_SW_DEFINED_PAGE2) & BIT_MASK_SW_DEFINED_PAGE2)
#define BIT_SET_SW_DEFINED_PAGE2(x, v)			(BIT_CLEAR_SW_DEFINED_PAGE2(x) | BIT_SW_DEFINED_PAGE2(v))

/* 2 REG_MCUTST_I				(Offset 0x01C0) */

#define BIT_SHIFT_MCUDMSG_I				0
#define BIT_MASK_MCUDMSG_I				0xffffffffL
#define BIT_MCUDMSG_I(x)				(((x) & BIT_MASK_MCUDMSG_I) << BIT_SHIFT_MCUDMSG_I)
#define BITS_MCUDMSG_I					(BIT_MASK_MCUDMSG_I << BIT_SHIFT_MCUDMSG_I)
#define BIT_CLEAR_MCUDMSG_I(x)				((x) & (~BITS_MCUDMSG_I))
#define BIT_GET_MCUDMSG_I(x)				(((x) >> BIT_SHIFT_MCUDMSG_I) & BIT_MASK_MCUDMSG_I)
#define BIT_SET_MCUDMSG_I(x, v)			(BIT_CLEAR_MCUDMSG_I(x) | BIT_MCUDMSG_I(v))

/* 2 REG_MCUTST_II				(Offset 0x01C4) */

#define BIT_SHIFT_MCUDMSG_II				0
#define BIT_MASK_MCUDMSG_II				0xffffffffL
#define BIT_MCUDMSG_II(x)				(((x) & BIT_MASK_MCUDMSG_II) << BIT_SHIFT_MCUDMSG_II)
#define BITS_MCUDMSG_II				(BIT_MASK_MCUDMSG_II << BIT_SHIFT_MCUDMSG_II)
#define BIT_CLEAR_MCUDMSG_II(x)			((x) & (~BITS_MCUDMSG_II))
#define BIT_GET_MCUDMSG_II(x)				(((x) >> BIT_SHIFT_MCUDMSG_II) & BIT_MASK_MCUDMSG_II)
#define BIT_SET_MCUDMSG_II(x, v)			(BIT_CLEAR_MCUDMSG_II(x) | BIT_MCUDMSG_II(v))

/* 2 REG_FMETHR				(Offset 0x01C8) */

#define BIT_FMSG_INT					BIT(31)

#define BIT_SHIFT_FW_MSG				0
#define BIT_MASK_FW_MSG				0xffffffffL
#define BIT_FW_MSG(x)					(((x) & BIT_MASK_FW_MSG) << BIT_SHIFT_FW_MSG)
#define BITS_FW_MSG					(BIT_MASK_FW_MSG << BIT_SHIFT_FW_MSG)
#define BIT_CLEAR_FW_MSG(x)				((x) & (~BITS_FW_MSG))
#define BIT_GET_FW_MSG(x)				(((x) >> BIT_SHIFT_FW_MSG) & BIT_MASK_FW_MSG)
#define BIT_SET_FW_MSG(x, v)				(BIT_CLEAR_FW_MSG(x) | BIT_FW_MSG(v))

/* 2 REG_HMETFR				(Offset 0x01CC) */

#define BIT_SHIFT_HRCV_MSG				24
#define BIT_MASK_HRCV_MSG				0xff
#define BIT_HRCV_MSG(x)				(((x) & BIT_MASK_HRCV_MSG) << BIT_SHIFT_HRCV_MSG)
#define BITS_HRCV_MSG					(BIT_MASK_HRCV_MSG << BIT_SHIFT_HRCV_MSG)
#define BIT_CLEAR_HRCV_MSG(x)				((x) & (~BITS_HRCV_MSG))
#define BIT_GET_HRCV_MSG(x)				(((x) >> BIT_SHIFT_HRCV_MSG) & BIT_MASK_HRCV_MSG)
#define BIT_SET_HRCV_MSG(x, v)				(BIT_CLEAR_HRCV_MSG(x) | BIT_HRCV_MSG(v))

#define BIT_INT_BOX3					BIT(3)
#define BIT_INT_BOX2					BIT(2)
#define BIT_INT_BOX1					BIT(1)
#define BIT_INT_BOX0					BIT(0)

/* 2 REG_HMEBOX0				(Offset 0x01D0) */

#define BIT_SHIFT_HOST_MSG_0				0
#define BIT_MASK_HOST_MSG_0				0xffffffffL
#define BIT_HOST_MSG_0(x)				(((x) & BIT_MASK_HOST_MSG_0) << BIT_SHIFT_HOST_MSG_0)
#define BITS_HOST_MSG_0				(BIT_MASK_HOST_MSG_0 << BIT_SHIFT_HOST_MSG_0)
#define BIT_CLEAR_HOST_MSG_0(x)			((x) & (~BITS_HOST_MSG_0))
#define BIT_GET_HOST_MSG_0(x)				(((x) >> BIT_SHIFT_HOST_MSG_0) & BIT_MASK_HOST_MSG_0)
#define BIT_SET_HOST_MSG_0(x, v)			(BIT_CLEAR_HOST_MSG_0(x) | BIT_HOST_MSG_0(v))

/* 2 REG_HMEBOX1				(Offset 0x01D4) */

#define BIT_SHIFT_HOST_MSG_1				0
#define BIT_MASK_HOST_MSG_1				0xffffffffL
#define BIT_HOST_MSG_1(x)				(((x) & BIT_MASK_HOST_MSG_1) << BIT_SHIFT_HOST_MSG_1)
#define BITS_HOST_MSG_1				(BIT_MASK_HOST_MSG_1 << BIT_SHIFT_HOST_MSG_1)
#define BIT_CLEAR_HOST_MSG_1(x)			((x) & (~BITS_HOST_MSG_1))
#define BIT_GET_HOST_MSG_1(x)				(((x) >> BIT_SHIFT_HOST_MSG_1) & BIT_MASK_HOST_MSG_1)
#define BIT_SET_HOST_MSG_1(x, v)			(BIT_CLEAR_HOST_MSG_1(x) | BIT_HOST_MSG_1(v))

/* 2 REG_HMEBOX2				(Offset 0x01D8) */

#define BIT_SHIFT_HOST_MSG_2				0
#define BIT_MASK_HOST_MSG_2				0xffffffffL
#define BIT_HOST_MSG_2(x)				(((x) & BIT_MASK_HOST_MSG_2) << BIT_SHIFT_HOST_MSG_2)
#define BITS_HOST_MSG_2				(BIT_MASK_HOST_MSG_2 << BIT_SHIFT_HOST_MSG_2)
#define BIT_CLEAR_HOST_MSG_2(x)			((x) & (~BITS_HOST_MSG_2))
#define BIT_GET_HOST_MSG_2(x)				(((x) >> BIT_SHIFT_HOST_MSG_2) & BIT_MASK_HOST_MSG_2)
#define BIT_SET_HOST_MSG_2(x, v)			(BIT_CLEAR_HOST_MSG_2(x) | BIT_HOST_MSG_2(v))

/* 2 REG_HMEBOX3				(Offset 0x01DC) */

#define BIT_SHIFT_HOST_MSG_3				0
#define BIT_MASK_HOST_MSG_3				0xffffffffL
#define BIT_HOST_MSG_3(x)				(((x) & BIT_MASK_HOST_MSG_3) << BIT_SHIFT_HOST_MSG_3)
#define BITS_HOST_MSG_3				(BIT_MASK_HOST_MSG_3 << BIT_SHIFT_HOST_MSG_3)
#define BIT_CLEAR_HOST_MSG_3(x)			((x) & (~BITS_HOST_MSG_3))
#define BIT_GET_HOST_MSG_3(x)				(((x) >> BIT_SHIFT_HOST_MSG_3) & BIT_MASK_HOST_MSG_3)
#define BIT_SET_HOST_MSG_3(x, v)			(BIT_CLEAR_HOST_MSG_3(x) | BIT_HOST_MSG_3(v))

/* 2 REG_BB_ACCESS_CTRL			(Offset 0x01E8) */

#define BIT_SHIFT_BB_WRITE_READ			30
#define BIT_MASK_BB_WRITE_READ				0x3
#define BIT_BB_WRITE_READ(x)				(((x) & BIT_MASK_BB_WRITE_READ) << BIT_SHIFT_BB_WRITE_READ)
#define BITS_BB_WRITE_READ				(BIT_MASK_BB_WRITE_READ << BIT_SHIFT_BB_WRITE_READ)
#define BIT_CLEAR_BB_WRITE_READ(x)			((x) & (~BITS_BB_WRITE_READ))
#define BIT_GET_BB_WRITE_READ(x)			(((x) >> BIT_SHIFT_BB_WRITE_READ) & BIT_MASK_BB_WRITE_READ)
#define BIT_SET_BB_WRITE_READ(x, v)			(BIT_CLEAR_BB_WRITE_READ(x) | BIT_BB_WRITE_READ(v))

#define BIT_SHIFT_BB_WRITE_EN				12
#define BIT_MASK_BB_WRITE_EN				0xf
#define BIT_BB_WRITE_EN(x)				(((x) & BIT_MASK_BB_WRITE_EN) << BIT_SHIFT_BB_WRITE_EN)
#define BITS_BB_WRITE_EN				(BIT_MASK_BB_WRITE_EN << BIT_SHIFT_BB_WRITE_EN)
#define BIT_CLEAR_BB_WRITE_EN(x)			((x) & (~BITS_BB_WRITE_EN))
#define BIT_GET_BB_WRITE_EN(x)				(((x) >> BIT_SHIFT_BB_WRITE_EN) & BIT_MASK_BB_WRITE_EN)
#define BIT_SET_BB_WRITE_EN(x, v)			(BIT_CLEAR_BB_WRITE_EN(x) | BIT_BB_WRITE_EN(v))

#define BIT_SHIFT_BB_ADDR				2
#define BIT_MASK_BB_ADDR				0x1ff
#define BIT_BB_ADDR(x)					(((x) & BIT_MASK_BB_ADDR) << BIT_SHIFT_BB_ADDR)
#define BITS_BB_ADDR					(BIT_MASK_BB_ADDR << BIT_SHIFT_BB_ADDR)
#define BIT_CLEAR_BB_ADDR(x)				((x) & (~BITS_BB_ADDR))
#define BIT_GET_BB_ADDR(x)				(((x) >> BIT_SHIFT_BB_ADDR) & BIT_MASK_BB_ADDR)
#define BIT_SET_BB_ADDR(x, v)				(BIT_CLEAR_BB_ADDR(x) | BIT_BB_ADDR(v))

#define BIT_BB_ERRACC					BIT(0)

/* 2 REG_BB_ACCESS_DATA			(Offset 0x01EC) */

#define BIT_SHIFT_BB_DATA				0
#define BIT_MASK_BB_DATA				0xffffffffL
#define BIT_BB_DATA(x)					(((x) & BIT_MASK_BB_DATA) << BIT_SHIFT_BB_DATA)
#define BITS_BB_DATA					(BIT_MASK_BB_DATA << BIT_SHIFT_BB_DATA)
#define BIT_CLEAR_BB_DATA(x)				((x) & (~BITS_BB_DATA))
#define BIT_GET_BB_DATA(x)				(((x) >> BIT_SHIFT_BB_DATA) & BIT_MASK_BB_DATA)
#define BIT_SET_BB_DATA(x, v)				(BIT_CLEAR_BB_DATA(x) | BIT_BB_DATA(v))

/* 2 REG_HMEBOX_E0				(Offset 0x01F0) */

#define BIT_SHIFT_HMEBOX_E0				0
#define BIT_MASK_HMEBOX_E0				0xffffffffL
#define BIT_HMEBOX_E0(x)				(((x) & BIT_MASK_HMEBOX_E0) << BIT_SHIFT_HMEBOX_E0)
#define BITS_HMEBOX_E0					(BIT_MASK_HMEBOX_E0 << BIT_SHIFT_HMEBOX_E0)
#define BIT_CLEAR_HMEBOX_E0(x)				((x) & (~BITS_HMEBOX_E0))
#define BIT_GET_HMEBOX_E0(x)				(((x) >> BIT_SHIFT_HMEBOX_E0) & BIT_MASK_HMEBOX_E0)
#define BIT_SET_HMEBOX_E0(x, v)			(BIT_CLEAR_HMEBOX_E0(x) | BIT_HMEBOX_E0(v))

/* 2 REG_HMEBOX_E1				(Offset 0x01F4) */

#define BIT_SHIFT_HMEBOX_E1				0
#define BIT_MASK_HMEBOX_E1				0xffffffffL
#define BIT_HMEBOX_E1(x)				(((x) & BIT_MASK_HMEBOX_E1) << BIT_SHIFT_HMEBOX_E1)
#define BITS_HMEBOX_E1					(BIT_MASK_HMEBOX_E1 << BIT_SHIFT_HMEBOX_E1)
#define BIT_CLEAR_HMEBOX_E1(x)				((x) & (~BITS_HMEBOX_E1))
#define BIT_GET_HMEBOX_E1(x)				(((x) >> BIT_SHIFT_HMEBOX_E1) & BIT_MASK_HMEBOX_E1)
#define BIT_SET_HMEBOX_E1(x, v)			(BIT_CLEAR_HMEBOX_E1(x) | BIT_HMEBOX_E1(v))

/* 2 REG_HMEBOX_E2				(Offset 0x01F8) */

#define BIT_SHIFT_HMEBOX_E2				0
#define BIT_MASK_HMEBOX_E2				0xffffffffL
#define BIT_HMEBOX_E2(x)				(((x) & BIT_MASK_HMEBOX_E2) << BIT_SHIFT_HMEBOX_E2)
#define BITS_HMEBOX_E2					(BIT_MASK_HMEBOX_E2 << BIT_SHIFT_HMEBOX_E2)
#define BIT_CLEAR_HMEBOX_E2(x)				((x) & (~BITS_HMEBOX_E2))
#define BIT_GET_HMEBOX_E2(x)				(((x) >> BIT_SHIFT_HMEBOX_E2) & BIT_MASK_HMEBOX_E2)
#define BIT_SET_HMEBOX_E2(x, v)			(BIT_CLEAR_HMEBOX_E2(x) | BIT_HMEBOX_E2(v))

/* 2 REG_HMEBOX_E3				(Offset 0x01FC) */

#define BIT_SHIFT_HMEBOX_E3				0
#define BIT_MASK_HMEBOX_E3				0xffffffffL
#define BIT_HMEBOX_E3(x)				(((x) & BIT_MASK_HMEBOX_E3) << BIT_SHIFT_HMEBOX_E3)
#define BITS_HMEBOX_E3					(BIT_MASK_HMEBOX_E3 << BIT_SHIFT_HMEBOX_E3)
#define BIT_CLEAR_HMEBOX_E3(x)				((x) & (~BITS_HMEBOX_E3))
#define BIT_GET_HMEBOX_E3(x)				(((x) >> BIT_SHIFT_HMEBOX_E3) & BIT_MASK_HMEBOX_E3)
#define BIT_SET_HMEBOX_E3(x, v)			(BIT_CLEAR_HMEBOX_E3(x) | BIT_HMEBOX_E3(v))

/* 2 REG_FIFOPAGE_CTRL_2			(Offset 0x0204) */

#define BIT_BCN_VALID_1_V1				BIT(31)

#define BIT_SHIFT_BCN_HEAD_1_V1			16
#define BIT_MASK_BCN_HEAD_1_V1				0xfff
#define BIT_BCN_HEAD_1_V1(x)				(((x) & BIT_MASK_BCN_HEAD_1_V1) << BIT_SHIFT_BCN_HEAD_1_V1)
#define BITS_BCN_HEAD_1_V1				(BIT_MASK_BCN_HEAD_1_V1 << BIT_SHIFT_BCN_HEAD_1_V1)
#define BIT_CLEAR_BCN_HEAD_1_V1(x)			((x) & (~BITS_BCN_HEAD_1_V1))
#define BIT_GET_BCN_HEAD_1_V1(x)			(((x) >> BIT_SHIFT_BCN_HEAD_1_V1) & BIT_MASK_BCN_HEAD_1_V1)
#define BIT_SET_BCN_HEAD_1_V1(x, v)			(BIT_CLEAR_BCN_HEAD_1_V1(x) | BIT_BCN_HEAD_1_V1(v))

#define BIT_BCN_VALID_V1				BIT(15)

#define BIT_SHIFT_BCN_HEAD_V1				0
#define BIT_MASK_BCN_HEAD_V1				0xfff
#define BIT_BCN_HEAD_V1(x)				(((x) & BIT_MASK_BCN_HEAD_V1) << BIT_SHIFT_BCN_HEAD_V1)
#define BITS_BCN_HEAD_V1				(BIT_MASK_BCN_HEAD_V1 << BIT_SHIFT_BCN_HEAD_V1)
#define BIT_CLEAR_BCN_HEAD_V1(x)			((x) & (~BITS_BCN_HEAD_V1))
#define BIT_GET_BCN_HEAD_V1(x)				(((x) >> BIT_SHIFT_BCN_HEAD_V1) & BIT_MASK_BCN_HEAD_V1)
#define BIT_SET_BCN_HEAD_V1(x, v)			(BIT_CLEAR_BCN_HEAD_V1(x) | BIT_BCN_HEAD_V1(v))

/* 2 REG_AUTO_LLT_V1				(Offset 0x0208) */

#define BIT_SHIFT_MAX_TX_PKT_V1			24
#define BIT_MASK_MAX_TX_PKT_V1				0xff
#define BIT_MAX_TX_PKT_V1(x)				(((x) & BIT_MASK_MAX_TX_PKT_V1) << BIT_SHIFT_MAX_TX_PKT_V1)
#define BITS_MAX_TX_PKT_V1				(BIT_MASK_MAX_TX_PKT_V1 << BIT_SHIFT_MAX_TX_PKT_V1)
#define BIT_CLEAR_MAX_TX_PKT_V1(x)			((x) & (~BITS_MAX_TX_PKT_V1))
#define BIT_GET_MAX_TX_PKT_V1(x)			(((x) >> BIT_SHIFT_MAX_TX_PKT_V1) & BIT_MASK_MAX_TX_PKT_V1)
#define BIT_SET_MAX_TX_PKT_V1(x, v)			(BIT_CLEAR_MAX_TX_PKT_V1(x) | BIT_MAX_TX_PKT_V1(v))

#define BIT_TDE_ERROR_STOP_V1				BIT(23)

#define BIT_SHIFT_LLT_FREE_PAGE_V2			8
#define BIT_MASK_LLT_FREE_PAGE_V2			0xfff
#define BIT_LLT_FREE_PAGE_V2(x)			(((x) & BIT_MASK_LLT_FREE_PAGE_V2) << BIT_SHIFT_LLT_FREE_PAGE_V2)
#define BITS_LLT_FREE_PAGE_V2				(BIT_MASK_LLT_FREE_PAGE_V2 << BIT_SHIFT_LLT_FREE_PAGE_V2)
#define BIT_CLEAR_LLT_FREE_PAGE_V2(x)			((x) & (~BITS_LLT_FREE_PAGE_V2))
#define BIT_GET_LLT_FREE_PAGE_V2(x)			(((x) >> BIT_SHIFT_LLT_FREE_PAGE_V2) & BIT_MASK_LLT_FREE_PAGE_V2)
#define BIT_SET_LLT_FREE_PAGE_V2(x, v)			(BIT_CLEAR_LLT_FREE_PAGE_V2(x) | BIT_LLT_FREE_PAGE_V2(v))

#define BIT_SHIFT_BLK_DESC_NUM				4
#define BIT_MASK_BLK_DESC_NUM				0xf
#define BIT_BLK_DESC_NUM(x)				(((x) & BIT_MASK_BLK_DESC_NUM) << BIT_SHIFT_BLK_DESC_NUM)
#define BITS_BLK_DESC_NUM				(BIT_MASK_BLK_DESC_NUM << BIT_SHIFT_BLK_DESC_NUM)
#define BIT_CLEAR_BLK_DESC_NUM(x)			((x) & (~BITS_BLK_DESC_NUM))
#define BIT_GET_BLK_DESC_NUM(x)			(((x) >> BIT_SHIFT_BLK_DESC_NUM) & BIT_MASK_BLK_DESC_NUM)
#define BIT_SET_BLK_DESC_NUM(x, v)			(BIT_CLEAR_BLK_DESC_NUM(x) | BIT_BLK_DESC_NUM(v))

#define BIT_R_BCN_HEAD_SEL				BIT(3)
#define BIT_R_EN_BCN_SW_HEAD_SEL			BIT(2)
#define BIT_LLT_DBG_SEL				BIT(1)
#define BIT_AUTO_INIT_LLT_V1				BIT(0)

/* 2 REG_TXDMA_OFFSET_CHK			(Offset 0x020C) */

#define BIT_EM_CHKSUM_FIN				BIT(31)
#define BIT_EMN_PCIE_DMA_MOD				BIT(30)
#define BIT_EN_TXQUE_CLR				BIT(29)
#define BIT_EN_PCIE_FIFO_MODE				BIT(28)

#define BIT_SHIFT_PG_UNDER_TH_V1			16
#define BIT_MASK_PG_UNDER_TH_V1			0xfff
#define BIT_PG_UNDER_TH_V1(x)				(((x) & BIT_MASK_PG_UNDER_TH_V1) << BIT_SHIFT_PG_UNDER_TH_V1)
#define BITS_PG_UNDER_TH_V1				(BIT_MASK_PG_UNDER_TH_V1 << BIT_SHIFT_PG_UNDER_TH_V1)
#define BIT_CLEAR_PG_UNDER_TH_V1(x)			((x) & (~BITS_PG_UNDER_TH_V1))
#define BIT_GET_PG_UNDER_TH_V1(x)			(((x) >> BIT_SHIFT_PG_UNDER_TH_V1) & BIT_MASK_PG_UNDER_TH_V1)
#define BIT_SET_PG_UNDER_TH_V1(x, v)			(BIT_CLEAR_PG_UNDER_TH_V1(x) | BIT_PG_UNDER_TH_V1(v))

#define BIT_R_EN_RESET_RESTORE_H2C			BIT(15)
#define BIT_SDIO_TDE_FINISH				BIT(14)
#define BIT_SDIO_TXDESC_CHKSUM_EN			BIT(13)
#define BIT_RST_RDPTR					BIT(12)
#define BIT_RST_WRPTR					BIT(11)
#define BIT_CHK_PG_TH_EN				BIT(10)
#define BIT_DROP_DATA_EN				BIT(9)
#define BIT_CHECK_OFFSET_EN				BIT(8)

#define BIT_SHIFT_CHECK_OFFSET				0
#define BIT_MASK_CHECK_OFFSET				0xff
#define BIT_CHECK_OFFSET(x)				(((x) & BIT_MASK_CHECK_OFFSET) << BIT_SHIFT_CHECK_OFFSET)
#define BITS_CHECK_OFFSET				(BIT_MASK_CHECK_OFFSET << BIT_SHIFT_CHECK_OFFSET)
#define BIT_CLEAR_CHECK_OFFSET(x)			((x) & (~BITS_CHECK_OFFSET))
#define BIT_GET_CHECK_OFFSET(x)			(((x) >> BIT_SHIFT_CHECK_OFFSET) & BIT_MASK_CHECK_OFFSET)
#define BIT_SET_CHECK_OFFSET(x, v)			(BIT_CLEAR_CHECK_OFFSET(x) | BIT_CHECK_OFFSET(v))

/* 2 REG_TXDMA_STATUS			(Offset 0x0210) */

#define BIT_TXPKTBUF_REQ_ERR				BIT(18)
#define BIT_HI_OQT_UDN					BIT(17)
#define BIT_HI_OQT_OVF					BIT(16)
#define BIT_PAYLOAD_CHKSUM_ERR				BIT(15)
#define BIT_PAYLOAD_UDN				BIT(14)
#define BIT_PAYLOAD_OVF				BIT(13)
#define BIT_DSC_CHKSUM_FAIL				BIT(12)
#define BIT_UNKNOWN_QSEL				BIT(11)
#define BIT_EP_QSEL_DIFF				BIT(10)
#define BIT_TX_OFFS_UNMATCH				BIT(9)
#define BIT_TXOQT_UDN					BIT(8)
#define BIT_TXOQT_OVF					BIT(7)
#define BIT_TXDMA_SFF_UDN				BIT(6)
#define BIT_TXDMA_SFF_OVF				BIT(5)
#define BIT_LLT_NULL_PG				BIT(4)
#define BIT_PAGE_UDN					BIT(3)
#define BIT_PAGE_OVF					BIT(2)
#define BIT_TXFF_PG_UDN				BIT(1)
#define BIT_TXFF_PG_OVF				BIT(0)

/* 2 REG_TQPNT1				(Offset 0x0218) */

#define BIT_HPQ_INT_EN					BIT(31)

#define BIT_SHIFT_HPQ_HIGH_TH_V1			16
#define BIT_MASK_HPQ_HIGH_TH_V1			0xfff
#define BIT_HPQ_HIGH_TH_V1(x)				(((x) & BIT_MASK_HPQ_HIGH_TH_V1) << BIT_SHIFT_HPQ_HIGH_TH_V1)
#define BITS_HPQ_HIGH_TH_V1				(BIT_MASK_HPQ_HIGH_TH_V1 << BIT_SHIFT_HPQ_HIGH_TH_V1)
#define BIT_CLEAR_HPQ_HIGH_TH_V1(x)			((x) & (~BITS_HPQ_HIGH_TH_V1))
#define BIT_GET_HPQ_HIGH_TH_V1(x)			(((x) >> BIT_SHIFT_HPQ_HIGH_TH_V1) & BIT_MASK_HPQ_HIGH_TH_V1)
#define BIT_SET_HPQ_HIGH_TH_V1(x, v)			(BIT_CLEAR_HPQ_HIGH_TH_V1(x) | BIT_HPQ_HIGH_TH_V1(v))

#define BIT_SHIFT_HPQ_LOW_TH_V1			0
#define BIT_MASK_HPQ_LOW_TH_V1				0xfff
#define BIT_HPQ_LOW_TH_V1(x)				(((x) & BIT_MASK_HPQ_LOW_TH_V1) << BIT_SHIFT_HPQ_LOW_TH_V1)
#define BITS_HPQ_LOW_TH_V1				(BIT_MASK_HPQ_LOW_TH_V1 << BIT_SHIFT_HPQ_LOW_TH_V1)
#define BIT_CLEAR_HPQ_LOW_TH_V1(x)			((x) & (~BITS_HPQ_LOW_TH_V1))
#define BIT_GET_HPQ_LOW_TH_V1(x)			(((x) >> BIT_SHIFT_HPQ_LOW_TH_V1) & BIT_MASK_HPQ_LOW_TH_V1)
#define BIT_SET_HPQ_LOW_TH_V1(x, v)			(BIT_CLEAR_HPQ_LOW_TH_V1(x) | BIT_HPQ_LOW_TH_V1(v))

/* 2 REG_TQPNT2				(Offset 0x021C) */

#define BIT_NPQ_INT_EN					BIT(31)

#define BIT_SHIFT_NPQ_HIGH_TH_V1			16
#define BIT_MASK_NPQ_HIGH_TH_V1			0xfff
#define BIT_NPQ_HIGH_TH_V1(x)				(((x) & BIT_MASK_NPQ_HIGH_TH_V1) << BIT_SHIFT_NPQ_HIGH_TH_V1)
#define BITS_NPQ_HIGH_TH_V1				(BIT_MASK_NPQ_HIGH_TH_V1 << BIT_SHIFT_NPQ_HIGH_TH_V1)
#define BIT_CLEAR_NPQ_HIGH_TH_V1(x)			((x) & (~BITS_NPQ_HIGH_TH_V1))
#define BIT_GET_NPQ_HIGH_TH_V1(x)			(((x) >> BIT_SHIFT_NPQ_HIGH_TH_V1) & BIT_MASK_NPQ_HIGH_TH_V1)
#define BIT_SET_NPQ_HIGH_TH_V1(x, v)			(BIT_CLEAR_NPQ_HIGH_TH_V1(x) | BIT_NPQ_HIGH_TH_V1(v))

#define BIT_SHIFT_NPQ_LOW_TH_V1			0
#define BIT_MASK_NPQ_LOW_TH_V1				0xfff
#define BIT_NPQ_LOW_TH_V1(x)				(((x) & BIT_MASK_NPQ_LOW_TH_V1) << BIT_SHIFT_NPQ_LOW_TH_V1)
#define BITS_NPQ_LOW_TH_V1				(BIT_MASK_NPQ_LOW_TH_V1 << BIT_SHIFT_NPQ_LOW_TH_V1)
#define BIT_CLEAR_NPQ_LOW_TH_V1(x)			((x) & (~BITS_NPQ_LOW_TH_V1))
#define BIT_GET_NPQ_LOW_TH_V1(x)			(((x) >> BIT_SHIFT_NPQ_LOW_TH_V1) & BIT_MASK_NPQ_LOW_TH_V1)
#define BIT_SET_NPQ_LOW_TH_V1(x, v)			(BIT_CLEAR_NPQ_LOW_TH_V1(x) | BIT_NPQ_LOW_TH_V1(v))

/* 2 REG_TQPNT3				(Offset 0x0220) */

#define BIT_LPQ_INT_EN					BIT(31)

#define BIT_SHIFT_LPQ_HIGH_TH_V1			16
#define BIT_MASK_LPQ_HIGH_TH_V1			0xfff
#define BIT_LPQ_HIGH_TH_V1(x)				(((x) & BIT_MASK_LPQ_HIGH_TH_V1) << BIT_SHIFT_LPQ_HIGH_TH_V1)
#define BITS_LPQ_HIGH_TH_V1				(BIT_MASK_LPQ_HIGH_TH_V1 << BIT_SHIFT_LPQ_HIGH_TH_V1)
#define BIT_CLEAR_LPQ_HIGH_TH_V1(x)			((x) & (~BITS_LPQ_HIGH_TH_V1))
#define BIT_GET_LPQ_HIGH_TH_V1(x)			(((x) >> BIT_SHIFT_LPQ_HIGH_TH_V1) & BIT_MASK_LPQ_HIGH_TH_V1)
#define BIT_SET_LPQ_HIGH_TH_V1(x, v)			(BIT_CLEAR_LPQ_HIGH_TH_V1(x) | BIT_LPQ_HIGH_TH_V1(v))

#define BIT_SHIFT_LPQ_LOW_TH_V1			0
#define BIT_MASK_LPQ_LOW_TH_V1				0xfff
#define BIT_LPQ_LOW_TH_V1(x)				(((x) & BIT_MASK_LPQ_LOW_TH_V1) << BIT_SHIFT_LPQ_LOW_TH_V1)
#define BITS_LPQ_LOW_TH_V1				(BIT_MASK_LPQ_LOW_TH_V1 << BIT_SHIFT_LPQ_LOW_TH_V1)
#define BIT_CLEAR_LPQ_LOW_TH_V1(x)			((x) & (~BITS_LPQ_LOW_TH_V1))
#define BIT_GET_LPQ_LOW_TH_V1(x)			(((x) >> BIT_SHIFT_LPQ_LOW_TH_V1) & BIT_MASK_LPQ_LOW_TH_V1)
#define BIT_SET_LPQ_LOW_TH_V1(x, v)			(BIT_CLEAR_LPQ_LOW_TH_V1(x) | BIT_LPQ_LOW_TH_V1(v))

/* 2 REG_TQPNT4				(Offset 0x0224) */

#define BIT_EXQ_INT_EN					BIT(31)

#define BIT_SHIFT_EXQ_HIGH_TH_V1			16
#define BIT_MASK_EXQ_HIGH_TH_V1			0xfff
#define BIT_EXQ_HIGH_TH_V1(x)				(((x) & BIT_MASK_EXQ_HIGH_TH_V1) << BIT_SHIFT_EXQ_HIGH_TH_V1)
#define BITS_EXQ_HIGH_TH_V1				(BIT_MASK_EXQ_HIGH_TH_V1 << BIT_SHIFT_EXQ_HIGH_TH_V1)
#define BIT_CLEAR_EXQ_HIGH_TH_V1(x)			((x) & (~BITS_EXQ_HIGH_TH_V1))
#define BIT_GET_EXQ_HIGH_TH_V1(x)			(((x) >> BIT_SHIFT_EXQ_HIGH_TH_V1) & BIT_MASK_EXQ_HIGH_TH_V1)
#define BIT_SET_EXQ_HIGH_TH_V1(x, v)			(BIT_CLEAR_EXQ_HIGH_TH_V1(x) | BIT_EXQ_HIGH_TH_V1(v))

#define BIT_SHIFT_EXQ_LOW_TH_V1			0
#define BIT_MASK_EXQ_LOW_TH_V1				0xfff
#define BIT_EXQ_LOW_TH_V1(x)				(((x) & BIT_MASK_EXQ_LOW_TH_V1) << BIT_SHIFT_EXQ_LOW_TH_V1)
#define BITS_EXQ_LOW_TH_V1				(BIT_MASK_EXQ_LOW_TH_V1 << BIT_SHIFT_EXQ_LOW_TH_V1)
#define BIT_CLEAR_EXQ_LOW_TH_V1(x)			((x) & (~BITS_EXQ_LOW_TH_V1))
#define BIT_GET_EXQ_LOW_TH_V1(x)			(((x) >> BIT_SHIFT_EXQ_LOW_TH_V1) & BIT_MASK_EXQ_LOW_TH_V1)
#define BIT_SET_EXQ_LOW_TH_V1(x, v)			(BIT_CLEAR_EXQ_LOW_TH_V1(x) | BIT_EXQ_LOW_TH_V1(v))

/* 2 REG_RQPN_CTRL_1				(Offset 0x0228) */

#define BIT_SHIFT_TXPKTNUM_H_V2			16
#define BIT_MASK_TXPKTNUM_H_V2				0xfff
#define BIT_TXPKTNUM_H_V2(x)				(((x) & BIT_MASK_TXPKTNUM_H_V2) << BIT_SHIFT_TXPKTNUM_H_V2)
#define BITS_TXPKTNUM_H_V2				(BIT_MASK_TXPKTNUM_H_V2 << BIT_SHIFT_TXPKTNUM_H_V2)
#define BIT_CLEAR_TXPKTNUM_H_V2(x)			((x) & (~BITS_TXPKTNUM_H_V2))
#define BIT_GET_TXPKTNUM_H_V2(x)			(((x) >> BIT_SHIFT_TXPKTNUM_H_V2) & BIT_MASK_TXPKTNUM_H_V2)
#define BIT_SET_TXPKTNUM_H_V2(x, v)			(BIT_CLEAR_TXPKTNUM_H_V2(x) | BIT_TXPKTNUM_H_V2(v))

#define BIT_SHIFT_TXPKTNUM_V3				0
#define BIT_MASK_TXPKTNUM_V3				0xfff
#define BIT_TXPKTNUM_V3(x)				(((x) & BIT_MASK_TXPKTNUM_V3) << BIT_SHIFT_TXPKTNUM_V3)
#define BITS_TXPKTNUM_V3				(BIT_MASK_TXPKTNUM_V3 << BIT_SHIFT_TXPKTNUM_V3)
#define BIT_CLEAR_TXPKTNUM_V3(x)			((x) & (~BITS_TXPKTNUM_V3))
#define BIT_GET_TXPKTNUM_V3(x)				(((x) >> BIT_SHIFT_TXPKTNUM_V3) & BIT_MASK_TXPKTNUM_V3)
#define BIT_SET_TXPKTNUM_V3(x, v)			(BIT_CLEAR_TXPKTNUM_V3(x) | BIT_TXPKTNUM_V3(v))

/* 2 REG_RQPN_CTRL_2				(Offset 0x022C) */

#define BIT_LD_RQPN					BIT(31)
#define BIT_EXQ_PUBLIC_DIS_V1				BIT(19)
#define BIT_NPQ_PUBLIC_DIS_V1				BIT(18)
#define BIT_LPQ_PUBLIC_DIS_V1				BIT(17)
#define BIT_HPQ_PUBLIC_DIS_V1				BIT(16)
#define BIT_SDIO_TXAGG_ALIGN_ADJUST_EN			BIT(15)

#define BIT_SHIFT_SDIO_TXAGG_ALIGN_SIZE		0
#define BIT_MASK_SDIO_TXAGG_ALIGN_SIZE			0xfff
#define BIT_SDIO_TXAGG_ALIGN_SIZE(x)			(((x) & BIT_MASK_SDIO_TXAGG_ALIGN_SIZE) << BIT_SHIFT_SDIO_TXAGG_ALIGN_SIZE)
#define BITS_SDIO_TXAGG_ALIGN_SIZE			(BIT_MASK_SDIO_TXAGG_ALIGN_SIZE << BIT_SHIFT_SDIO_TXAGG_ALIGN_SIZE)
#define BIT_CLEAR_SDIO_TXAGG_ALIGN_SIZE(x)		((x) & (~BITS_SDIO_TXAGG_ALIGN_SIZE))
#define BIT_GET_SDIO_TXAGG_ALIGN_SIZE(x)		(((x) >> BIT_SHIFT_SDIO_TXAGG_ALIGN_SIZE) & BIT_MASK_SDIO_TXAGG_ALIGN_SIZE)
#define BIT_SET_SDIO_TXAGG_ALIGN_SIZE(x, v)		(BIT_CLEAR_SDIO_TXAGG_ALIGN_SIZE(x) | BIT_SDIO_TXAGG_ALIGN_SIZE(v))

/* 2 REG_FIFOPAGE_INFO_1			(Offset 0x0230) */

#define BIT_SHIFT_HPQ_AVAL_PG_V1			16
#define BIT_MASK_HPQ_AVAL_PG_V1			0xfff
#define BIT_HPQ_AVAL_PG_V1(x)				(((x) & BIT_MASK_HPQ_AVAL_PG_V1) << BIT_SHIFT_HPQ_AVAL_PG_V1)
#define BITS_HPQ_AVAL_PG_V1				(BIT_MASK_HPQ_AVAL_PG_V1 << BIT_SHIFT_HPQ_AVAL_PG_V1)
#define BIT_CLEAR_HPQ_AVAL_PG_V1(x)			((x) & (~BITS_HPQ_AVAL_PG_V1))
#define BIT_GET_HPQ_AVAL_PG_V1(x)			(((x) >> BIT_SHIFT_HPQ_AVAL_PG_V1) & BIT_MASK_HPQ_AVAL_PG_V1)
#define BIT_SET_HPQ_AVAL_PG_V1(x, v)			(BIT_CLEAR_HPQ_AVAL_PG_V1(x) | BIT_HPQ_AVAL_PG_V1(v))

#define BIT_SHIFT_HPQ_V1				0
#define BIT_MASK_HPQ_V1				0xfff
#define BIT_HPQ_V1(x)					(((x) & BIT_MASK_HPQ_V1) << BIT_SHIFT_HPQ_V1)
#define BITS_HPQ_V1					(BIT_MASK_HPQ_V1 << BIT_SHIFT_HPQ_V1)
#define BIT_CLEAR_HPQ_V1(x)				((x) & (~BITS_HPQ_V1))
#define BIT_GET_HPQ_V1(x)				(((x) >> BIT_SHIFT_HPQ_V1) & BIT_MASK_HPQ_V1)
#define BIT_SET_HPQ_V1(x, v)				(BIT_CLEAR_HPQ_V1(x) | BIT_HPQ_V1(v))

/* 2 REG_FIFOPAGE_INFO_2			(Offset 0x0234) */

#define BIT_SHIFT_LPQ_AVAL_PG_V1			16
#define BIT_MASK_LPQ_AVAL_PG_V1			0xfff
#define BIT_LPQ_AVAL_PG_V1(x)				(((x) & BIT_MASK_LPQ_AVAL_PG_V1) << BIT_SHIFT_LPQ_AVAL_PG_V1)
#define BITS_LPQ_AVAL_PG_V1				(BIT_MASK_LPQ_AVAL_PG_V1 << BIT_SHIFT_LPQ_AVAL_PG_V1)
#define BIT_CLEAR_LPQ_AVAL_PG_V1(x)			((x) & (~BITS_LPQ_AVAL_PG_V1))
#define BIT_GET_LPQ_AVAL_PG_V1(x)			(((x) >> BIT_SHIFT_LPQ_AVAL_PG_V1) & BIT_MASK_LPQ_AVAL_PG_V1)
#define BIT_SET_LPQ_AVAL_PG_V1(x, v)			(BIT_CLEAR_LPQ_AVAL_PG_V1(x) | BIT_LPQ_AVAL_PG_V1(v))

#define BIT_SHIFT_LPQ_V1				0
#define BIT_MASK_LPQ_V1				0xfff
#define BIT_LPQ_V1(x)					(((x) & BIT_MASK_LPQ_V1) << BIT_SHIFT_LPQ_V1)
#define BITS_LPQ_V1					(BIT_MASK_LPQ_V1 << BIT_SHIFT_LPQ_V1)
#define BIT_CLEAR_LPQ_V1(x)				((x) & (~BITS_LPQ_V1))
#define BIT_GET_LPQ_V1(x)				(((x) >> BIT_SHIFT_LPQ_V1) & BIT_MASK_LPQ_V1)
#define BIT_SET_LPQ_V1(x, v)				(BIT_CLEAR_LPQ_V1(x) | BIT_LPQ_V1(v))

/* 2 REG_FIFOPAGE_INFO_3			(Offset 0x0238) */

#define BIT_SHIFT_NPQ_AVAL_PG_V1			16
#define BIT_MASK_NPQ_AVAL_PG_V1			0xfff
#define BIT_NPQ_AVAL_PG_V1(x)				(((x) & BIT_MASK_NPQ_AVAL_PG_V1) << BIT_SHIFT_NPQ_AVAL_PG_V1)
#define BITS_NPQ_AVAL_PG_V1				(BIT_MASK_NPQ_AVAL_PG_V1 << BIT_SHIFT_NPQ_AVAL_PG_V1)
#define BIT_CLEAR_NPQ_AVAL_PG_V1(x)			((x) & (~BITS_NPQ_AVAL_PG_V1))
#define BIT_GET_NPQ_AVAL_PG_V1(x)			(((x) >> BIT_SHIFT_NPQ_AVAL_PG_V1) & BIT_MASK_NPQ_AVAL_PG_V1)
#define BIT_SET_NPQ_AVAL_PG_V1(x, v)			(BIT_CLEAR_NPQ_AVAL_PG_V1(x) | BIT_NPQ_AVAL_PG_V1(v))

#define BIT_SHIFT_NPQ_V1				0
#define BIT_MASK_NPQ_V1				0xfff
#define BIT_NPQ_V1(x)					(((x) & BIT_MASK_NPQ_V1) << BIT_SHIFT_NPQ_V1)
#define BITS_NPQ_V1					(BIT_MASK_NPQ_V1 << BIT_SHIFT_NPQ_V1)
#define BIT_CLEAR_NPQ_V1(x)				((x) & (~BITS_NPQ_V1))
#define BIT_GET_NPQ_V1(x)				(((x) >> BIT_SHIFT_NPQ_V1) & BIT_MASK_NPQ_V1)
#define BIT_SET_NPQ_V1(x, v)				(BIT_CLEAR_NPQ_V1(x) | BIT_NPQ_V1(v))

/* 2 REG_FIFOPAGE_INFO_4			(Offset 0x023C) */

#define BIT_SHIFT_EXQ_AVAL_PG_V1			16
#define BIT_MASK_EXQ_AVAL_PG_V1			0xfff
#define BIT_EXQ_AVAL_PG_V1(x)				(((x) & BIT_MASK_EXQ_AVAL_PG_V1) << BIT_SHIFT_EXQ_AVAL_PG_V1)
#define BITS_EXQ_AVAL_PG_V1				(BIT_MASK_EXQ_AVAL_PG_V1 << BIT_SHIFT_EXQ_AVAL_PG_V1)
#define BIT_CLEAR_EXQ_AVAL_PG_V1(x)			((x) & (~BITS_EXQ_AVAL_PG_V1))
#define BIT_GET_EXQ_AVAL_PG_V1(x)			(((x) >> BIT_SHIFT_EXQ_AVAL_PG_V1) & BIT_MASK_EXQ_AVAL_PG_V1)
#define BIT_SET_EXQ_AVAL_PG_V1(x, v)			(BIT_CLEAR_EXQ_AVAL_PG_V1(x) | BIT_EXQ_AVAL_PG_V1(v))

#define BIT_SHIFT_EXQ_V1				0
#define BIT_MASK_EXQ_V1				0xfff
#define BIT_EXQ_V1(x)					(((x) & BIT_MASK_EXQ_V1) << BIT_SHIFT_EXQ_V1)
#define BITS_EXQ_V1					(BIT_MASK_EXQ_V1 << BIT_SHIFT_EXQ_V1)
#define BIT_CLEAR_EXQ_V1(x)				((x) & (~BITS_EXQ_V1))
#define BIT_GET_EXQ_V1(x)				(((x) >> BIT_SHIFT_EXQ_V1) & BIT_MASK_EXQ_V1)
#define BIT_SET_EXQ_V1(x, v)				(BIT_CLEAR_EXQ_V1(x) | BIT_EXQ_V1(v))

/* 2 REG_FIFOPAGE_INFO_5			(Offset 0x0240) */

#define BIT_SHIFT_PUBQ_AVAL_PG_V1			16
#define BIT_MASK_PUBQ_AVAL_PG_V1			0xfff
#define BIT_PUBQ_AVAL_PG_V1(x)				(((x) & BIT_MASK_PUBQ_AVAL_PG_V1) << BIT_SHIFT_PUBQ_AVAL_PG_V1)
#define BITS_PUBQ_AVAL_PG_V1				(BIT_MASK_PUBQ_AVAL_PG_V1 << BIT_SHIFT_PUBQ_AVAL_PG_V1)
#define BIT_CLEAR_PUBQ_AVAL_PG_V1(x)			((x) & (~BITS_PUBQ_AVAL_PG_V1))
#define BIT_GET_PUBQ_AVAL_PG_V1(x)			(((x) >> BIT_SHIFT_PUBQ_AVAL_PG_V1) & BIT_MASK_PUBQ_AVAL_PG_V1)
#define BIT_SET_PUBQ_AVAL_PG_V1(x, v)			(BIT_CLEAR_PUBQ_AVAL_PG_V1(x) | BIT_PUBQ_AVAL_PG_V1(v))

#define BIT_SHIFT_PUBQ_V1				0
#define BIT_MASK_PUBQ_V1				0xfff
#define BIT_PUBQ_V1(x)					(((x) & BIT_MASK_PUBQ_V1) << BIT_SHIFT_PUBQ_V1)
#define BITS_PUBQ_V1					(BIT_MASK_PUBQ_V1 << BIT_SHIFT_PUBQ_V1)
#define BIT_CLEAR_PUBQ_V1(x)				((x) & (~BITS_PUBQ_V1))
#define BIT_GET_PUBQ_V1(x)				(((x) >> BIT_SHIFT_PUBQ_V1) & BIT_MASK_PUBQ_V1)
#define BIT_SET_PUBQ_V1(x, v)				(BIT_CLEAR_PUBQ_V1(x) | BIT_PUBQ_V1(v))

/* 2 REG_H2C_HEAD				(Offset 0x0244) */

#define BIT_SHIFT_H2C_HEAD				0
#define BIT_MASK_H2C_HEAD				0x3ffff
#define BIT_H2C_HEAD(x)				(((x) & BIT_MASK_H2C_HEAD) << BIT_SHIFT_H2C_HEAD)
#define BITS_H2C_HEAD					(BIT_MASK_H2C_HEAD << BIT_SHIFT_H2C_HEAD)
#define BIT_CLEAR_H2C_HEAD(x)				((x) & (~BITS_H2C_HEAD))
#define BIT_GET_H2C_HEAD(x)				(((x) >> BIT_SHIFT_H2C_HEAD) & BIT_MASK_H2C_HEAD)
#define BIT_SET_H2C_HEAD(x, v)				(BIT_CLEAR_H2C_HEAD(x) | BIT_H2C_HEAD(v))

/* 2 REG_H2C_TAIL				(Offset 0x0248) */

#define BIT_SHIFT_H2C_TAIL				0
#define BIT_MASK_H2C_TAIL				0x3ffff
#define BIT_H2C_TAIL(x)				(((x) & BIT_MASK_H2C_TAIL) << BIT_SHIFT_H2C_TAIL)
#define BITS_H2C_TAIL					(BIT_MASK_H2C_TAIL << BIT_SHIFT_H2C_TAIL)
#define BIT_CLEAR_H2C_TAIL(x)				((x) & (~BITS_H2C_TAIL))
#define BIT_GET_H2C_TAIL(x)				(((x) >> BIT_SHIFT_H2C_TAIL) & BIT_MASK_H2C_TAIL)
#define BIT_SET_H2C_TAIL(x, v)				(BIT_CLEAR_H2C_TAIL(x) | BIT_H2C_TAIL(v))

/* 2 REG_H2C_READ_ADDR			(Offset 0x024C) */

#define BIT_SHIFT_H2C_READ_ADDR			0
#define BIT_MASK_H2C_READ_ADDR				0x3ffff
#define BIT_H2C_READ_ADDR(x)				(((x) & BIT_MASK_H2C_READ_ADDR) << BIT_SHIFT_H2C_READ_ADDR)
#define BITS_H2C_READ_ADDR				(BIT_MASK_H2C_READ_ADDR << BIT_SHIFT_H2C_READ_ADDR)
#define BIT_CLEAR_H2C_READ_ADDR(x)			((x) & (~BITS_H2C_READ_ADDR))
#define BIT_GET_H2C_READ_ADDR(x)			(((x) >> BIT_SHIFT_H2C_READ_ADDR) & BIT_MASK_H2C_READ_ADDR)
#define BIT_SET_H2C_READ_ADDR(x, v)			(BIT_CLEAR_H2C_READ_ADDR(x) | BIT_H2C_READ_ADDR(v))

/* 2 REG_H2C_WR_ADDR				(Offset 0x0250) */

#define BIT_SHIFT_H2C_WR_ADDR				0
#define BIT_MASK_H2C_WR_ADDR				0x3ffff
#define BIT_H2C_WR_ADDR(x)				(((x) & BIT_MASK_H2C_WR_ADDR) << BIT_SHIFT_H2C_WR_ADDR)
#define BITS_H2C_WR_ADDR				(BIT_MASK_H2C_WR_ADDR << BIT_SHIFT_H2C_WR_ADDR)
#define BIT_CLEAR_H2C_WR_ADDR(x)			((x) & (~BITS_H2C_WR_ADDR))
#define BIT_GET_H2C_WR_ADDR(x)				(((x) >> BIT_SHIFT_H2C_WR_ADDR) & BIT_MASK_H2C_WR_ADDR)
#define BIT_SET_H2C_WR_ADDR(x, v)			(BIT_CLEAR_H2C_WR_ADDR(x) | BIT_H2C_WR_ADDR(v))

/* 2 REG_H2C_INFO				(Offset 0x0254) */

#define BIT_H2C_SPACE_VLD				BIT(3)
#define BIT_H2C_WR_ADDR_RST				BIT(2)
#define BIT_RST_PGSUB_CNT				BIT(1)

#define BIT_SHIFT_H2C_LEN_SEL				0
#define BIT_MASK_H2C_LEN_SEL				0x3
#define BIT_H2C_LEN_SEL(x)				(((x) & BIT_MASK_H2C_LEN_SEL) << BIT_SHIFT_H2C_LEN_SEL)
#define BITS_H2C_LEN_SEL				(BIT_MASK_H2C_LEN_SEL << BIT_SHIFT_H2C_LEN_SEL)
#define BIT_CLEAR_H2C_LEN_SEL(x)			((x) & (~BITS_H2C_LEN_SEL))
#define BIT_GET_H2C_LEN_SEL(x)				(((x) >> BIT_SHIFT_H2C_LEN_SEL) & BIT_MASK_H2C_LEN_SEL)
#define BIT_SET_H2C_LEN_SEL(x, v)			(BIT_CLEAR_H2C_LEN_SEL(x) | BIT_H2C_LEN_SEL(v))

#define BIT_PGSUB_CNT_EN				BIT(0)

/* 2 REG_PGSUB_H				(Offset 0x0270) */

#define BIT_SHIFT_HPQ_PGSUB_CNT			0
#define BIT_MASK_HPQ_PGSUB_CNT				0xffffffffL
#define BIT_HPQ_PGSUB_CNT(x)				(((x) & BIT_MASK_HPQ_PGSUB_CNT) << BIT_SHIFT_HPQ_PGSUB_CNT)
#define BITS_HPQ_PGSUB_CNT				(BIT_MASK_HPQ_PGSUB_CNT << BIT_SHIFT_HPQ_PGSUB_CNT)
#define BIT_CLEAR_HPQ_PGSUB_CNT(x)			((x) & (~BITS_HPQ_PGSUB_CNT))
#define BIT_GET_HPQ_PGSUB_CNT(x)			(((x) >> BIT_SHIFT_HPQ_PGSUB_CNT) & BIT_MASK_HPQ_PGSUB_CNT)
#define BIT_SET_HPQ_PGSUB_CNT(x, v)			(BIT_CLEAR_HPQ_PGSUB_CNT(x) | BIT_HPQ_PGSUB_CNT(v))

/* 2 REG_PGSUB_N				(Offset 0x0274) */

#define BIT_SHIFT_NPQ_PGSUB_CNT			0
#define BIT_MASK_NPQ_PGSUB_CNT				0xffffffffL
#define BIT_NPQ_PGSUB_CNT(x)				(((x) & BIT_MASK_NPQ_PGSUB_CNT) << BIT_SHIFT_NPQ_PGSUB_CNT)
#define BITS_NPQ_PGSUB_CNT				(BIT_MASK_NPQ_PGSUB_CNT << BIT_SHIFT_NPQ_PGSUB_CNT)
#define BIT_CLEAR_NPQ_PGSUB_CNT(x)			((x) & (~BITS_NPQ_PGSUB_CNT))
#define BIT_GET_NPQ_PGSUB_CNT(x)			(((x) >> BIT_SHIFT_NPQ_PGSUB_CNT) & BIT_MASK_NPQ_PGSUB_CNT)
#define BIT_SET_NPQ_PGSUB_CNT(x, v)			(BIT_CLEAR_NPQ_PGSUB_CNT(x) | BIT_NPQ_PGSUB_CNT(v))

/* 2 REG_PGSUB_L				(Offset 0x0278) */

#define BIT_SHIFT_LPQ_PGSUB_CNT			0
#define BIT_MASK_LPQ_PGSUB_CNT				0xffffffffL
#define BIT_LPQ_PGSUB_CNT(x)				(((x) & BIT_MASK_LPQ_PGSUB_CNT) << BIT_SHIFT_LPQ_PGSUB_CNT)
#define BITS_LPQ_PGSUB_CNT				(BIT_MASK_LPQ_PGSUB_CNT << BIT_SHIFT_LPQ_PGSUB_CNT)
#define BIT_CLEAR_LPQ_PGSUB_CNT(x)			((x) & (~BITS_LPQ_PGSUB_CNT))
#define BIT_GET_LPQ_PGSUB_CNT(x)			(((x) >> BIT_SHIFT_LPQ_PGSUB_CNT) & BIT_MASK_LPQ_PGSUB_CNT)
#define BIT_SET_LPQ_PGSUB_CNT(x, v)			(BIT_CLEAR_LPQ_PGSUB_CNT(x) | BIT_LPQ_PGSUB_CNT(v))

/* 2 REG_PGSUB_E				(Offset 0x027C) */

#define BIT_SHIFT_EPQ_PGSUB_CNT			0
#define BIT_MASK_EPQ_PGSUB_CNT				0xffffffffL
#define BIT_EPQ_PGSUB_CNT(x)				(((x) & BIT_MASK_EPQ_PGSUB_CNT) << BIT_SHIFT_EPQ_PGSUB_CNT)
#define BITS_EPQ_PGSUB_CNT				(BIT_MASK_EPQ_PGSUB_CNT << BIT_SHIFT_EPQ_PGSUB_CNT)
#define BIT_CLEAR_EPQ_PGSUB_CNT(x)			((x) & (~BITS_EPQ_PGSUB_CNT))
#define BIT_GET_EPQ_PGSUB_CNT(x)			(((x) >> BIT_SHIFT_EPQ_PGSUB_CNT) & BIT_MASK_EPQ_PGSUB_CNT)
#define BIT_SET_EPQ_PGSUB_CNT(x, v)			(BIT_CLEAR_EPQ_PGSUB_CNT(x) | BIT_EPQ_PGSUB_CNT(v))

/* 2 REG_RXDMA_AGG_PG_TH			(Offset 0x0280) */

#define BIT_USB_RXDMA_AGG_EN				BIT(31)
#define BIT_EN_FW_ADD					BIT(30)
#define BIT_EN_PRE_CALC				BIT(29)
#define BIT_RXAGG_SW_EN				BIT(28)
#define BIT_RXAGG_SW_TRIG				BIT(27)

#define BIT_SHIFT_FW_UPD_RDPTR19_TO_16			20
#define BIT_MASK_FW_UPD_RDPTR19_TO_16			0xf
#define BIT_FW_UPD_RDPTR19_TO_16(x)			(((x) & BIT_MASK_FW_UPD_RDPTR19_TO_16) << BIT_SHIFT_FW_UPD_RDPTR19_TO_16)
#define BITS_FW_UPD_RDPTR19_TO_16			(BIT_MASK_FW_UPD_RDPTR19_TO_16 << BIT_SHIFT_FW_UPD_RDPTR19_TO_16)
#define BIT_CLEAR_FW_UPD_RDPTR19_TO_16(x)		((x) & (~BITS_FW_UPD_RDPTR19_TO_16))
#define BIT_GET_FW_UPD_RDPTR19_TO_16(x)		(((x) >> BIT_SHIFT_FW_UPD_RDPTR19_TO_16) & BIT_MASK_FW_UPD_RDPTR19_TO_16)
#define BIT_SET_FW_UPD_RDPTR19_TO_16(x, v)		(BIT_CLEAR_FW_UPD_RDPTR19_TO_16(x) | BIT_FW_UPD_RDPTR19_TO_16(v))

#define BIT_RXDMA_REQ					BIT(19)
#define BIT_RW_RELEASE_EN				BIT(18)
#define BIT_RXDMA_IDLE					BIT(17)
#define BIT_RXPKT_RELEASE_POLL				BIT(16)

#define BIT_SHIFT_DMA_AGG_TO_V1			8
#define BIT_MASK_DMA_AGG_TO_V1				0xff
#define BIT_DMA_AGG_TO_V1(x)				(((x) & BIT_MASK_DMA_AGG_TO_V1) << BIT_SHIFT_DMA_AGG_TO_V1)
#define BITS_DMA_AGG_TO_V1				(BIT_MASK_DMA_AGG_TO_V1 << BIT_SHIFT_DMA_AGG_TO_V1)
#define BIT_CLEAR_DMA_AGG_TO_V1(x)			((x) & (~BITS_DMA_AGG_TO_V1))
#define BIT_GET_DMA_AGG_TO_V1(x)			(((x) >> BIT_SHIFT_DMA_AGG_TO_V1) & BIT_MASK_DMA_AGG_TO_V1)
#define BIT_SET_DMA_AGG_TO_V1(x, v)			(BIT_CLEAR_DMA_AGG_TO_V1(x) | BIT_DMA_AGG_TO_V1(v))

#define BIT_SHIFT_RXDMA_AGG_PG_TH			0
#define BIT_MASK_RXDMA_AGG_PG_TH			0xff
#define BIT_RXDMA_AGG_PG_TH(x)				(((x) & BIT_MASK_RXDMA_AGG_PG_TH) << BIT_SHIFT_RXDMA_AGG_PG_TH)
#define BITS_RXDMA_AGG_PG_TH				(BIT_MASK_RXDMA_AGG_PG_TH << BIT_SHIFT_RXDMA_AGG_PG_TH)
#define BIT_CLEAR_RXDMA_AGG_PG_TH(x)			((x) & (~BITS_RXDMA_AGG_PG_TH))
#define BIT_GET_RXDMA_AGG_PG_TH(x)			(((x) >> BIT_SHIFT_RXDMA_AGG_PG_TH) & BIT_MASK_RXDMA_AGG_PG_TH)
#define BIT_SET_RXDMA_AGG_PG_TH(x, v)			(BIT_CLEAR_RXDMA_AGG_PG_TH(x) | BIT_RXDMA_AGG_PG_TH(v))

#define BIT_SHIFT_FW_UPD_RDPTR				0
#define BIT_MASK_FW_UPD_RDPTR				0xffff
#define BIT_FW_UPD_RDPTR(x)				(((x) & BIT_MASK_FW_UPD_RDPTR) << BIT_SHIFT_FW_UPD_RDPTR)
#define BITS_FW_UPD_RDPTR				(BIT_MASK_FW_UPD_RDPTR << BIT_SHIFT_FW_UPD_RDPTR)
#define BIT_CLEAR_FW_UPD_RDPTR(x)			((x) & (~BITS_FW_UPD_RDPTR))
#define BIT_GET_FW_UPD_RDPTR(x)			(((x) >> BIT_SHIFT_FW_UPD_RDPTR) & BIT_MASK_FW_UPD_RDPTR)
#define BIT_SET_FW_UPD_RDPTR(x, v)			(BIT_CLEAR_FW_UPD_RDPTR(x) | BIT_FW_UPD_RDPTR(v))

/* 2 REG_RXDMA_STATUS			(Offset 0x0288) */

#define BIT_C2H_PKT_OVF				BIT(7)
#define BIT_AGG_CONFGI_ISSUE				BIT(6)
#define BIT_FW_POLL_ISSUE				BIT(5)
#define BIT_RX_DATA_UDN				BIT(4)
#define BIT_RX_SFF_UDN					BIT(3)
#define BIT_RX_SFF_OVF					BIT(2)
#define BIT_RXPKT_OVF					BIT(0)

/* 2 REG_RXDMA_DPR				(Offset 0x028C) */

#define BIT_SHIFT_RDE_DEBUG				0
#define BIT_MASK_RDE_DEBUG				0xffffffffL
#define BIT_RDE_DEBUG(x)				(((x) & BIT_MASK_RDE_DEBUG) << BIT_SHIFT_RDE_DEBUG)
#define BITS_RDE_DEBUG					(BIT_MASK_RDE_DEBUG << BIT_SHIFT_RDE_DEBUG)
#define BIT_CLEAR_RDE_DEBUG(x)				((x) & (~BITS_RDE_DEBUG))
#define BIT_GET_RDE_DEBUG(x)				(((x) >> BIT_SHIFT_RDE_DEBUG) & BIT_MASK_RDE_DEBUG)
#define BIT_SET_RDE_DEBUG(x, v)			(BIT_CLEAR_RDE_DEBUG(x) | BIT_RDE_DEBUG(v))

/* 2 REG_RXDMA_MODE				(Offset 0x0290) */

#define BIT_SHIFT_PKTNUM_TH_V2				24
#define BIT_MASK_PKTNUM_TH_V2				0x1f
#define BIT_PKTNUM_TH_V2(x)				(((x) & BIT_MASK_PKTNUM_TH_V2) << BIT_SHIFT_PKTNUM_TH_V2)
#define BITS_PKTNUM_TH_V2				(BIT_MASK_PKTNUM_TH_V2 << BIT_SHIFT_PKTNUM_TH_V2)
#define BIT_CLEAR_PKTNUM_TH_V2(x)			((x) & (~BITS_PKTNUM_TH_V2))
#define BIT_GET_PKTNUM_TH_V2(x)			(((x) >> BIT_SHIFT_PKTNUM_TH_V2) & BIT_MASK_PKTNUM_TH_V2)
#define BIT_SET_PKTNUM_TH_V2(x, v)			(BIT_CLEAR_PKTNUM_TH_V2(x) | BIT_PKTNUM_TH_V2(v))

#define BIT_TXBA_BREAK_USBAGG				BIT(23)

#define BIT_SHIFT_PKTLEN_PARA				16
#define BIT_MASK_PKTLEN_PARA				0x7
#define BIT_PKTLEN_PARA(x)				(((x) & BIT_MASK_PKTLEN_PARA) << BIT_SHIFT_PKTLEN_PARA)
#define BITS_PKTLEN_PARA				(BIT_MASK_PKTLEN_PARA << BIT_SHIFT_PKTLEN_PARA)
#define BIT_CLEAR_PKTLEN_PARA(x)			((x) & (~BITS_PKTLEN_PARA))
#define BIT_GET_PKTLEN_PARA(x)				(((x) >> BIT_SHIFT_PKTLEN_PARA) & BIT_MASK_PKTLEN_PARA)
#define BIT_SET_PKTLEN_PARA(x, v)			(BIT_CLEAR_PKTLEN_PARA(x) | BIT_PKTLEN_PARA(v))

#define BIT_RX_DBG_SEL					BIT(7)
#define BIT_EN_SPD					BIT(6)

#define BIT_SHIFT_BURST_SIZE				4
#define BIT_MASK_BURST_SIZE				0x3
#define BIT_BURST_SIZE(x)				(((x) & BIT_MASK_BURST_SIZE) << BIT_SHIFT_BURST_SIZE)
#define BITS_BURST_SIZE				(BIT_MASK_BURST_SIZE << BIT_SHIFT_BURST_SIZE)
#define BIT_CLEAR_BURST_SIZE(x)			((x) & (~BITS_BURST_SIZE))
#define BIT_GET_BURST_SIZE(x)				(((x) >> BIT_SHIFT_BURST_SIZE) & BIT_MASK_BURST_SIZE)
#define BIT_SET_BURST_SIZE(x, v)			(BIT_CLEAR_BURST_SIZE(x) | BIT_BURST_SIZE(v))

#define BIT_SHIFT_BURST_CNT				2
#define BIT_MASK_BURST_CNT				0x3
#define BIT_BURST_CNT(x)				(((x) & BIT_MASK_BURST_CNT) << BIT_SHIFT_BURST_CNT)
#define BITS_BURST_CNT					(BIT_MASK_BURST_CNT << BIT_SHIFT_BURST_CNT)
#define BIT_CLEAR_BURST_CNT(x)				((x) & (~BITS_BURST_CNT))
#define BIT_GET_BURST_CNT(x)				(((x) >> BIT_SHIFT_BURST_CNT) & BIT_MASK_BURST_CNT)
#define BIT_SET_BURST_CNT(x, v)			(BIT_CLEAR_BURST_CNT(x) | BIT_BURST_CNT(v))

#define BIT_DMA_MODE					BIT(1)

/* 2 REG_C2H_PKT				(Offset 0x0294) */

#define BIT_SHIFT_R_C2H_STR_ADDR_16_TO_19		24
#define BIT_MASK_R_C2H_STR_ADDR_16_TO_19		0xf
#define BIT_R_C2H_STR_ADDR_16_TO_19(x)			(((x) & BIT_MASK_R_C2H_STR_ADDR_16_TO_19) << BIT_SHIFT_R_C2H_STR_ADDR_16_TO_19)
#define BITS_R_C2H_STR_ADDR_16_TO_19			(BIT_MASK_R_C2H_STR_ADDR_16_TO_19 << BIT_SHIFT_R_C2H_STR_ADDR_16_TO_19)
#define BIT_CLEAR_R_C2H_STR_ADDR_16_TO_19(x)		((x) & (~BITS_R_C2H_STR_ADDR_16_TO_19))
#define BIT_GET_R_C2H_STR_ADDR_16_TO_19(x)		(((x) >> BIT_SHIFT_R_C2H_STR_ADDR_16_TO_19) & BIT_MASK_R_C2H_STR_ADDR_16_TO_19)
#define BIT_SET_R_C2H_STR_ADDR_16_TO_19(x, v)		(BIT_CLEAR_R_C2H_STR_ADDR_16_TO_19(x) | BIT_R_C2H_STR_ADDR_16_TO_19(v))

#define BIT_R_C2H_PKT_REQ				BIT(16)

#define BIT_SHIFT_R_C2H_STR_ADDR			0
#define BIT_MASK_R_C2H_STR_ADDR			0xffff
#define BIT_R_C2H_STR_ADDR(x)				(((x) & BIT_MASK_R_C2H_STR_ADDR) << BIT_SHIFT_R_C2H_STR_ADDR)
#define BITS_R_C2H_STR_ADDR				(BIT_MASK_R_C2H_STR_ADDR << BIT_SHIFT_R_C2H_STR_ADDR)
#define BIT_CLEAR_R_C2H_STR_ADDR(x)			((x) & (~BITS_R_C2H_STR_ADDR))
#define BIT_GET_R_C2H_STR_ADDR(x)			(((x) >> BIT_SHIFT_R_C2H_STR_ADDR) & BIT_MASK_R_C2H_STR_ADDR)
#define BIT_SET_R_C2H_STR_ADDR(x, v)			(BIT_CLEAR_R_C2H_STR_ADDR(x) | BIT_R_C2H_STR_ADDR(v))

/* 2 REG_FWFF_C2H				(Offset 0x0298) */

#define BIT_SHIFT_C2H_DMA_ADDR				0
#define BIT_MASK_C2H_DMA_ADDR				0x3ffff
#define BIT_C2H_DMA_ADDR(x)				(((x) & BIT_MASK_C2H_DMA_ADDR) << BIT_SHIFT_C2H_DMA_ADDR)
#define BITS_C2H_DMA_ADDR				(BIT_MASK_C2H_DMA_ADDR << BIT_SHIFT_C2H_DMA_ADDR)
#define BIT_CLEAR_C2H_DMA_ADDR(x)			((x) & (~BITS_C2H_DMA_ADDR))
#define BIT_GET_C2H_DMA_ADDR(x)			(((x) >> BIT_SHIFT_C2H_DMA_ADDR) & BIT_MASK_C2H_DMA_ADDR)
#define BIT_SET_C2H_DMA_ADDR(x, v)			(BIT_CLEAR_C2H_DMA_ADDR(x) | BIT_C2H_DMA_ADDR(v))

/* 2 REG_FWFF_CTRL				(Offset 0x029C) */

#define BIT_FWFF_DMAPKT_REQ				BIT(31)

#define BIT_SHIFT_FWFF_DMA_PKT_NUM			16
#define BIT_MASK_FWFF_DMA_PKT_NUM			0xff
#define BIT_FWFF_DMA_PKT_NUM(x)			(((x) & BIT_MASK_FWFF_DMA_PKT_NUM) << BIT_SHIFT_FWFF_DMA_PKT_NUM)
#define BITS_FWFF_DMA_PKT_NUM				(BIT_MASK_FWFF_DMA_PKT_NUM << BIT_SHIFT_FWFF_DMA_PKT_NUM)
#define BIT_CLEAR_FWFF_DMA_PKT_NUM(x)			((x) & (~BITS_FWFF_DMA_PKT_NUM))
#define BIT_GET_FWFF_DMA_PKT_NUM(x)			(((x) >> BIT_SHIFT_FWFF_DMA_PKT_NUM) & BIT_MASK_FWFF_DMA_PKT_NUM)
#define BIT_SET_FWFF_DMA_PKT_NUM(x, v)			(BIT_CLEAR_FWFF_DMA_PKT_NUM(x) | BIT_FWFF_DMA_PKT_NUM(v))

#define BIT_SHIFT_FWFF_STR_ADDR			0
#define BIT_MASK_FWFF_STR_ADDR				0xffff
#define BIT_FWFF_STR_ADDR(x)				(((x) & BIT_MASK_FWFF_STR_ADDR) << BIT_SHIFT_FWFF_STR_ADDR)
#define BITS_FWFF_STR_ADDR				(BIT_MASK_FWFF_STR_ADDR << BIT_SHIFT_FWFF_STR_ADDR)
#define BIT_CLEAR_FWFF_STR_ADDR(x)			((x) & (~BITS_FWFF_STR_ADDR))
#define BIT_GET_FWFF_STR_ADDR(x)			(((x) >> BIT_SHIFT_FWFF_STR_ADDR) & BIT_MASK_FWFF_STR_ADDR)
#define BIT_SET_FWFF_STR_ADDR(x, v)			(BIT_CLEAR_FWFF_STR_ADDR(x) | BIT_FWFF_STR_ADDR(v))

/* 2 REG_FWFF_PKT_INFO			(Offset 0x02A0) */

#define BIT_SHIFT_FWFF_PKT_QUEUED			16
#define BIT_MASK_FWFF_PKT_QUEUED			0xff
#define BIT_FWFF_PKT_QUEUED(x)				(((x) & BIT_MASK_FWFF_PKT_QUEUED) << BIT_SHIFT_FWFF_PKT_QUEUED)
#define BITS_FWFF_PKT_QUEUED				(BIT_MASK_FWFF_PKT_QUEUED << BIT_SHIFT_FWFF_PKT_QUEUED)
#define BIT_CLEAR_FWFF_PKT_QUEUED(x)			((x) & (~BITS_FWFF_PKT_QUEUED))
#define BIT_GET_FWFF_PKT_QUEUED(x)			(((x) >> BIT_SHIFT_FWFF_PKT_QUEUED) & BIT_MASK_FWFF_PKT_QUEUED)
#define BIT_SET_FWFF_PKT_QUEUED(x, v)			(BIT_CLEAR_FWFF_PKT_QUEUED(x) | BIT_FWFF_PKT_QUEUED(v))

#define BIT_SHIFT_FWFF_PKT_STR_ADDR_V2			0
#define BIT_MASK_FWFF_PKT_STR_ADDR_V2			0x3fff
#define BIT_FWFF_PKT_STR_ADDR_V2(x)			(((x) & BIT_MASK_FWFF_PKT_STR_ADDR_V2) << BIT_SHIFT_FWFF_PKT_STR_ADDR_V2)
#define BITS_FWFF_PKT_STR_ADDR_V2			(BIT_MASK_FWFF_PKT_STR_ADDR_V2 << BIT_SHIFT_FWFF_PKT_STR_ADDR_V2)
#define BIT_CLEAR_FWFF_PKT_STR_ADDR_V2(x)		((x) & (~BITS_FWFF_PKT_STR_ADDR_V2))
#define BIT_GET_FWFF_PKT_STR_ADDR_V2(x)		(((x) >> BIT_SHIFT_FWFF_PKT_STR_ADDR_V2) & BIT_MASK_FWFF_PKT_STR_ADDR_V2)
#define BIT_SET_FWFF_PKT_STR_ADDR_V2(x, v)		(BIT_CLEAR_FWFF_PKT_STR_ADDR_V2(x) | BIT_FWFF_PKT_STR_ADDR_V2(v))

/* 2 REG_RXPKTNUM				(Offset 0x02B0) */

#define BIT_SHIFT_PKT_NUM_WOL_V1			16
#define BIT_MASK_PKT_NUM_WOL_V1			0xffff
#define BIT_PKT_NUM_WOL_V1(x)				(((x) & BIT_MASK_PKT_NUM_WOL_V1) << BIT_SHIFT_PKT_NUM_WOL_V1)
#define BITS_PKT_NUM_WOL_V1				(BIT_MASK_PKT_NUM_WOL_V1 << BIT_SHIFT_PKT_NUM_WOL_V1)
#define BIT_CLEAR_PKT_NUM_WOL_V1(x)			((x) & (~BITS_PKT_NUM_WOL_V1))
#define BIT_GET_PKT_NUM_WOL_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_WOL_V1) & BIT_MASK_PKT_NUM_WOL_V1)
#define BIT_SET_PKT_NUM_WOL_V1(x, v)			(BIT_CLEAR_PKT_NUM_WOL_V1(x) | BIT_PKT_NUM_WOL_V1(v))

#define BIT_SHIFT_RXPKT_NUM_V1				0
#define BIT_MASK_RXPKT_NUM_V1				0xffff
#define BIT_RXPKT_NUM_V1(x)				(((x) & BIT_MASK_RXPKT_NUM_V1) << BIT_SHIFT_RXPKT_NUM_V1)
#define BITS_RXPKT_NUM_V1				(BIT_MASK_RXPKT_NUM_V1 << BIT_SHIFT_RXPKT_NUM_V1)
#define BIT_CLEAR_RXPKT_NUM_V1(x)			((x) & (~BITS_RXPKT_NUM_V1))
#define BIT_GET_RXPKT_NUM_V1(x)			(((x) >> BIT_SHIFT_RXPKT_NUM_V1) & BIT_MASK_RXPKT_NUM_V1)
#define BIT_SET_RXPKT_NUM_V1(x, v)			(BIT_CLEAR_RXPKT_NUM_V1(x) | BIT_RXPKT_NUM_V1(v))

#define BIT_SHIFT_RXPKT_NUM_TH				0
#define BIT_MASK_RXPKT_NUM_TH				0xff
#define BIT_RXPKT_NUM_TH(x)				(((x) & BIT_MASK_RXPKT_NUM_TH) << BIT_SHIFT_RXPKT_NUM_TH)
#define BITS_RXPKT_NUM_TH				(BIT_MASK_RXPKT_NUM_TH << BIT_SHIFT_RXPKT_NUM_TH)
#define BIT_CLEAR_RXPKT_NUM_TH(x)			((x) & (~BITS_RXPKT_NUM_TH))
#define BIT_GET_RXPKT_NUM_TH(x)			(((x) >> BIT_SHIFT_RXPKT_NUM_TH) & BIT_MASK_RXPKT_NUM_TH)
#define BIT_SET_RXPKT_NUM_TH(x, v)			(BIT_CLEAR_RXPKT_NUM_TH(x) | BIT_RXPKT_NUM_TH(v))

/* 2 REG_FW_MSG1				(Offset 0x02E0) */

#define BIT_SHIFT_FW_MSG_REG1				0
#define BIT_MASK_FW_MSG_REG1				0xffffffffL
#define BIT_FW_MSG_REG1(x)				(((x) & BIT_MASK_FW_MSG_REG1) << BIT_SHIFT_FW_MSG_REG1)
#define BITS_FW_MSG_REG1				(BIT_MASK_FW_MSG_REG1 << BIT_SHIFT_FW_MSG_REG1)
#define BIT_CLEAR_FW_MSG_REG1(x)			((x) & (~BITS_FW_MSG_REG1))
#define BIT_GET_FW_MSG_REG1(x)				(((x) >> BIT_SHIFT_FW_MSG_REG1) & BIT_MASK_FW_MSG_REG1)
#define BIT_SET_FW_MSG_REG1(x, v)			(BIT_CLEAR_FW_MSG_REG1(x) | BIT_FW_MSG_REG1(v))

/* 2 REG_FW_MSG2				(Offset 0x02E4) */

#define BIT_SHIFT_FW_MSG_REG2				0
#define BIT_MASK_FW_MSG_REG2				0xffffffffL
#define BIT_FW_MSG_REG2(x)				(((x) & BIT_MASK_FW_MSG_REG2) << BIT_SHIFT_FW_MSG_REG2)
#define BITS_FW_MSG_REG2				(BIT_MASK_FW_MSG_REG2 << BIT_SHIFT_FW_MSG_REG2)
#define BIT_CLEAR_FW_MSG_REG2(x)			((x) & (~BITS_FW_MSG_REG2))
#define BIT_GET_FW_MSG_REG2(x)				(((x) >> BIT_SHIFT_FW_MSG_REG2) & BIT_MASK_FW_MSG_REG2)
#define BIT_SET_FW_MSG_REG2(x, v)			(BIT_CLEAR_FW_MSG_REG2(x) | BIT_FW_MSG_REG2(v))

/* 2 REG_FW_MSG3				(Offset 0x02E8) */

#define BIT_SHIFT_FW_MSG_REG3				0
#define BIT_MASK_FW_MSG_REG3				0xffffffffL
#define BIT_FW_MSG_REG3(x)				(((x) & BIT_MASK_FW_MSG_REG3) << BIT_SHIFT_FW_MSG_REG3)
#define BITS_FW_MSG_REG3				(BIT_MASK_FW_MSG_REG3 << BIT_SHIFT_FW_MSG_REG3)
#define BIT_CLEAR_FW_MSG_REG3(x)			((x) & (~BITS_FW_MSG_REG3))
#define BIT_GET_FW_MSG_REG3(x)				(((x) >> BIT_SHIFT_FW_MSG_REG3) & BIT_MASK_FW_MSG_REG3)
#define BIT_SET_FW_MSG_REG3(x, v)			(BIT_CLEAR_FW_MSG_REG3(x) | BIT_FW_MSG_REG3(v))

/* 2 REG_FW_MSG4				(Offset 0x02EC) */

#define BIT_SHIFT_FW_MSG_REG4				0
#define BIT_MASK_FW_MSG_REG4				0xffffffffL
#define BIT_FW_MSG_REG4(x)				(((x) & BIT_MASK_FW_MSG_REG4) << BIT_SHIFT_FW_MSG_REG4)
#define BITS_FW_MSG_REG4				(BIT_MASK_FW_MSG_REG4 << BIT_SHIFT_FW_MSG_REG4)
#define BIT_CLEAR_FW_MSG_REG4(x)			((x) & (~BITS_FW_MSG_REG4))
#define BIT_GET_FW_MSG_REG4(x)				(((x) >> BIT_SHIFT_FW_MSG_REG4) & BIT_MASK_FW_MSG_REG4)
#define BIT_SET_FW_MSG_REG4(x, v)			(BIT_CLEAR_FW_MSG_REG4(x) | BIT_FW_MSG_REG4(v))

/* 2 REG_AXIDMA_CTRL				(Offset 0x0300) */

#define BIT_SHIFT_AXI_MAX_RXDMA			28
#define BIT_MASK_AXI_MAX_RXDMA				0x3
#define BIT_AXI_MAX_RXDMA(x)				(((x) & BIT_MASK_AXI_MAX_RXDMA) << BIT_SHIFT_AXI_MAX_RXDMA)
#define BITS_AXI_MAX_RXDMA				(BIT_MASK_AXI_MAX_RXDMA << BIT_SHIFT_AXI_MAX_RXDMA)
#define BIT_CLEAR_AXI_MAX_RXDMA(x)			((x) & (~BITS_AXI_MAX_RXDMA))
#define BIT_GET_AXI_MAX_RXDMA(x)			(((x) >> BIT_SHIFT_AXI_MAX_RXDMA) & BIT_MASK_AXI_MAX_RXDMA)
#define BIT_SET_AXI_MAX_RXDMA(x, v)			(BIT_CLEAR_AXI_MAX_RXDMA(x) | BIT_AXI_MAX_RXDMA(v))

#define BIT_SHIFT_AXI_MAX_TXDMA			24
#define BIT_MASK_AXI_MAX_TXDMA				0x3
#define BIT_AXI_MAX_TXDMA(x)				(((x) & BIT_MASK_AXI_MAX_TXDMA) << BIT_SHIFT_AXI_MAX_TXDMA)
#define BITS_AXI_MAX_TXDMA				(BIT_MASK_AXI_MAX_TXDMA << BIT_SHIFT_AXI_MAX_TXDMA)
#define BIT_CLEAR_AXI_MAX_TXDMA(x)			((x) & (~BITS_AXI_MAX_TXDMA))
#define BIT_GET_AXI_MAX_TXDMA(x)			(((x) >> BIT_SHIFT_AXI_MAX_TXDMA) & BIT_MASK_AXI_MAX_TXDMA)
#define BIT_SET_AXI_MAX_TXDMA(x, v)			(BIT_CLEAR_AXI_MAX_TXDMA(x) | BIT_AXI_MAX_TXDMA(v))

#define BIT_RX_CLOSE_EN				BIT(15)
#define BIT_STOP_BCNQ					BIT(14)
#define BIT_STOP_MGQ					BIT(13)
#define BIT_STOP_VOQ					BIT(12)
#define BIT_STOP_VIQ					BIT(11)
#define BIT_STOP_BEQ					BIT(10)
#define BIT_STOP_BKQ					BIT(9)
#define BIT_STOP_RXQ					BIT(8)
#define BIT_STOP_HI7Q					BIT(7)
#define BIT_STOP_HI6Q					BIT(6)
#define BIT_STOP_HI5Q					BIT(5)
#define BIT_STOP_HI4Q					BIT(4)
#define BIT_STOP_HI3Q					BIT(3)
#define BIT_STOP_HI2Q					BIT(2)
#define BIT_STOP_HI1Q					BIT(1)
#define BIT_STOP_HI0Q					BIT(0)

/* 2 REG_INT_MIG				(Offset 0x0304) */

#define BIT_SHIFT_TXTTIMER_MATCH_NUM			28
#define BIT_MASK_TXTTIMER_MATCH_NUM			0xf
#define BIT_TXTTIMER_MATCH_NUM(x)			(((x) & BIT_MASK_TXTTIMER_MATCH_NUM) << BIT_SHIFT_TXTTIMER_MATCH_NUM)
#define BITS_TXTTIMER_MATCH_NUM			(BIT_MASK_TXTTIMER_MATCH_NUM << BIT_SHIFT_TXTTIMER_MATCH_NUM)
#define BIT_CLEAR_TXTTIMER_MATCH_NUM(x)		((x) & (~BITS_TXTTIMER_MATCH_NUM))
#define BIT_GET_TXTTIMER_MATCH_NUM(x)			(((x) >> BIT_SHIFT_TXTTIMER_MATCH_NUM) & BIT_MASK_TXTTIMER_MATCH_NUM)
#define BIT_SET_TXTTIMER_MATCH_NUM(x, v)		(BIT_CLEAR_TXTTIMER_MATCH_NUM(x) | BIT_TXTTIMER_MATCH_NUM(v))

#define BIT_SHIFT_TXPKT_NUM_MATCH			24
#define BIT_MASK_TXPKT_NUM_MATCH			0xf
#define BIT_TXPKT_NUM_MATCH(x)				(((x) & BIT_MASK_TXPKT_NUM_MATCH) << BIT_SHIFT_TXPKT_NUM_MATCH)
#define BITS_TXPKT_NUM_MATCH				(BIT_MASK_TXPKT_NUM_MATCH << BIT_SHIFT_TXPKT_NUM_MATCH)
#define BIT_CLEAR_TXPKT_NUM_MATCH(x)			((x) & (~BITS_TXPKT_NUM_MATCH))
#define BIT_GET_TXPKT_NUM_MATCH(x)			(((x) >> BIT_SHIFT_TXPKT_NUM_MATCH) & BIT_MASK_TXPKT_NUM_MATCH)
#define BIT_SET_TXPKT_NUM_MATCH(x, v)			(BIT_CLEAR_TXPKT_NUM_MATCH(x) | BIT_TXPKT_NUM_MATCH(v))

#define BIT_SHIFT_RXTTIMER_MATCH_NUM			20
#define BIT_MASK_RXTTIMER_MATCH_NUM			0xf
#define BIT_RXTTIMER_MATCH_NUM(x)			(((x) & BIT_MASK_RXTTIMER_MATCH_NUM) << BIT_SHIFT_RXTTIMER_MATCH_NUM)
#define BITS_RXTTIMER_MATCH_NUM			(BIT_MASK_RXTTIMER_MATCH_NUM << BIT_SHIFT_RXTTIMER_MATCH_NUM)
#define BIT_CLEAR_RXTTIMER_MATCH_NUM(x)		((x) & (~BITS_RXTTIMER_MATCH_NUM))
#define BIT_GET_RXTTIMER_MATCH_NUM(x)			(((x) >> BIT_SHIFT_RXTTIMER_MATCH_NUM) & BIT_MASK_RXTTIMER_MATCH_NUM)
#define BIT_SET_RXTTIMER_MATCH_NUM(x, v)		(BIT_CLEAR_RXTTIMER_MATCH_NUM(x) | BIT_RXTTIMER_MATCH_NUM(v))

#define BIT_SHIFT_RXPKT_NUM_MATCH			16
#define BIT_MASK_RXPKT_NUM_MATCH			0xf
#define BIT_RXPKT_NUM_MATCH(x)				(((x) & BIT_MASK_RXPKT_NUM_MATCH) << BIT_SHIFT_RXPKT_NUM_MATCH)
#define BITS_RXPKT_NUM_MATCH				(BIT_MASK_RXPKT_NUM_MATCH << BIT_SHIFT_RXPKT_NUM_MATCH)
#define BIT_CLEAR_RXPKT_NUM_MATCH(x)			((x) & (~BITS_RXPKT_NUM_MATCH))
#define BIT_GET_RXPKT_NUM_MATCH(x)			(((x) >> BIT_SHIFT_RXPKT_NUM_MATCH) & BIT_MASK_RXPKT_NUM_MATCH)
#define BIT_SET_RXPKT_NUM_MATCH(x, v)			(BIT_CLEAR_RXPKT_NUM_MATCH(x) | BIT_RXPKT_NUM_MATCH(v))

#define BIT_SHIFT_MIGRATE_TIMER			0
#define BIT_MASK_MIGRATE_TIMER				0xffff
#define BIT_MIGRATE_TIMER(x)				(((x) & BIT_MASK_MIGRATE_TIMER) << BIT_SHIFT_MIGRATE_TIMER)
#define BITS_MIGRATE_TIMER				(BIT_MASK_MIGRATE_TIMER << BIT_SHIFT_MIGRATE_TIMER)
#define BIT_CLEAR_MIGRATE_TIMER(x)			((x) & (~BITS_MIGRATE_TIMER))
#define BIT_GET_MIGRATE_TIMER(x)			(((x) >> BIT_SHIFT_MIGRATE_TIMER) & BIT_MASK_MIGRATE_TIMER)
#define BIT_SET_MIGRATE_TIMER(x, v)			(BIT_CLEAR_MIGRATE_TIMER(x) | BIT_MIGRATE_TIMER(v))

/* 2 REG_BCNQ_TXBD_DESA			(Offset 0x0308) */

#define BIT_SHIFT_BCNQ_TXBD_DESA			0
#define BIT_MASK_BCNQ_TXBD_DESA			0xffffffffffffffffL
#define BIT_BCNQ_TXBD_DESA(x)				(((x) & BIT_MASK_BCNQ_TXBD_DESA) << BIT_SHIFT_BCNQ_TXBD_DESA)
#define BITS_BCNQ_TXBD_DESA				(BIT_MASK_BCNQ_TXBD_DESA << BIT_SHIFT_BCNQ_TXBD_DESA)
#define BIT_CLEAR_BCNQ_TXBD_DESA(x)			((x) & (~BITS_BCNQ_TXBD_DESA))
#define BIT_GET_BCNQ_TXBD_DESA(x)			(((x) >> BIT_SHIFT_BCNQ_TXBD_DESA) & BIT_MASK_BCNQ_TXBD_DESA)
#define BIT_SET_BCNQ_TXBD_DESA(x, v)			(BIT_CLEAR_BCNQ_TXBD_DESA(x) | BIT_BCNQ_TXBD_DESA(v))

/* 2 REG_MGQ_TXBD_DESA			(Offset 0x0310) */

#define BIT_SHIFT_MGQ_TXBD_DESA			0
#define BIT_MASK_MGQ_TXBD_DESA				0xffffffffffffffffL
#define BIT_MGQ_TXBD_DESA(x)				(((x) & BIT_MASK_MGQ_TXBD_DESA) << BIT_SHIFT_MGQ_TXBD_DESA)
#define BITS_MGQ_TXBD_DESA				(BIT_MASK_MGQ_TXBD_DESA << BIT_SHIFT_MGQ_TXBD_DESA)
#define BIT_CLEAR_MGQ_TXBD_DESA(x)			((x) & (~BITS_MGQ_TXBD_DESA))
#define BIT_GET_MGQ_TXBD_DESA(x)			(((x) >> BIT_SHIFT_MGQ_TXBD_DESA) & BIT_MASK_MGQ_TXBD_DESA)
#define BIT_SET_MGQ_TXBD_DESA(x, v)			(BIT_CLEAR_MGQ_TXBD_DESA(x) | BIT_MGQ_TXBD_DESA(v))

/* 2 REG_VOQ_TXBD_DESA			(Offset 0x0318) */

#define BIT_SHIFT_VOQ_TXBD_DESA			0
#define BIT_MASK_VOQ_TXBD_DESA				0xffffffffffffffffL
#define BIT_VOQ_TXBD_DESA(x)				(((x) & BIT_MASK_VOQ_TXBD_DESA) << BIT_SHIFT_VOQ_TXBD_DESA)
#define BITS_VOQ_TXBD_DESA				(BIT_MASK_VOQ_TXBD_DESA << BIT_SHIFT_VOQ_TXBD_DESA)
#define BIT_CLEAR_VOQ_TXBD_DESA(x)			((x) & (~BITS_VOQ_TXBD_DESA))
#define BIT_GET_VOQ_TXBD_DESA(x)			(((x) >> BIT_SHIFT_VOQ_TXBD_DESA) & BIT_MASK_VOQ_TXBD_DESA)
#define BIT_SET_VOQ_TXBD_DESA(x, v)			(BIT_CLEAR_VOQ_TXBD_DESA(x) | BIT_VOQ_TXBD_DESA(v))

/* 2 REG_VIQ_TXBD_DESA			(Offset 0x0320) */

#define BIT_SHIFT_VIQ_TXBD_DESA			0
#define BIT_MASK_VIQ_TXBD_DESA				0xffffffffffffffffL
#define BIT_VIQ_TXBD_DESA(x)				(((x) & BIT_MASK_VIQ_TXBD_DESA) << BIT_SHIFT_VIQ_TXBD_DESA)
#define BITS_VIQ_TXBD_DESA				(BIT_MASK_VIQ_TXBD_DESA << BIT_SHIFT_VIQ_TXBD_DESA)
#define BIT_CLEAR_VIQ_TXBD_DESA(x)			((x) & (~BITS_VIQ_TXBD_DESA))
#define BIT_GET_VIQ_TXBD_DESA(x)			(((x) >> BIT_SHIFT_VIQ_TXBD_DESA) & BIT_MASK_VIQ_TXBD_DESA)
#define BIT_SET_VIQ_TXBD_DESA(x, v)			(BIT_CLEAR_VIQ_TXBD_DESA(x) | BIT_VIQ_TXBD_DESA(v))

/* 2 REG_BEQ_TXBD_DESA			(Offset 0x0328) */

#define BIT_SHIFT_BEQ_TXBD_DESA			0
#define BIT_MASK_BEQ_TXBD_DESA				0xffffffffffffffffL
#define BIT_BEQ_TXBD_DESA(x)				(((x) & BIT_MASK_BEQ_TXBD_DESA) << BIT_SHIFT_BEQ_TXBD_DESA)
#define BITS_BEQ_TXBD_DESA				(BIT_MASK_BEQ_TXBD_DESA << BIT_SHIFT_BEQ_TXBD_DESA)
#define BIT_CLEAR_BEQ_TXBD_DESA(x)			((x) & (~BITS_BEQ_TXBD_DESA))
#define BIT_GET_BEQ_TXBD_DESA(x)			(((x) >> BIT_SHIFT_BEQ_TXBD_DESA) & BIT_MASK_BEQ_TXBD_DESA)
#define BIT_SET_BEQ_TXBD_DESA(x, v)			(BIT_CLEAR_BEQ_TXBD_DESA(x) | BIT_BEQ_TXBD_DESA(v))

/* 2 REG_BKQ_TXBD_DESA			(Offset 0x0330) */

#define BIT_SHIFT_BKQ_TXBD_DESA			0
#define BIT_MASK_BKQ_TXBD_DESA				0xffffffffffffffffL
#define BIT_BKQ_TXBD_DESA(x)				(((x) & BIT_MASK_BKQ_TXBD_DESA) << BIT_SHIFT_BKQ_TXBD_DESA)
#define BITS_BKQ_TXBD_DESA				(BIT_MASK_BKQ_TXBD_DESA << BIT_SHIFT_BKQ_TXBD_DESA)
#define BIT_CLEAR_BKQ_TXBD_DESA(x)			((x) & (~BITS_BKQ_TXBD_DESA))
#define BIT_GET_BKQ_TXBD_DESA(x)			(((x) >> BIT_SHIFT_BKQ_TXBD_DESA) & BIT_MASK_BKQ_TXBD_DESA)
#define BIT_SET_BKQ_TXBD_DESA(x, v)			(BIT_CLEAR_BKQ_TXBD_DESA(x) | BIT_BKQ_TXBD_DESA(v))

/* 2 REG_RXQ_RXBD_DESA			(Offset 0x0338) */

#define BIT_SHIFT_RXQ_RXBD_DESA			0
#define BIT_MASK_RXQ_RXBD_DESA				0xffffffffffffffffL
#define BIT_RXQ_RXBD_DESA(x)				(((x) & BIT_MASK_RXQ_RXBD_DESA) << BIT_SHIFT_RXQ_RXBD_DESA)
#define BITS_RXQ_RXBD_DESA				(BIT_MASK_RXQ_RXBD_DESA << BIT_SHIFT_RXQ_RXBD_DESA)
#define BIT_CLEAR_RXQ_RXBD_DESA(x)			((x) & (~BITS_RXQ_RXBD_DESA))
#define BIT_GET_RXQ_RXBD_DESA(x)			(((x) >> BIT_SHIFT_RXQ_RXBD_DESA) & BIT_MASK_RXQ_RXBD_DESA)
#define BIT_SET_RXQ_RXBD_DESA(x, v)			(BIT_CLEAR_RXQ_RXBD_DESA(x) | BIT_RXQ_RXBD_DESA(v))

/* 2 REG_HI0Q_TXBD_DESA			(Offset 0x0340) */

#define BIT_SHIFT_HI0Q_TXBD_DESA			0
#define BIT_MASK_HI0Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI0Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI0Q_TXBD_DESA) << BIT_SHIFT_HI0Q_TXBD_DESA)
#define BITS_HI0Q_TXBD_DESA				(BIT_MASK_HI0Q_TXBD_DESA << BIT_SHIFT_HI0Q_TXBD_DESA)
#define BIT_CLEAR_HI0Q_TXBD_DESA(x)			((x) & (~BITS_HI0Q_TXBD_DESA))
#define BIT_GET_HI0Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI0Q_TXBD_DESA) & BIT_MASK_HI0Q_TXBD_DESA)
#define BIT_SET_HI0Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI0Q_TXBD_DESA(x) | BIT_HI0Q_TXBD_DESA(v))

/* 2 REG_HI1Q_TXBD_DESA			(Offset 0x0348) */

#define BIT_SHIFT_HI1Q_TXBD_DESA			0
#define BIT_MASK_HI1Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI1Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI1Q_TXBD_DESA) << BIT_SHIFT_HI1Q_TXBD_DESA)
#define BITS_HI1Q_TXBD_DESA				(BIT_MASK_HI1Q_TXBD_DESA << BIT_SHIFT_HI1Q_TXBD_DESA)
#define BIT_CLEAR_HI1Q_TXBD_DESA(x)			((x) & (~BITS_HI1Q_TXBD_DESA))
#define BIT_GET_HI1Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI1Q_TXBD_DESA) & BIT_MASK_HI1Q_TXBD_DESA)
#define BIT_SET_HI1Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI1Q_TXBD_DESA(x) | BIT_HI1Q_TXBD_DESA(v))

/* 2 REG_HI2Q_TXBD_DESA			(Offset 0x0350) */

#define BIT_SHIFT_HI2Q_TXBD_DESA			0
#define BIT_MASK_HI2Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI2Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI2Q_TXBD_DESA) << BIT_SHIFT_HI2Q_TXBD_DESA)
#define BITS_HI2Q_TXBD_DESA				(BIT_MASK_HI2Q_TXBD_DESA << BIT_SHIFT_HI2Q_TXBD_DESA)
#define BIT_CLEAR_HI2Q_TXBD_DESA(x)			((x) & (~BITS_HI2Q_TXBD_DESA))
#define BIT_GET_HI2Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI2Q_TXBD_DESA) & BIT_MASK_HI2Q_TXBD_DESA)
#define BIT_SET_HI2Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI2Q_TXBD_DESA(x) | BIT_HI2Q_TXBD_DESA(v))

/* 2 REG_HI3Q_TXBD_DESA			(Offset 0x0358) */

#define BIT_SHIFT_HI3Q_TXBD_DESA			0
#define BIT_MASK_HI3Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI3Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI3Q_TXBD_DESA) << BIT_SHIFT_HI3Q_TXBD_DESA)
#define BITS_HI3Q_TXBD_DESA				(BIT_MASK_HI3Q_TXBD_DESA << BIT_SHIFT_HI3Q_TXBD_DESA)
#define BIT_CLEAR_HI3Q_TXBD_DESA(x)			((x) & (~BITS_HI3Q_TXBD_DESA))
#define BIT_GET_HI3Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI3Q_TXBD_DESA) & BIT_MASK_HI3Q_TXBD_DESA)
#define BIT_SET_HI3Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI3Q_TXBD_DESA(x) | BIT_HI3Q_TXBD_DESA(v))

/* 2 REG_HI4Q_TXBD_DESA			(Offset 0x0360) */

#define BIT_SHIFT_HI4Q_TXBD_DESA			0
#define BIT_MASK_HI4Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI4Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI4Q_TXBD_DESA) << BIT_SHIFT_HI4Q_TXBD_DESA)
#define BITS_HI4Q_TXBD_DESA				(BIT_MASK_HI4Q_TXBD_DESA << BIT_SHIFT_HI4Q_TXBD_DESA)
#define BIT_CLEAR_HI4Q_TXBD_DESA(x)			((x) & (~BITS_HI4Q_TXBD_DESA))
#define BIT_GET_HI4Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI4Q_TXBD_DESA) & BIT_MASK_HI4Q_TXBD_DESA)
#define BIT_SET_HI4Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI4Q_TXBD_DESA(x) | BIT_HI4Q_TXBD_DESA(v))

/* 2 REG_HI5Q_TXBD_DESA			(Offset 0x0368) */

#define BIT_SHIFT_HI5Q_TXBD_DESA			0
#define BIT_MASK_HI5Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI5Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI5Q_TXBD_DESA) << BIT_SHIFT_HI5Q_TXBD_DESA)
#define BITS_HI5Q_TXBD_DESA				(BIT_MASK_HI5Q_TXBD_DESA << BIT_SHIFT_HI5Q_TXBD_DESA)
#define BIT_CLEAR_HI5Q_TXBD_DESA(x)			((x) & (~BITS_HI5Q_TXBD_DESA))
#define BIT_GET_HI5Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI5Q_TXBD_DESA) & BIT_MASK_HI5Q_TXBD_DESA)
#define BIT_SET_HI5Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI5Q_TXBD_DESA(x) | BIT_HI5Q_TXBD_DESA(v))

/* 2 REG_HI6Q_TXBD_DESA			(Offset 0x0370) */

#define BIT_SHIFT_HI6Q_TXBD_DESA			0
#define BIT_MASK_HI6Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI6Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI6Q_TXBD_DESA) << BIT_SHIFT_HI6Q_TXBD_DESA)
#define BITS_HI6Q_TXBD_DESA				(BIT_MASK_HI6Q_TXBD_DESA << BIT_SHIFT_HI6Q_TXBD_DESA)
#define BIT_CLEAR_HI6Q_TXBD_DESA(x)			((x) & (~BITS_HI6Q_TXBD_DESA))
#define BIT_GET_HI6Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI6Q_TXBD_DESA) & BIT_MASK_HI6Q_TXBD_DESA)
#define BIT_SET_HI6Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI6Q_TXBD_DESA(x) | BIT_HI6Q_TXBD_DESA(v))

/* 2 REG_HI7Q_TXBD_DESA			(Offset 0x0378) */

#define BIT_SHIFT_HI7Q_TXBD_DESA			0
#define BIT_MASK_HI7Q_TXBD_DESA			0xffffffffffffffffL
#define BIT_HI7Q_TXBD_DESA(x)				(((x) & BIT_MASK_HI7Q_TXBD_DESA) << BIT_SHIFT_HI7Q_TXBD_DESA)
#define BITS_HI7Q_TXBD_DESA				(BIT_MASK_HI7Q_TXBD_DESA << BIT_SHIFT_HI7Q_TXBD_DESA)
#define BIT_CLEAR_HI7Q_TXBD_DESA(x)			((x) & (~BITS_HI7Q_TXBD_DESA))
#define BIT_GET_HI7Q_TXBD_DESA(x)			(((x) >> BIT_SHIFT_HI7Q_TXBD_DESA) & BIT_MASK_HI7Q_TXBD_DESA)
#define BIT_SET_HI7Q_TXBD_DESA(x, v)			(BIT_CLEAR_HI7Q_TXBD_DESA(x) | BIT_HI7Q_TXBD_DESA(v))

/* 2 REG_MGQ_TXBD_NUM			(Offset 0x0380) */

#define BIT_PCIE_MGQ_FLAG				BIT(14)

#define BIT_SHIFT_MGQ_DESC_MODE			12
#define BIT_MASK_MGQ_DESC_MODE				0x3
#define BIT_MGQ_DESC_MODE(x)				(((x) & BIT_MASK_MGQ_DESC_MODE) << BIT_SHIFT_MGQ_DESC_MODE)
#define BITS_MGQ_DESC_MODE				(BIT_MASK_MGQ_DESC_MODE << BIT_SHIFT_MGQ_DESC_MODE)
#define BIT_CLEAR_MGQ_DESC_MODE(x)			((x) & (~BITS_MGQ_DESC_MODE))
#define BIT_GET_MGQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_MGQ_DESC_MODE) & BIT_MASK_MGQ_DESC_MODE)
#define BIT_SET_MGQ_DESC_MODE(x, v)			(BIT_CLEAR_MGQ_DESC_MODE(x) | BIT_MGQ_DESC_MODE(v))

#define BIT_SHIFT_MGQ_DESC_NUM				0
#define BIT_MASK_MGQ_DESC_NUM				0xfff
#define BIT_MGQ_DESC_NUM(x)				(((x) & BIT_MASK_MGQ_DESC_NUM) << BIT_SHIFT_MGQ_DESC_NUM)
#define BITS_MGQ_DESC_NUM				(BIT_MASK_MGQ_DESC_NUM << BIT_SHIFT_MGQ_DESC_NUM)
#define BIT_CLEAR_MGQ_DESC_NUM(x)			((x) & (~BITS_MGQ_DESC_NUM))
#define BIT_GET_MGQ_DESC_NUM(x)			(((x) >> BIT_SHIFT_MGQ_DESC_NUM) & BIT_MASK_MGQ_DESC_NUM)
#define BIT_SET_MGQ_DESC_NUM(x, v)			(BIT_CLEAR_MGQ_DESC_NUM(x) | BIT_MGQ_DESC_NUM(v))

/* 2 REG_RX_RXBD_NUM				(Offset 0x0382) */

#define BIT_SYS_32_64					BIT(15)

#define BIT_SHIFT_BCNQ_DESC_MODE			13
#define BIT_MASK_BCNQ_DESC_MODE			0x3
#define BIT_BCNQ_DESC_MODE(x)				(((x) & BIT_MASK_BCNQ_DESC_MODE) << BIT_SHIFT_BCNQ_DESC_MODE)
#define BITS_BCNQ_DESC_MODE				(BIT_MASK_BCNQ_DESC_MODE << BIT_SHIFT_BCNQ_DESC_MODE)
#define BIT_CLEAR_BCNQ_DESC_MODE(x)			((x) & (~BITS_BCNQ_DESC_MODE))
#define BIT_GET_BCNQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_BCNQ_DESC_MODE) & BIT_MASK_BCNQ_DESC_MODE)
#define BIT_SET_BCNQ_DESC_MODE(x, v)			(BIT_CLEAR_BCNQ_DESC_MODE(x) | BIT_BCNQ_DESC_MODE(v))

#define BIT_AXI_BCNQ_FLAG				BIT(12)

#define BIT_SHIFT_RXQ_DESC_NUM				0
#define BIT_MASK_RXQ_DESC_NUM				0xfff
#define BIT_RXQ_DESC_NUM(x)				(((x) & BIT_MASK_RXQ_DESC_NUM) << BIT_SHIFT_RXQ_DESC_NUM)
#define BITS_RXQ_DESC_NUM				(BIT_MASK_RXQ_DESC_NUM << BIT_SHIFT_RXQ_DESC_NUM)
#define BIT_CLEAR_RXQ_DESC_NUM(x)			((x) & (~BITS_RXQ_DESC_NUM))
#define BIT_GET_RXQ_DESC_NUM(x)			(((x) >> BIT_SHIFT_RXQ_DESC_NUM) & BIT_MASK_RXQ_DESC_NUM)
#define BIT_SET_RXQ_DESC_NUM(x, v)			(BIT_CLEAR_RXQ_DESC_NUM(x) | BIT_RXQ_DESC_NUM(v))

/* 2 REG_VOQ_TXBD_NUM			(Offset 0x0384) */

#define BIT_PCIE_VOQ_FLAG				BIT(14)

#define BIT_SHIFT_VOQ_DESC_MODE			12
#define BIT_MASK_VOQ_DESC_MODE				0x3
#define BIT_VOQ_DESC_MODE(x)				(((x) & BIT_MASK_VOQ_DESC_MODE) << BIT_SHIFT_VOQ_DESC_MODE)
#define BITS_VOQ_DESC_MODE				(BIT_MASK_VOQ_DESC_MODE << BIT_SHIFT_VOQ_DESC_MODE)
#define BIT_CLEAR_VOQ_DESC_MODE(x)			((x) & (~BITS_VOQ_DESC_MODE))
#define BIT_GET_VOQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_VOQ_DESC_MODE) & BIT_MASK_VOQ_DESC_MODE)
#define BIT_SET_VOQ_DESC_MODE(x, v)			(BIT_CLEAR_VOQ_DESC_MODE(x) | BIT_VOQ_DESC_MODE(v))

#define BIT_SHIFT_VOQ_DESC_NUM				0
#define BIT_MASK_VOQ_DESC_NUM				0xfff
#define BIT_VOQ_DESC_NUM(x)				(((x) & BIT_MASK_VOQ_DESC_NUM) << BIT_SHIFT_VOQ_DESC_NUM)
#define BITS_VOQ_DESC_NUM				(BIT_MASK_VOQ_DESC_NUM << BIT_SHIFT_VOQ_DESC_NUM)
#define BIT_CLEAR_VOQ_DESC_NUM(x)			((x) & (~BITS_VOQ_DESC_NUM))
#define BIT_GET_VOQ_DESC_NUM(x)			(((x) >> BIT_SHIFT_VOQ_DESC_NUM) & BIT_MASK_VOQ_DESC_NUM)
#define BIT_SET_VOQ_DESC_NUM(x, v)			(BIT_CLEAR_VOQ_DESC_NUM(x) | BIT_VOQ_DESC_NUM(v))

/* 2 REG_VIQ_TXBD_NUM			(Offset 0x0386) */

#define BIT_PCIE_VIQ_FLAG				BIT(14)

#define BIT_SHIFT_VIQ_DESC_MODE			12
#define BIT_MASK_VIQ_DESC_MODE				0x3
#define BIT_VIQ_DESC_MODE(x)				(((x) & BIT_MASK_VIQ_DESC_MODE) << BIT_SHIFT_VIQ_DESC_MODE)
#define BITS_VIQ_DESC_MODE				(BIT_MASK_VIQ_DESC_MODE << BIT_SHIFT_VIQ_DESC_MODE)
#define BIT_CLEAR_VIQ_DESC_MODE(x)			((x) & (~BITS_VIQ_DESC_MODE))
#define BIT_GET_VIQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_VIQ_DESC_MODE) & BIT_MASK_VIQ_DESC_MODE)
#define BIT_SET_VIQ_DESC_MODE(x, v)			(BIT_CLEAR_VIQ_DESC_MODE(x) | BIT_VIQ_DESC_MODE(v))

#define BIT_SHIFT_VIQ_DESC_NUM				0
#define BIT_MASK_VIQ_DESC_NUM				0xfff
#define BIT_VIQ_DESC_NUM(x)				(((x) & BIT_MASK_VIQ_DESC_NUM) << BIT_SHIFT_VIQ_DESC_NUM)
#define BITS_VIQ_DESC_NUM				(BIT_MASK_VIQ_DESC_NUM << BIT_SHIFT_VIQ_DESC_NUM)
#define BIT_CLEAR_VIQ_DESC_NUM(x)			((x) & (~BITS_VIQ_DESC_NUM))
#define BIT_GET_VIQ_DESC_NUM(x)			(((x) >> BIT_SHIFT_VIQ_DESC_NUM) & BIT_MASK_VIQ_DESC_NUM)
#define BIT_SET_VIQ_DESC_NUM(x, v)			(BIT_CLEAR_VIQ_DESC_NUM(x) | BIT_VIQ_DESC_NUM(v))

/* 2 REG_BEQ_TXBD_NUM			(Offset 0x0388) */

#define BIT_PCIE_BEQ_FLAG				BIT(14)

#define BIT_SHIFT_BEQ_DESC_MODE			12
#define BIT_MASK_BEQ_DESC_MODE				0x3
#define BIT_BEQ_DESC_MODE(x)				(((x) & BIT_MASK_BEQ_DESC_MODE) << BIT_SHIFT_BEQ_DESC_MODE)
#define BITS_BEQ_DESC_MODE				(BIT_MASK_BEQ_DESC_MODE << BIT_SHIFT_BEQ_DESC_MODE)
#define BIT_CLEAR_BEQ_DESC_MODE(x)			((x) & (~BITS_BEQ_DESC_MODE))
#define BIT_GET_BEQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_BEQ_DESC_MODE) & BIT_MASK_BEQ_DESC_MODE)
#define BIT_SET_BEQ_DESC_MODE(x, v)			(BIT_CLEAR_BEQ_DESC_MODE(x) | BIT_BEQ_DESC_MODE(v))

#define BIT_SHIFT_BEQ_DESC_NUM				0
#define BIT_MASK_BEQ_DESC_NUM				0xfff
#define BIT_BEQ_DESC_NUM(x)				(((x) & BIT_MASK_BEQ_DESC_NUM) << BIT_SHIFT_BEQ_DESC_NUM)
#define BITS_BEQ_DESC_NUM				(BIT_MASK_BEQ_DESC_NUM << BIT_SHIFT_BEQ_DESC_NUM)
#define BIT_CLEAR_BEQ_DESC_NUM(x)			((x) & (~BITS_BEQ_DESC_NUM))
#define BIT_GET_BEQ_DESC_NUM(x)			(((x) >> BIT_SHIFT_BEQ_DESC_NUM) & BIT_MASK_BEQ_DESC_NUM)
#define BIT_SET_BEQ_DESC_NUM(x, v)			(BIT_CLEAR_BEQ_DESC_NUM(x) | BIT_BEQ_DESC_NUM(v))

/* 2 REG_BKQ_TXBD_NUM			(Offset 0x038A) */

#define BIT_PCIE_BKQ_FLAG				BIT(14)

#define BIT_SHIFT_BKQ_DESC_MODE			12
#define BIT_MASK_BKQ_DESC_MODE				0x3
#define BIT_BKQ_DESC_MODE(x)				(((x) & BIT_MASK_BKQ_DESC_MODE) << BIT_SHIFT_BKQ_DESC_MODE)
#define BITS_BKQ_DESC_MODE				(BIT_MASK_BKQ_DESC_MODE << BIT_SHIFT_BKQ_DESC_MODE)
#define BIT_CLEAR_BKQ_DESC_MODE(x)			((x) & (~BITS_BKQ_DESC_MODE))
#define BIT_GET_BKQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_BKQ_DESC_MODE) & BIT_MASK_BKQ_DESC_MODE)
#define BIT_SET_BKQ_DESC_MODE(x, v)			(BIT_CLEAR_BKQ_DESC_MODE(x) | BIT_BKQ_DESC_MODE(v))

#define BIT_SHIFT_BKQ_DESC_NUM				0
#define BIT_MASK_BKQ_DESC_NUM				0xfff
#define BIT_BKQ_DESC_NUM(x)				(((x) & BIT_MASK_BKQ_DESC_NUM) << BIT_SHIFT_BKQ_DESC_NUM)
#define BITS_BKQ_DESC_NUM				(BIT_MASK_BKQ_DESC_NUM << BIT_SHIFT_BKQ_DESC_NUM)
#define BIT_CLEAR_BKQ_DESC_NUM(x)			((x) & (~BITS_BKQ_DESC_NUM))
#define BIT_GET_BKQ_DESC_NUM(x)			(((x) >> BIT_SHIFT_BKQ_DESC_NUM) & BIT_MASK_BKQ_DESC_NUM)
#define BIT_SET_BKQ_DESC_NUM(x, v)			(BIT_CLEAR_BKQ_DESC_NUM(x) | BIT_BKQ_DESC_NUM(v))

/* 2 REG_HI0Q_TXBD_NUM			(Offset 0x038C) */

#define BIT_HI0Q_FLAG					BIT(14)

#define BIT_SHIFT_HI0Q_DESC_MODE			12
#define BIT_MASK_HI0Q_DESC_MODE			0x3
#define BIT_HI0Q_DESC_MODE(x)				(((x) & BIT_MASK_HI0Q_DESC_MODE) << BIT_SHIFT_HI0Q_DESC_MODE)
#define BITS_HI0Q_DESC_MODE				(BIT_MASK_HI0Q_DESC_MODE << BIT_SHIFT_HI0Q_DESC_MODE)
#define BIT_CLEAR_HI0Q_DESC_MODE(x)			((x) & (~BITS_HI0Q_DESC_MODE))
#define BIT_GET_HI0Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI0Q_DESC_MODE) & BIT_MASK_HI0Q_DESC_MODE)
#define BIT_SET_HI0Q_DESC_MODE(x, v)			(BIT_CLEAR_HI0Q_DESC_MODE(x) | BIT_HI0Q_DESC_MODE(v))

#define BIT_SHIFT_HI0Q_DESC_NUM			0
#define BIT_MASK_HI0Q_DESC_NUM				0xfff
#define BIT_HI0Q_DESC_NUM(x)				(((x) & BIT_MASK_HI0Q_DESC_NUM) << BIT_SHIFT_HI0Q_DESC_NUM)
#define BITS_HI0Q_DESC_NUM				(BIT_MASK_HI0Q_DESC_NUM << BIT_SHIFT_HI0Q_DESC_NUM)
#define BIT_CLEAR_HI0Q_DESC_NUM(x)			((x) & (~BITS_HI0Q_DESC_NUM))
#define BIT_GET_HI0Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI0Q_DESC_NUM) & BIT_MASK_HI0Q_DESC_NUM)
#define BIT_SET_HI0Q_DESC_NUM(x, v)			(BIT_CLEAR_HI0Q_DESC_NUM(x) | BIT_HI0Q_DESC_NUM(v))

/* 2 REG_HI1Q_TXBD_NUM			(Offset 0x038E) */

#define BIT_HI1Q_FLAG					BIT(14)

#define BIT_SHIFT_HI1Q_DESC_MODE			12
#define BIT_MASK_HI1Q_DESC_MODE			0x3
#define BIT_HI1Q_DESC_MODE(x)				(((x) & BIT_MASK_HI1Q_DESC_MODE) << BIT_SHIFT_HI1Q_DESC_MODE)
#define BITS_HI1Q_DESC_MODE				(BIT_MASK_HI1Q_DESC_MODE << BIT_SHIFT_HI1Q_DESC_MODE)
#define BIT_CLEAR_HI1Q_DESC_MODE(x)			((x) & (~BITS_HI1Q_DESC_MODE))
#define BIT_GET_HI1Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI1Q_DESC_MODE) & BIT_MASK_HI1Q_DESC_MODE)
#define BIT_SET_HI1Q_DESC_MODE(x, v)			(BIT_CLEAR_HI1Q_DESC_MODE(x) | BIT_HI1Q_DESC_MODE(v))

#define BIT_SHIFT_HI1Q_DESC_NUM			0
#define BIT_MASK_HI1Q_DESC_NUM				0xfff
#define BIT_HI1Q_DESC_NUM(x)				(((x) & BIT_MASK_HI1Q_DESC_NUM) << BIT_SHIFT_HI1Q_DESC_NUM)
#define BITS_HI1Q_DESC_NUM				(BIT_MASK_HI1Q_DESC_NUM << BIT_SHIFT_HI1Q_DESC_NUM)
#define BIT_CLEAR_HI1Q_DESC_NUM(x)			((x) & (~BITS_HI1Q_DESC_NUM))
#define BIT_GET_HI1Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI1Q_DESC_NUM) & BIT_MASK_HI1Q_DESC_NUM)
#define BIT_SET_HI1Q_DESC_NUM(x, v)			(BIT_CLEAR_HI1Q_DESC_NUM(x) | BIT_HI1Q_DESC_NUM(v))

/* 2 REG_HI2Q_TXBD_NUM			(Offset 0x0390) */

#define BIT_HI2Q_FLAG					BIT(14)

#define BIT_SHIFT_HI2Q_DESC_MODE			12
#define BIT_MASK_HI2Q_DESC_MODE			0x3
#define BIT_HI2Q_DESC_MODE(x)				(((x) & BIT_MASK_HI2Q_DESC_MODE) << BIT_SHIFT_HI2Q_DESC_MODE)
#define BITS_HI2Q_DESC_MODE				(BIT_MASK_HI2Q_DESC_MODE << BIT_SHIFT_HI2Q_DESC_MODE)
#define BIT_CLEAR_HI2Q_DESC_MODE(x)			((x) & (~BITS_HI2Q_DESC_MODE))
#define BIT_GET_HI2Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI2Q_DESC_MODE) & BIT_MASK_HI2Q_DESC_MODE)
#define BIT_SET_HI2Q_DESC_MODE(x, v)			(BIT_CLEAR_HI2Q_DESC_MODE(x) | BIT_HI2Q_DESC_MODE(v))

#define BIT_SHIFT_HI2Q_DESC_NUM			0
#define BIT_MASK_HI2Q_DESC_NUM				0xfff
#define BIT_HI2Q_DESC_NUM(x)				(((x) & BIT_MASK_HI2Q_DESC_NUM) << BIT_SHIFT_HI2Q_DESC_NUM)
#define BITS_HI2Q_DESC_NUM				(BIT_MASK_HI2Q_DESC_NUM << BIT_SHIFT_HI2Q_DESC_NUM)
#define BIT_CLEAR_HI2Q_DESC_NUM(x)			((x) & (~BITS_HI2Q_DESC_NUM))
#define BIT_GET_HI2Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI2Q_DESC_NUM) & BIT_MASK_HI2Q_DESC_NUM)
#define BIT_SET_HI2Q_DESC_NUM(x, v)			(BIT_CLEAR_HI2Q_DESC_NUM(x) | BIT_HI2Q_DESC_NUM(v))

/* 2 REG_HI3Q_TXBD_NUM			(Offset 0x0392) */

#define BIT_HI3Q_FLAG					BIT(14)

#define BIT_SHIFT_HI3Q_DESC_MODE			12
#define BIT_MASK_HI3Q_DESC_MODE			0x3
#define BIT_HI3Q_DESC_MODE(x)				(((x) & BIT_MASK_HI3Q_DESC_MODE) << BIT_SHIFT_HI3Q_DESC_MODE)
#define BITS_HI3Q_DESC_MODE				(BIT_MASK_HI3Q_DESC_MODE << BIT_SHIFT_HI3Q_DESC_MODE)
#define BIT_CLEAR_HI3Q_DESC_MODE(x)			((x) & (~BITS_HI3Q_DESC_MODE))
#define BIT_GET_HI3Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI3Q_DESC_MODE) & BIT_MASK_HI3Q_DESC_MODE)
#define BIT_SET_HI3Q_DESC_MODE(x, v)			(BIT_CLEAR_HI3Q_DESC_MODE(x) | BIT_HI3Q_DESC_MODE(v))

#define BIT_SHIFT_HI3Q_DESC_NUM			0
#define BIT_MASK_HI3Q_DESC_NUM				0xfff
#define BIT_HI3Q_DESC_NUM(x)				(((x) & BIT_MASK_HI3Q_DESC_NUM) << BIT_SHIFT_HI3Q_DESC_NUM)
#define BITS_HI3Q_DESC_NUM				(BIT_MASK_HI3Q_DESC_NUM << BIT_SHIFT_HI3Q_DESC_NUM)
#define BIT_CLEAR_HI3Q_DESC_NUM(x)			((x) & (~BITS_HI3Q_DESC_NUM))
#define BIT_GET_HI3Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI3Q_DESC_NUM) & BIT_MASK_HI3Q_DESC_NUM)
#define BIT_SET_HI3Q_DESC_NUM(x, v)			(BIT_CLEAR_HI3Q_DESC_NUM(x) | BIT_HI3Q_DESC_NUM(v))

/* 2 REG_HI4Q_TXBD_NUM			(Offset 0x0394) */

#define BIT_HI4Q_FLAG					BIT(14)

#define BIT_SHIFT_HI4Q_DESC_MODE			12
#define BIT_MASK_HI4Q_DESC_MODE			0x3
#define BIT_HI4Q_DESC_MODE(x)				(((x) & BIT_MASK_HI4Q_DESC_MODE) << BIT_SHIFT_HI4Q_DESC_MODE)
#define BITS_HI4Q_DESC_MODE				(BIT_MASK_HI4Q_DESC_MODE << BIT_SHIFT_HI4Q_DESC_MODE)
#define BIT_CLEAR_HI4Q_DESC_MODE(x)			((x) & (~BITS_HI4Q_DESC_MODE))
#define BIT_GET_HI4Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI4Q_DESC_MODE) & BIT_MASK_HI4Q_DESC_MODE)
#define BIT_SET_HI4Q_DESC_MODE(x, v)			(BIT_CLEAR_HI4Q_DESC_MODE(x) | BIT_HI4Q_DESC_MODE(v))

#define BIT_SHIFT_HI4Q_DESC_NUM			0
#define BIT_MASK_HI4Q_DESC_NUM				0xfff
#define BIT_HI4Q_DESC_NUM(x)				(((x) & BIT_MASK_HI4Q_DESC_NUM) << BIT_SHIFT_HI4Q_DESC_NUM)
#define BITS_HI4Q_DESC_NUM				(BIT_MASK_HI4Q_DESC_NUM << BIT_SHIFT_HI4Q_DESC_NUM)
#define BIT_CLEAR_HI4Q_DESC_NUM(x)			((x) & (~BITS_HI4Q_DESC_NUM))
#define BIT_GET_HI4Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI4Q_DESC_NUM) & BIT_MASK_HI4Q_DESC_NUM)
#define BIT_SET_HI4Q_DESC_NUM(x, v)			(BIT_CLEAR_HI4Q_DESC_NUM(x) | BIT_HI4Q_DESC_NUM(v))

/* 2 REG_HI5Q_TXBD_NUM			(Offset 0x0396) */

#define BIT_HI5Q_FLAG					BIT(14)

#define BIT_SHIFT_HI5Q_DESC_MODE			12
#define BIT_MASK_HI5Q_DESC_MODE			0x3
#define BIT_HI5Q_DESC_MODE(x)				(((x) & BIT_MASK_HI5Q_DESC_MODE) << BIT_SHIFT_HI5Q_DESC_MODE)
#define BITS_HI5Q_DESC_MODE				(BIT_MASK_HI5Q_DESC_MODE << BIT_SHIFT_HI5Q_DESC_MODE)
#define BIT_CLEAR_HI5Q_DESC_MODE(x)			((x) & (~BITS_HI5Q_DESC_MODE))
#define BIT_GET_HI5Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI5Q_DESC_MODE) & BIT_MASK_HI5Q_DESC_MODE)
#define BIT_SET_HI5Q_DESC_MODE(x, v)			(BIT_CLEAR_HI5Q_DESC_MODE(x) | BIT_HI5Q_DESC_MODE(v))

#define BIT_SHIFT_HI5Q_DESC_NUM			0
#define BIT_MASK_HI5Q_DESC_NUM				0xfff
#define BIT_HI5Q_DESC_NUM(x)				(((x) & BIT_MASK_HI5Q_DESC_NUM) << BIT_SHIFT_HI5Q_DESC_NUM)
#define BITS_HI5Q_DESC_NUM				(BIT_MASK_HI5Q_DESC_NUM << BIT_SHIFT_HI5Q_DESC_NUM)
#define BIT_CLEAR_HI5Q_DESC_NUM(x)			((x) & (~BITS_HI5Q_DESC_NUM))
#define BIT_GET_HI5Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI5Q_DESC_NUM) & BIT_MASK_HI5Q_DESC_NUM)
#define BIT_SET_HI5Q_DESC_NUM(x, v)			(BIT_CLEAR_HI5Q_DESC_NUM(x) | BIT_HI5Q_DESC_NUM(v))

/* 2 REG_HI6Q_TXBD_NUM			(Offset 0x0398) */

#define BIT_HI6Q_FLAG					BIT(14)

#define BIT_SHIFT_HI6Q_DESC_MODE			12
#define BIT_MASK_HI6Q_DESC_MODE			0x3
#define BIT_HI6Q_DESC_MODE(x)				(((x) & BIT_MASK_HI6Q_DESC_MODE) << BIT_SHIFT_HI6Q_DESC_MODE)
#define BITS_HI6Q_DESC_MODE				(BIT_MASK_HI6Q_DESC_MODE << BIT_SHIFT_HI6Q_DESC_MODE)
#define BIT_CLEAR_HI6Q_DESC_MODE(x)			((x) & (~BITS_HI6Q_DESC_MODE))
#define BIT_GET_HI6Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI6Q_DESC_MODE) & BIT_MASK_HI6Q_DESC_MODE)
#define BIT_SET_HI6Q_DESC_MODE(x, v)			(BIT_CLEAR_HI6Q_DESC_MODE(x) | BIT_HI6Q_DESC_MODE(v))

#define BIT_SHIFT_HI6Q_DESC_NUM			0
#define BIT_MASK_HI6Q_DESC_NUM				0xfff
#define BIT_HI6Q_DESC_NUM(x)				(((x) & BIT_MASK_HI6Q_DESC_NUM) << BIT_SHIFT_HI6Q_DESC_NUM)
#define BITS_HI6Q_DESC_NUM				(BIT_MASK_HI6Q_DESC_NUM << BIT_SHIFT_HI6Q_DESC_NUM)
#define BIT_CLEAR_HI6Q_DESC_NUM(x)			((x) & (~BITS_HI6Q_DESC_NUM))
#define BIT_GET_HI6Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI6Q_DESC_NUM) & BIT_MASK_HI6Q_DESC_NUM)
#define BIT_SET_HI6Q_DESC_NUM(x, v)			(BIT_CLEAR_HI6Q_DESC_NUM(x) | BIT_HI6Q_DESC_NUM(v))

/* 2 REG_HI7Q_TXBD_NUM			(Offset 0x039A) */

#define BIT_HI7Q_FLAG					BIT(14)

#define BIT_SHIFT_HI7Q_DESC_MODE			12
#define BIT_MASK_HI7Q_DESC_MODE			0x3
#define BIT_HI7Q_DESC_MODE(x)				(((x) & BIT_MASK_HI7Q_DESC_MODE) << BIT_SHIFT_HI7Q_DESC_MODE)
#define BITS_HI7Q_DESC_MODE				(BIT_MASK_HI7Q_DESC_MODE << BIT_SHIFT_HI7Q_DESC_MODE)
#define BIT_CLEAR_HI7Q_DESC_MODE(x)			((x) & (~BITS_HI7Q_DESC_MODE))
#define BIT_GET_HI7Q_DESC_MODE(x)			(((x) >> BIT_SHIFT_HI7Q_DESC_MODE) & BIT_MASK_HI7Q_DESC_MODE)
#define BIT_SET_HI7Q_DESC_MODE(x, v)			(BIT_CLEAR_HI7Q_DESC_MODE(x) | BIT_HI7Q_DESC_MODE(v))

#define BIT_SHIFT_HI7Q_DESC_NUM			0
#define BIT_MASK_HI7Q_DESC_NUM				0xfff
#define BIT_HI7Q_DESC_NUM(x)				(((x) & BIT_MASK_HI7Q_DESC_NUM) << BIT_SHIFT_HI7Q_DESC_NUM)
#define BITS_HI7Q_DESC_NUM				(BIT_MASK_HI7Q_DESC_NUM << BIT_SHIFT_HI7Q_DESC_NUM)
#define BIT_CLEAR_HI7Q_DESC_NUM(x)			((x) & (~BITS_HI7Q_DESC_NUM))
#define BIT_GET_HI7Q_DESC_NUM(x)			(((x) >> BIT_SHIFT_HI7Q_DESC_NUM) & BIT_MASK_HI7Q_DESC_NUM)
#define BIT_SET_HI7Q_DESC_NUM(x, v)			(BIT_CLEAR_HI7Q_DESC_NUM(x) | BIT_HI7Q_DESC_NUM(v))

/* 2 REG_BD_RWPTR_CLR			(Offset 0x039C) */

#define BIT_CLR_HI7Q_HW_IDX				BIT(29)
#define BIT_CLR_HI6Q_HW_IDX				BIT(28)
#define BIT_CLR_HI5Q_HW_IDX				BIT(27)
#define BIT_CLR_HI4Q_HW_IDX				BIT(26)
#define BIT_CLR_HI3Q_HW_IDX				BIT(25)
#define BIT_CLR_HI2Q_HW_IDX				BIT(24)
#define BIT_CLR_HI1Q_HW_IDX				BIT(23)
#define BIT_CLR_HI0Q_HW_IDX				BIT(22)
#define BIT_CLR_BKQ_HW_IDX				BIT(21)
#define BIT_CLR_BEQ_HW_IDX				BIT(20)
#define BIT_CLR_VIQ_HW_IDX				BIT(19)
#define BIT_CLR_VOQ_HW_IDX				BIT(18)
#define BIT_CLR_MGQ_HW_IDX				BIT(17)

#define BIT_SHIFT_TSFT2_HCI				16
#define BIT_MASK_TSFT2_HCI				0xffff
#define BIT_TSFT2_HCI(x)				(((x) & BIT_MASK_TSFT2_HCI) << BIT_SHIFT_TSFT2_HCI)
#define BITS_TSFT2_HCI					(BIT_MASK_TSFT2_HCI << BIT_SHIFT_TSFT2_HCI)
#define BIT_CLEAR_TSFT2_HCI(x)				((x) & (~BITS_TSFT2_HCI))
#define BIT_GET_TSFT2_HCI(x)				(((x) >> BIT_SHIFT_TSFT2_HCI) & BIT_MASK_TSFT2_HCI)
#define BIT_SET_TSFT2_HCI(x, v)			(BIT_CLEAR_TSFT2_HCI(x) | BIT_TSFT2_HCI(v))

#define BIT_CLR_RXQ_HW_IDX				BIT(16)
#define BIT_CLR_HI7Q_HOST_IDX				BIT(13)
#define BIT_CLR_HI6Q_HOST_IDX				BIT(12)
#define BIT_CLR_HI5Q_HOST_IDX				BIT(11)
#define BIT_CLR_HI4Q_HOST_IDX				BIT(10)
#define BIT_CLR_HI3Q_HOST_IDX				BIT(9)
#define BIT_CLR_HI2Q_HOST_IDX				BIT(8)
#define BIT_CLR_HI1Q_HOST_IDX				BIT(7)
#define BIT_CLR_HI0Q_HOST_IDX				BIT(6)
#define BIT_CLR_BKQ_HOST_IDX				BIT(5)
#define BIT_CLR_BEQ_HOST_IDX				BIT(4)
#define BIT_CLR_VIQ_HOST_IDX				BIT(3)
#define BIT_CLR_VOQ_HOST_IDX				BIT(2)
#define BIT_CLR_MGQ_HOST_IDX				BIT(1)

#define BIT_SHIFT_TSFT1_HCI				0
#define BIT_MASK_TSFT1_HCI				0xffff
#define BIT_TSFT1_HCI(x)				(((x) & BIT_MASK_TSFT1_HCI) << BIT_SHIFT_TSFT1_HCI)
#define BITS_TSFT1_HCI					(BIT_MASK_TSFT1_HCI << BIT_SHIFT_TSFT1_HCI)
#define BIT_CLEAR_TSFT1_HCI(x)				((x) & (~BITS_TSFT1_HCI))
#define BIT_GET_TSFT1_HCI(x)				(((x) >> BIT_SHIFT_TSFT1_HCI) & BIT_MASK_TSFT1_HCI)
#define BIT_SET_TSFT1_HCI(x, v)			(BIT_CLEAR_TSFT1_HCI(x) | BIT_TSFT1_HCI(v))

#define BIT_CLR_RXQ_HOST_IDX				BIT(0)

/* 2 REG_VOQ_TXBD_IDX			(Offset 0x03A0) */

#define BIT_SHIFT_VOQ_HW_IDX				16
#define BIT_MASK_VOQ_HW_IDX				0xfff
#define BIT_VOQ_HW_IDX(x)				(((x) & BIT_MASK_VOQ_HW_IDX) << BIT_SHIFT_VOQ_HW_IDX)
#define BITS_VOQ_HW_IDX				(BIT_MASK_VOQ_HW_IDX << BIT_SHIFT_VOQ_HW_IDX)
#define BIT_CLEAR_VOQ_HW_IDX(x)			((x) & (~BITS_VOQ_HW_IDX))
#define BIT_GET_VOQ_HW_IDX(x)				(((x) >> BIT_SHIFT_VOQ_HW_IDX) & BIT_MASK_VOQ_HW_IDX)
#define BIT_SET_VOQ_HW_IDX(x, v)			(BIT_CLEAR_VOQ_HW_IDX(x) | BIT_VOQ_HW_IDX(v))

#define BIT_SHIFT_VOQ_HOST_IDX				0
#define BIT_MASK_VOQ_HOST_IDX				0xfff
#define BIT_VOQ_HOST_IDX(x)				(((x) & BIT_MASK_VOQ_HOST_IDX) << BIT_SHIFT_VOQ_HOST_IDX)
#define BITS_VOQ_HOST_IDX				(BIT_MASK_VOQ_HOST_IDX << BIT_SHIFT_VOQ_HOST_IDX)
#define BIT_CLEAR_VOQ_HOST_IDX(x)			((x) & (~BITS_VOQ_HOST_IDX))
#define BIT_GET_VOQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_VOQ_HOST_IDX) & BIT_MASK_VOQ_HOST_IDX)
#define BIT_SET_VOQ_HOST_IDX(x, v)			(BIT_CLEAR_VOQ_HOST_IDX(x) | BIT_VOQ_HOST_IDX(v))

/* 2 REG_VIQ_TXBD_IDX			(Offset 0x03A4) */

#define BIT_SHIFT_VIQ_HW_IDX				16
#define BIT_MASK_VIQ_HW_IDX				0xfff
#define BIT_VIQ_HW_IDX(x)				(((x) & BIT_MASK_VIQ_HW_IDX) << BIT_SHIFT_VIQ_HW_IDX)
#define BITS_VIQ_HW_IDX				(BIT_MASK_VIQ_HW_IDX << BIT_SHIFT_VIQ_HW_IDX)
#define BIT_CLEAR_VIQ_HW_IDX(x)			((x) & (~BITS_VIQ_HW_IDX))
#define BIT_GET_VIQ_HW_IDX(x)				(((x) >> BIT_SHIFT_VIQ_HW_IDX) & BIT_MASK_VIQ_HW_IDX)
#define BIT_SET_VIQ_HW_IDX(x, v)			(BIT_CLEAR_VIQ_HW_IDX(x) | BIT_VIQ_HW_IDX(v))

#define BIT_SHIFT_VIQ_HOST_IDX				0
#define BIT_MASK_VIQ_HOST_IDX				0xfff
#define BIT_VIQ_HOST_IDX(x)				(((x) & BIT_MASK_VIQ_HOST_IDX) << BIT_SHIFT_VIQ_HOST_IDX)
#define BITS_VIQ_HOST_IDX				(BIT_MASK_VIQ_HOST_IDX << BIT_SHIFT_VIQ_HOST_IDX)
#define BIT_CLEAR_VIQ_HOST_IDX(x)			((x) & (~BITS_VIQ_HOST_IDX))
#define BIT_GET_VIQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_VIQ_HOST_IDX) & BIT_MASK_VIQ_HOST_IDX)
#define BIT_SET_VIQ_HOST_IDX(x, v)			(BIT_CLEAR_VIQ_HOST_IDX(x) | BIT_VIQ_HOST_IDX(v))

/* 2 REG_BEQ_TXBD_IDX			(Offset 0x03A8) */

#define BIT_SHIFT_BEQ_HW_IDX				16
#define BIT_MASK_BEQ_HW_IDX				0xfff
#define BIT_BEQ_HW_IDX(x)				(((x) & BIT_MASK_BEQ_HW_IDX) << BIT_SHIFT_BEQ_HW_IDX)
#define BITS_BEQ_HW_IDX				(BIT_MASK_BEQ_HW_IDX << BIT_SHIFT_BEQ_HW_IDX)
#define BIT_CLEAR_BEQ_HW_IDX(x)			((x) & (~BITS_BEQ_HW_IDX))
#define BIT_GET_BEQ_HW_IDX(x)				(((x) >> BIT_SHIFT_BEQ_HW_IDX) & BIT_MASK_BEQ_HW_IDX)
#define BIT_SET_BEQ_HW_IDX(x, v)			(BIT_CLEAR_BEQ_HW_IDX(x) | BIT_BEQ_HW_IDX(v))

#define BIT_SHIFT_BEQ_HOST_IDX				0
#define BIT_MASK_BEQ_HOST_IDX				0xfff
#define BIT_BEQ_HOST_IDX(x)				(((x) & BIT_MASK_BEQ_HOST_IDX) << BIT_SHIFT_BEQ_HOST_IDX)
#define BITS_BEQ_HOST_IDX				(BIT_MASK_BEQ_HOST_IDX << BIT_SHIFT_BEQ_HOST_IDX)
#define BIT_CLEAR_BEQ_HOST_IDX(x)			((x) & (~BITS_BEQ_HOST_IDX))
#define BIT_GET_BEQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_BEQ_HOST_IDX) & BIT_MASK_BEQ_HOST_IDX)
#define BIT_SET_BEQ_HOST_IDX(x, v)			(BIT_CLEAR_BEQ_HOST_IDX(x) | BIT_BEQ_HOST_IDX(v))

/* 2 REG_BKQ_TXBD_IDX			(Offset 0x03AC) */

#define BIT_SHIFT_BKQ_HW_IDX				16
#define BIT_MASK_BKQ_HW_IDX				0xfff
#define BIT_BKQ_HW_IDX(x)				(((x) & BIT_MASK_BKQ_HW_IDX) << BIT_SHIFT_BKQ_HW_IDX)
#define BITS_BKQ_HW_IDX				(BIT_MASK_BKQ_HW_IDX << BIT_SHIFT_BKQ_HW_IDX)
#define BIT_CLEAR_BKQ_HW_IDX(x)			((x) & (~BITS_BKQ_HW_IDX))
#define BIT_GET_BKQ_HW_IDX(x)				(((x) >> BIT_SHIFT_BKQ_HW_IDX) & BIT_MASK_BKQ_HW_IDX)
#define BIT_SET_BKQ_HW_IDX(x, v)			(BIT_CLEAR_BKQ_HW_IDX(x) | BIT_BKQ_HW_IDX(v))

#define BIT_SHIFT_BKQ_HOST_IDX				0
#define BIT_MASK_BKQ_HOST_IDX				0xfff
#define BIT_BKQ_HOST_IDX(x)				(((x) & BIT_MASK_BKQ_HOST_IDX) << BIT_SHIFT_BKQ_HOST_IDX)
#define BITS_BKQ_HOST_IDX				(BIT_MASK_BKQ_HOST_IDX << BIT_SHIFT_BKQ_HOST_IDX)
#define BIT_CLEAR_BKQ_HOST_IDX(x)			((x) & (~BITS_BKQ_HOST_IDX))
#define BIT_GET_BKQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_BKQ_HOST_IDX) & BIT_MASK_BKQ_HOST_IDX)
#define BIT_SET_BKQ_HOST_IDX(x, v)			(BIT_CLEAR_BKQ_HOST_IDX(x) | BIT_BKQ_HOST_IDX(v))

/* 2 REG_MGQ_TXBD_IDX			(Offset 0x03B0) */

#define BIT_SHIFT_MGQ_HW_IDX				16
#define BIT_MASK_MGQ_HW_IDX				0xfff
#define BIT_MGQ_HW_IDX(x)				(((x) & BIT_MASK_MGQ_HW_IDX) << BIT_SHIFT_MGQ_HW_IDX)
#define BITS_MGQ_HW_IDX				(BIT_MASK_MGQ_HW_IDX << BIT_SHIFT_MGQ_HW_IDX)
#define BIT_CLEAR_MGQ_HW_IDX(x)			((x) & (~BITS_MGQ_HW_IDX))
#define BIT_GET_MGQ_HW_IDX(x)				(((x) >> BIT_SHIFT_MGQ_HW_IDX) & BIT_MASK_MGQ_HW_IDX)
#define BIT_SET_MGQ_HW_IDX(x, v)			(BIT_CLEAR_MGQ_HW_IDX(x) | BIT_MGQ_HW_IDX(v))

#define BIT_SHIFT_MGQ_HOST_IDX				0
#define BIT_MASK_MGQ_HOST_IDX				0xfff
#define BIT_MGQ_HOST_IDX(x)				(((x) & BIT_MASK_MGQ_HOST_IDX) << BIT_SHIFT_MGQ_HOST_IDX)
#define BITS_MGQ_HOST_IDX				(BIT_MASK_MGQ_HOST_IDX << BIT_SHIFT_MGQ_HOST_IDX)
#define BIT_CLEAR_MGQ_HOST_IDX(x)			((x) & (~BITS_MGQ_HOST_IDX))
#define BIT_GET_MGQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_MGQ_HOST_IDX) & BIT_MASK_MGQ_HOST_IDX)
#define BIT_SET_MGQ_HOST_IDX(x, v)			(BIT_CLEAR_MGQ_HOST_IDX(x) | BIT_MGQ_HOST_IDX(v))

/* 2 REG_RXQ_RXBD_IDX			(Offset 0x03B4) */

#define BIT_SHIFT_RXQ_HW_IDX				16
#define BIT_MASK_RXQ_HW_IDX				0xfff
#define BIT_RXQ_HW_IDX(x)				(((x) & BIT_MASK_RXQ_HW_IDX) << BIT_SHIFT_RXQ_HW_IDX)
#define BITS_RXQ_HW_IDX				(BIT_MASK_RXQ_HW_IDX << BIT_SHIFT_RXQ_HW_IDX)
#define BIT_CLEAR_RXQ_HW_IDX(x)			((x) & (~BITS_RXQ_HW_IDX))
#define BIT_GET_RXQ_HW_IDX(x)				(((x) >> BIT_SHIFT_RXQ_HW_IDX) & BIT_MASK_RXQ_HW_IDX)
#define BIT_SET_RXQ_HW_IDX(x, v)			(BIT_CLEAR_RXQ_HW_IDX(x) | BIT_RXQ_HW_IDX(v))

#define BIT_SHIFT_RXQ_HOST_IDX				0
#define BIT_MASK_RXQ_HOST_IDX				0xfff
#define BIT_RXQ_HOST_IDX(x)				(((x) & BIT_MASK_RXQ_HOST_IDX) << BIT_SHIFT_RXQ_HOST_IDX)
#define BITS_RXQ_HOST_IDX				(BIT_MASK_RXQ_HOST_IDX << BIT_SHIFT_RXQ_HOST_IDX)
#define BIT_CLEAR_RXQ_HOST_IDX(x)			((x) & (~BITS_RXQ_HOST_IDX))
#define BIT_GET_RXQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_RXQ_HOST_IDX) & BIT_MASK_RXQ_HOST_IDX)
#define BIT_SET_RXQ_HOST_IDX(x, v)			(BIT_CLEAR_RXQ_HOST_IDX(x) | BIT_RXQ_HOST_IDX(v))

/* 2 REG_HI0Q_TXBD_IDX			(Offset 0x03B8) */

#define BIT_SHIFT_HI0Q_HW_IDX				16
#define BIT_MASK_HI0Q_HW_IDX				0xfff
#define BIT_HI0Q_HW_IDX(x)				(((x) & BIT_MASK_HI0Q_HW_IDX) << BIT_SHIFT_HI0Q_HW_IDX)
#define BITS_HI0Q_HW_IDX				(BIT_MASK_HI0Q_HW_IDX << BIT_SHIFT_HI0Q_HW_IDX)
#define BIT_CLEAR_HI0Q_HW_IDX(x)			((x) & (~BITS_HI0Q_HW_IDX))
#define BIT_GET_HI0Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI0Q_HW_IDX) & BIT_MASK_HI0Q_HW_IDX)
#define BIT_SET_HI0Q_HW_IDX(x, v)			(BIT_CLEAR_HI0Q_HW_IDX(x) | BIT_HI0Q_HW_IDX(v))

#define BIT_SHIFT_HI0Q_HOST_IDX			0
#define BIT_MASK_HI0Q_HOST_IDX				0xfff
#define BIT_HI0Q_HOST_IDX(x)				(((x) & BIT_MASK_HI0Q_HOST_IDX) << BIT_SHIFT_HI0Q_HOST_IDX)
#define BITS_HI0Q_HOST_IDX				(BIT_MASK_HI0Q_HOST_IDX << BIT_SHIFT_HI0Q_HOST_IDX)
#define BIT_CLEAR_HI0Q_HOST_IDX(x)			((x) & (~BITS_HI0Q_HOST_IDX))
#define BIT_GET_HI0Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI0Q_HOST_IDX) & BIT_MASK_HI0Q_HOST_IDX)
#define BIT_SET_HI0Q_HOST_IDX(x, v)			(BIT_CLEAR_HI0Q_HOST_IDX(x) | BIT_HI0Q_HOST_IDX(v))

/* 2 REG_HI1Q_TXBD_IDX			(Offset 0x03BC) */

#define BIT_SHIFT_HI1Q_HW_IDX				16
#define BIT_MASK_HI1Q_HW_IDX				0xfff
#define BIT_HI1Q_HW_IDX(x)				(((x) & BIT_MASK_HI1Q_HW_IDX) << BIT_SHIFT_HI1Q_HW_IDX)
#define BITS_HI1Q_HW_IDX				(BIT_MASK_HI1Q_HW_IDX << BIT_SHIFT_HI1Q_HW_IDX)
#define BIT_CLEAR_HI1Q_HW_IDX(x)			((x) & (~BITS_HI1Q_HW_IDX))
#define BIT_GET_HI1Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI1Q_HW_IDX) & BIT_MASK_HI1Q_HW_IDX)
#define BIT_SET_HI1Q_HW_IDX(x, v)			(BIT_CLEAR_HI1Q_HW_IDX(x) | BIT_HI1Q_HW_IDX(v))

#define BIT_SHIFT_HI1Q_HOST_IDX			0
#define BIT_MASK_HI1Q_HOST_IDX				0xfff
#define BIT_HI1Q_HOST_IDX(x)				(((x) & BIT_MASK_HI1Q_HOST_IDX) << BIT_SHIFT_HI1Q_HOST_IDX)
#define BITS_HI1Q_HOST_IDX				(BIT_MASK_HI1Q_HOST_IDX << BIT_SHIFT_HI1Q_HOST_IDX)
#define BIT_CLEAR_HI1Q_HOST_IDX(x)			((x) & (~BITS_HI1Q_HOST_IDX))
#define BIT_GET_HI1Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI1Q_HOST_IDX) & BIT_MASK_HI1Q_HOST_IDX)
#define BIT_SET_HI1Q_HOST_IDX(x, v)			(BIT_CLEAR_HI1Q_HOST_IDX(x) | BIT_HI1Q_HOST_IDX(v))

/* 2 REG_HI2Q_TXBD_IDX			(Offset 0x03C0) */

#define BIT_SHIFT_HI2Q_HW_IDX				16
#define BIT_MASK_HI2Q_HW_IDX				0xfff
#define BIT_HI2Q_HW_IDX(x)				(((x) & BIT_MASK_HI2Q_HW_IDX) << BIT_SHIFT_HI2Q_HW_IDX)
#define BITS_HI2Q_HW_IDX				(BIT_MASK_HI2Q_HW_IDX << BIT_SHIFT_HI2Q_HW_IDX)
#define BIT_CLEAR_HI2Q_HW_IDX(x)			((x) & (~BITS_HI2Q_HW_IDX))
#define BIT_GET_HI2Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI2Q_HW_IDX) & BIT_MASK_HI2Q_HW_IDX)
#define BIT_SET_HI2Q_HW_IDX(x, v)			(BIT_CLEAR_HI2Q_HW_IDX(x) | BIT_HI2Q_HW_IDX(v))

#define BIT_SHIFT_HI2Q_HOST_IDX			0
#define BIT_MASK_HI2Q_HOST_IDX				0xfff
#define BIT_HI2Q_HOST_IDX(x)				(((x) & BIT_MASK_HI2Q_HOST_IDX) << BIT_SHIFT_HI2Q_HOST_IDX)
#define BITS_HI2Q_HOST_IDX				(BIT_MASK_HI2Q_HOST_IDX << BIT_SHIFT_HI2Q_HOST_IDX)
#define BIT_CLEAR_HI2Q_HOST_IDX(x)			((x) & (~BITS_HI2Q_HOST_IDX))
#define BIT_GET_HI2Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI2Q_HOST_IDX) & BIT_MASK_HI2Q_HOST_IDX)
#define BIT_SET_HI2Q_HOST_IDX(x, v)			(BIT_CLEAR_HI2Q_HOST_IDX(x) | BIT_HI2Q_HOST_IDX(v))

/* 2 REG_HI3Q_TXBD_IDX			(Offset 0x03C4) */

#define BIT_SHIFT_HI3Q_HW_IDX				16
#define BIT_MASK_HI3Q_HW_IDX				0xfff
#define BIT_HI3Q_HW_IDX(x)				(((x) & BIT_MASK_HI3Q_HW_IDX) << BIT_SHIFT_HI3Q_HW_IDX)
#define BITS_HI3Q_HW_IDX				(BIT_MASK_HI3Q_HW_IDX << BIT_SHIFT_HI3Q_HW_IDX)
#define BIT_CLEAR_HI3Q_HW_IDX(x)			((x) & (~BITS_HI3Q_HW_IDX))
#define BIT_GET_HI3Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI3Q_HW_IDX) & BIT_MASK_HI3Q_HW_IDX)
#define BIT_SET_HI3Q_HW_IDX(x, v)			(BIT_CLEAR_HI3Q_HW_IDX(x) | BIT_HI3Q_HW_IDX(v))

#define BIT_SHIFT_HI3Q_HOST_IDX			0
#define BIT_MASK_HI3Q_HOST_IDX				0xfff
#define BIT_HI3Q_HOST_IDX(x)				(((x) & BIT_MASK_HI3Q_HOST_IDX) << BIT_SHIFT_HI3Q_HOST_IDX)
#define BITS_HI3Q_HOST_IDX				(BIT_MASK_HI3Q_HOST_IDX << BIT_SHIFT_HI3Q_HOST_IDX)
#define BIT_CLEAR_HI3Q_HOST_IDX(x)			((x) & (~BITS_HI3Q_HOST_IDX))
#define BIT_GET_HI3Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI3Q_HOST_IDX) & BIT_MASK_HI3Q_HOST_IDX)
#define BIT_SET_HI3Q_HOST_IDX(x, v)			(BIT_CLEAR_HI3Q_HOST_IDX(x) | BIT_HI3Q_HOST_IDX(v))

/* 2 REG_HI4Q_TXBD_IDX			(Offset 0x03C8) */

#define BIT_SHIFT_HI4Q_HW_IDX				16
#define BIT_MASK_HI4Q_HW_IDX				0xfff
#define BIT_HI4Q_HW_IDX(x)				(((x) & BIT_MASK_HI4Q_HW_IDX) << BIT_SHIFT_HI4Q_HW_IDX)
#define BITS_HI4Q_HW_IDX				(BIT_MASK_HI4Q_HW_IDX << BIT_SHIFT_HI4Q_HW_IDX)
#define BIT_CLEAR_HI4Q_HW_IDX(x)			((x) & (~BITS_HI4Q_HW_IDX))
#define BIT_GET_HI4Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI4Q_HW_IDX) & BIT_MASK_HI4Q_HW_IDX)
#define BIT_SET_HI4Q_HW_IDX(x, v)			(BIT_CLEAR_HI4Q_HW_IDX(x) | BIT_HI4Q_HW_IDX(v))

#define BIT_SHIFT_HI4Q_HOST_IDX			0
#define BIT_MASK_HI4Q_HOST_IDX				0xfff
#define BIT_HI4Q_HOST_IDX(x)				(((x) & BIT_MASK_HI4Q_HOST_IDX) << BIT_SHIFT_HI4Q_HOST_IDX)
#define BITS_HI4Q_HOST_IDX				(BIT_MASK_HI4Q_HOST_IDX << BIT_SHIFT_HI4Q_HOST_IDX)
#define BIT_CLEAR_HI4Q_HOST_IDX(x)			((x) & (~BITS_HI4Q_HOST_IDX))
#define BIT_GET_HI4Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI4Q_HOST_IDX) & BIT_MASK_HI4Q_HOST_IDX)
#define BIT_SET_HI4Q_HOST_IDX(x, v)			(BIT_CLEAR_HI4Q_HOST_IDX(x) | BIT_HI4Q_HOST_IDX(v))

/* 2 REG_HI5Q_TXBD_IDX			(Offset 0x03CC) */

#define BIT_SHIFT_HI5Q_HW_IDX				16
#define BIT_MASK_HI5Q_HW_IDX				0xfff
#define BIT_HI5Q_HW_IDX(x)				(((x) & BIT_MASK_HI5Q_HW_IDX) << BIT_SHIFT_HI5Q_HW_IDX)
#define BITS_HI5Q_HW_IDX				(BIT_MASK_HI5Q_HW_IDX << BIT_SHIFT_HI5Q_HW_IDX)
#define BIT_CLEAR_HI5Q_HW_IDX(x)			((x) & (~BITS_HI5Q_HW_IDX))
#define BIT_GET_HI5Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI5Q_HW_IDX) & BIT_MASK_HI5Q_HW_IDX)
#define BIT_SET_HI5Q_HW_IDX(x, v)			(BIT_CLEAR_HI5Q_HW_IDX(x) | BIT_HI5Q_HW_IDX(v))

#define BIT_SHIFT_HI5Q_HOST_IDX			0
#define BIT_MASK_HI5Q_HOST_IDX				0xfff
#define BIT_HI5Q_HOST_IDX(x)				(((x) & BIT_MASK_HI5Q_HOST_IDX) << BIT_SHIFT_HI5Q_HOST_IDX)
#define BITS_HI5Q_HOST_IDX				(BIT_MASK_HI5Q_HOST_IDX << BIT_SHIFT_HI5Q_HOST_IDX)
#define BIT_CLEAR_HI5Q_HOST_IDX(x)			((x) & (~BITS_HI5Q_HOST_IDX))
#define BIT_GET_HI5Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI5Q_HOST_IDX) & BIT_MASK_HI5Q_HOST_IDX)
#define BIT_SET_HI5Q_HOST_IDX(x, v)			(BIT_CLEAR_HI5Q_HOST_IDX(x) | BIT_HI5Q_HOST_IDX(v))

/* 2 REG_HI6Q_TXBD_IDX			(Offset 0x03D0) */

#define BIT_SHIFT_HI6Q_HW_IDX				16
#define BIT_MASK_HI6Q_HW_IDX				0xfff
#define BIT_HI6Q_HW_IDX(x)				(((x) & BIT_MASK_HI6Q_HW_IDX) << BIT_SHIFT_HI6Q_HW_IDX)
#define BITS_HI6Q_HW_IDX				(BIT_MASK_HI6Q_HW_IDX << BIT_SHIFT_HI6Q_HW_IDX)
#define BIT_CLEAR_HI6Q_HW_IDX(x)			((x) & (~BITS_HI6Q_HW_IDX))
#define BIT_GET_HI6Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI6Q_HW_IDX) & BIT_MASK_HI6Q_HW_IDX)
#define BIT_SET_HI6Q_HW_IDX(x, v)			(BIT_CLEAR_HI6Q_HW_IDX(x) | BIT_HI6Q_HW_IDX(v))

#define BIT_SHIFT_HI6Q_HOST_IDX			0
#define BIT_MASK_HI6Q_HOST_IDX				0xfff
#define BIT_HI6Q_HOST_IDX(x)				(((x) & BIT_MASK_HI6Q_HOST_IDX) << BIT_SHIFT_HI6Q_HOST_IDX)
#define BITS_HI6Q_HOST_IDX				(BIT_MASK_HI6Q_HOST_IDX << BIT_SHIFT_HI6Q_HOST_IDX)
#define BIT_CLEAR_HI6Q_HOST_IDX(x)			((x) & (~BITS_HI6Q_HOST_IDX))
#define BIT_GET_HI6Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI6Q_HOST_IDX) & BIT_MASK_HI6Q_HOST_IDX)
#define BIT_SET_HI6Q_HOST_IDX(x, v)			(BIT_CLEAR_HI6Q_HOST_IDX(x) | BIT_HI6Q_HOST_IDX(v))

/* 2 REG_HI7Q_TXBD_IDX			(Offset 0x03D4) */

#define BIT_SHIFT_HI7Q_HW_IDX				16
#define BIT_MASK_HI7Q_HW_IDX				0xfff
#define BIT_HI7Q_HW_IDX(x)				(((x) & BIT_MASK_HI7Q_HW_IDX) << BIT_SHIFT_HI7Q_HW_IDX)
#define BITS_HI7Q_HW_IDX				(BIT_MASK_HI7Q_HW_IDX << BIT_SHIFT_HI7Q_HW_IDX)
#define BIT_CLEAR_HI7Q_HW_IDX(x)			((x) & (~BITS_HI7Q_HW_IDX))
#define BIT_GET_HI7Q_HW_IDX(x)				(((x) >> BIT_SHIFT_HI7Q_HW_IDX) & BIT_MASK_HI7Q_HW_IDX)
#define BIT_SET_HI7Q_HW_IDX(x, v)			(BIT_CLEAR_HI7Q_HW_IDX(x) | BIT_HI7Q_HW_IDX(v))

#define BIT_SHIFT_HI7Q_HOST_IDX			0
#define BIT_MASK_HI7Q_HOST_IDX				0xfff
#define BIT_HI7Q_HOST_IDX(x)				(((x) & BIT_MASK_HI7Q_HOST_IDX) << BIT_SHIFT_HI7Q_HOST_IDX)
#define BITS_HI7Q_HOST_IDX				(BIT_MASK_HI7Q_HOST_IDX << BIT_SHIFT_HI7Q_HOST_IDX)
#define BIT_CLEAR_HI7Q_HOST_IDX(x)			((x) & (~BITS_HI7Q_HOST_IDX))
#define BIT_GET_HI7Q_HOST_IDX(x)			(((x) >> BIT_SHIFT_HI7Q_HOST_IDX) & BIT_MASK_HI7Q_HOST_IDX)
#define BIT_SET_HI7Q_HOST_IDX(x, v)			(BIT_CLEAR_HI7Q_HOST_IDX(x) | BIT_HI7Q_HOST_IDX(v))

/* 2 REG_DBG_SEL_V1_AMB			(Offset 0x03D8) */

#define BIT_SHIFT_DBG_SEL_V1_AMB			0
#define BIT_MASK_DBG_SEL_V1_AMB			0xff
#define BIT_DBG_SEL_V1_AMB(x)				(((x) & BIT_MASK_DBG_SEL_V1_AMB) << BIT_SHIFT_DBG_SEL_V1_AMB)
#define BITS_DBG_SEL_V1_AMB				(BIT_MASK_DBG_SEL_V1_AMB << BIT_SHIFT_DBG_SEL_V1_AMB)
#define BIT_CLEAR_DBG_SEL_V1_AMB(x)			((x) & (~BITS_DBG_SEL_V1_AMB))
#define BIT_GET_DBG_SEL_V1_AMB(x)			(((x) >> BIT_SHIFT_DBG_SEL_V1_AMB) & BIT_MASK_DBG_SEL_V1_AMB)
#define BIT_SET_DBG_SEL_V1_AMB(x, v)			(BIT_CLEAR_DBG_SEL_V1_AMB(x) | BIT_DBG_SEL_V1_AMB(v))

/* 2 REG_AXI_HRPWM1_V1			(Offset 0x03D9) */

#define BIT_SHIFT_AXI_HRPWM				0
#define BIT_MASK_AXI_HRPWM				0xff
#define BIT_AXI_HRPWM(x)				(((x) & BIT_MASK_AXI_HRPWM) << BIT_SHIFT_AXI_HRPWM)
#define BITS_AXI_HRPWM					(BIT_MASK_AXI_HRPWM << BIT_SHIFT_AXI_HRPWM)
#define BIT_CLEAR_AXI_HRPWM(x)				((x) & (~BITS_AXI_HRPWM))
#define BIT_GET_AXI_HRPWM(x)				(((x) >> BIT_SHIFT_AXI_HRPWM) & BIT_MASK_AXI_HRPWM)
#define BIT_SET_AXI_HRPWM(x, v)			(BIT_CLEAR_AXI_HRPWM(x) | BIT_AXI_HRPWM(v))

/* 2 REG_AXI_HCPWM1_V1			(Offset 0x03DA) */

#define BIT_SHIFT_AXI_HCPWM				0
#define BIT_MASK_AXI_HCPWM				0xff
#define BIT_AXI_HCPWM(x)				(((x) & BIT_MASK_AXI_HCPWM) << BIT_SHIFT_AXI_HCPWM)
#define BITS_AXI_HCPWM					(BIT_MASK_AXI_HCPWM << BIT_SHIFT_AXI_HCPWM)
#define BIT_CLEAR_AXI_HCPWM(x)				((x) & (~BITS_AXI_HCPWM))
#define BIT_GET_AXI_HCPWM(x)				(((x) >> BIT_SHIFT_AXI_HCPWM) & BIT_MASK_AXI_HCPWM)
#define BIT_SET_AXI_HCPWM(x, v)			(BIT_CLEAR_AXI_HCPWM(x) | BIT_AXI_HCPWM(v))

/* 2 REG_AXI_CTRL2				(Offset 0x03DB) */

#define BIT_DIS_TXDMA_PRE				BIT(7)
#define BIT_DIS_RXDMA_PRE				BIT(6)

#define BIT_SHIFT_HPS_CLKR_AXI				4
#define BIT_MASK_HPS_CLKR_AXI				0x3
#define BIT_HPS_CLKR_AXI(x)				(((x) & BIT_MASK_HPS_CLKR_AXI) << BIT_SHIFT_HPS_CLKR_AXI)
#define BITS_HPS_CLKR_AXI				(BIT_MASK_HPS_CLKR_AXI << BIT_SHIFT_HPS_CLKR_AXI)
#define BIT_CLEAR_HPS_CLKR_AXI(x)			((x) & (~BITS_HPS_CLKR_AXI))
#define BIT_GET_HPS_CLKR_AXI(x)			(((x) >> BIT_SHIFT_HPS_CLKR_AXI) & BIT_MASK_HPS_CLKR_AXI)
#define BIT_SET_HPS_CLKR_AXI(x, v)			(BIT_CLEAR_HPS_CLKR_AXI(x) | BIT_HPS_CLKR_AXI(v))

#define BIT_AXI_INT					BIT(3)
#define BIT_TXFLAG_EXIT_L1_EN				BIT(2)
#define BIT_EN_RXDMA_ALIGN				BIT(1)
#define BIT_EN_TXDMA_ALIGN				BIT(0)

/* 2 REG_AXI_HRPWM2_V1			(Offset 0x03DC) */

#define BIT_SHIFT_AXI_HRPWM2				0
#define BIT_MASK_AXI_HRPWM2				0xffff
#define BIT_AXI_HRPWM2(x)				(((x) & BIT_MASK_AXI_HRPWM2) << BIT_SHIFT_AXI_HRPWM2)
#define BITS_AXI_HRPWM2				(BIT_MASK_AXI_HRPWM2 << BIT_SHIFT_AXI_HRPWM2)
#define BIT_CLEAR_AXI_HRPWM2(x)			((x) & (~BITS_AXI_HRPWM2))
#define BIT_GET_AXI_HRPWM2(x)				(((x) >> BIT_SHIFT_AXI_HRPWM2) & BIT_MASK_AXI_HRPWM2)
#define BIT_SET_AXI_HRPWM2(x, v)			(BIT_CLEAR_AXI_HRPWM2(x) | BIT_AXI_HRPWM2(v))

/* 2 REG_AXI_HCPWM2_V1			(Offset 0x03DE) */

#define BIT_SHIFT_AXI_HCPWM2				0
#define BIT_MASK_AXI_HCPWM2				0xffff
#define BIT_AXI_HCPWM2(x)				(((x) & BIT_MASK_AXI_HCPWM2) << BIT_SHIFT_AXI_HCPWM2)
#define BITS_AXI_HCPWM2				(BIT_MASK_AXI_HCPWM2 << BIT_SHIFT_AXI_HCPWM2)
#define BIT_CLEAR_AXI_HCPWM2(x)			((x) & (~BITS_AXI_HCPWM2))
#define BIT_GET_AXI_HCPWM2(x)				(((x) >> BIT_SHIFT_AXI_HCPWM2) & BIT_MASK_AXI_HCPWM2)
#define BIT_SET_AXI_HCPWM2(x, v)			(BIT_CLEAR_AXI_HCPWM2(x) | BIT_AXI_HCPWM2(v))

/* 2 REG_AXI_H2C_MSG_V1			(Offset 0x03E0) */

#define BIT_SHIFT_DRV2FW_INFO				0
#define BIT_MASK_DRV2FW_INFO				0xffffffffL
#define BIT_DRV2FW_INFO(x)				(((x) & BIT_MASK_DRV2FW_INFO) << BIT_SHIFT_DRV2FW_INFO)
#define BITS_DRV2FW_INFO				(BIT_MASK_DRV2FW_INFO << BIT_SHIFT_DRV2FW_INFO)
#define BIT_CLEAR_DRV2FW_INFO(x)			((x) & (~BITS_DRV2FW_INFO))
#define BIT_GET_DRV2FW_INFO(x)				(((x) >> BIT_SHIFT_DRV2FW_INFO) & BIT_MASK_DRV2FW_INFO)
#define BIT_SET_DRV2FW_INFO(x, v)			(BIT_CLEAR_DRV2FW_INFO(x) | BIT_DRV2FW_INFO(v))

/* 2 REG_AXI_C2H_MSG_V1			(Offset 0x03E4) */

#define BIT_SHIFT_HCI_AXI_C2H_MSG			0
#define BIT_MASK_HCI_AXI_C2H_MSG			0xffffffffL
#define BIT_HCI_AXI_C2H_MSG(x)				(((x) & BIT_MASK_HCI_AXI_C2H_MSG) << BIT_SHIFT_HCI_AXI_C2H_MSG)
#define BITS_HCI_AXI_C2H_MSG				(BIT_MASK_HCI_AXI_C2H_MSG << BIT_SHIFT_HCI_AXI_C2H_MSG)
#define BIT_CLEAR_HCI_AXI_C2H_MSG(x)			((x) & (~BITS_HCI_AXI_C2H_MSG))
#define BIT_GET_HCI_AXI_C2H_MSG(x)			(((x) >> BIT_SHIFT_HCI_AXI_C2H_MSG) & BIT_MASK_HCI_AXI_C2H_MSG)
#define BIT_SET_HCI_AXI_C2H_MSG(x, v)			(BIT_CLEAR_HCI_AXI_C2H_MSG(x) | BIT_HCI_AXI_C2H_MSG(v))

/* 2 REG_AXIDMA_ISR				(Offset 0x03E8) */

#define BIT_SETBCNDERR7				BIT(31)
#define BIT_SETBCNDERR6				BIT(30)
#define BIT_SETBCNDERR5				BIT(29)
#define BIT_SETBCNDERR4				BIT(28)
#define BIT_SETBCNDERR3				BIT(27)
#define BIT_SETBCNDERR2				BIT(26)
#define BIT_SETBCNDERR1				BIT(25)
#define BIT_SETBCNDERR0				BIT(24)
#define BIT_SETBCNDOK7					BIT(23)
#define BIT_SETBCNDOK6					BIT(22)
#define BIT_SETBCNDOK5					BIT(21)
#define BIT_SETBCNDOK4					BIT(20)
#define BIT_SETBCNDOK3					BIT(19)
#define BIT_SETBCNDOK2					BIT(18)
#define BIT_SETBCNDOK1					BIT(17)
#define BIT_SETBCNDOK0					BIT(16)
#define BIT_SETHIGHDOK					BIT(8)
#define BIT_SETMGDOK					BIT(6)
#define BIT_SETBKDOK					BIT(5)
#define BIT_SETBEDOK					BIT(4)
#define BIT_SETVIDOK					BIT(3)
#define BIT_SETVODOK					BIT(2)
#define BIT_SETRDU					BIT(1)
#define BIT_SETRXOK					BIT(0)

/* 2 REG_AXIDMA_IMR				(Offset 0x03EC) */

#define BIT_SETBCNDERR7_MSK				BIT(31)
#define BIT_SETBCNDERR6_MSK				BIT(30)
#define BIT_SETBCNDERR5_MSK				BIT(29)
#define BIT_SETBCNDERR4_MSK				BIT(28)
#define BIT_SETBCNDERR3_MSK				BIT(27)
#define BIT_SETBCNDERR2_MSK				BIT(26)
#define BIT_SETBCNDERR1_MSK				BIT(25)
#define BIT_SETBCNDERR0_MSK				BIT(24)
#define BIT_SETBCNDOK7_MSK				BIT(23)
#define BIT_SETBCNDOK6_MSK				BIT(22)
#define BIT_SETBCNDOK5_MSK				BIT(21)
#define BIT_SETBCNDOK4_MSK				BIT(20)
#define BIT_SETBCNDOK3_MSK				BIT(19)
#define BIT_SETBCNDOK2_MSK				BIT(18)
#define BIT_SETBCNDOK1_MSK				BIT(17)
#define BIT_SETBCNDOK0_MSK				BIT(16)
#define BIT_SETHIGHDOK_MSK				BIT(8)
#define BIT_SETMGDOK_MSK				BIT(6)
#define BIT_SETBKDOK_MSK				BIT(5)
#define BIT_SETBEDOK_MSK				BIT(4)
#define BIT_SETVIDOK_MSK				BIT(3)
#define BIT_SETVODOK_MSK				BIT(2)
#define BIT_SETRDU_MSK					BIT(1)
#define BIT_SETRXOK_MSK				BIT(0)

/* 2 REG_DBG_FLAG_V1				(Offset 0x03F0) */

#define BIT_RX_STUCK_AMB				BIT(9)
#define BIT_TX_STUCK_AMB				BIT(8)
#define BIT_MST_BUSY					BIT(3)
#define BIT_RXBUF_ZERO_ERROR				BIT(2)
#define BIT_TXDESC_SIZE_ERROR				BIT(1)
#define BIT_EN_STUCK_DBG_AMB				BIT(0)

/* 2 REG_AXIDMA_MIX_CFG			(Offset 0x03F8) */

#define BIT_SHIFT_WATCH_DOG_RECORD_V1			10
#define BIT_MASK_WATCH_DOG_RECORD_V1			0x3fff
#define BIT_WATCH_DOG_RECORD_V1(x)			(((x) & BIT_MASK_WATCH_DOG_RECORD_V1) << BIT_SHIFT_WATCH_DOG_RECORD_V1)
#define BITS_WATCH_DOG_RECORD_V1			(BIT_MASK_WATCH_DOG_RECORD_V1 << BIT_SHIFT_WATCH_DOG_RECORD_V1)
#define BIT_CLEAR_WATCH_DOG_RECORD_V1(x)		((x) & (~BITS_WATCH_DOG_RECORD_V1))
#define BIT_GET_WATCH_DOG_RECORD_V1(x)			(((x) >> BIT_SHIFT_WATCH_DOG_RECORD_V1) & BIT_MASK_WATCH_DOG_RECORD_V1)
#define BIT_SET_WATCH_DOG_RECORD_V1(x, v)		(BIT_CLEAR_WATCH_DOG_RECORD_V1(x) | BIT_WATCH_DOG_RECORD_V1(v))

#define BIT_R_IO_TIMEOUT_FLAG_V1			BIT(9)
#define BIT_EN_WATCH_DOG				BIT(8)

/* 2 REG_HCI_MIX_CFG				(Offset 0x03FC) */

#define BIT_SHIFT_DBG_SEL_AMB				25
#define BIT_MASK_DBG_SEL_AMB				0x3
#define BIT_DBG_SEL_AMB(x)				(((x) & BIT_MASK_DBG_SEL_AMB) << BIT_SHIFT_DBG_SEL_AMB)
#define BITS_DBG_SEL_AMB				(BIT_MASK_DBG_SEL_AMB << BIT_SHIFT_DBG_SEL_AMB)
#define BIT_CLEAR_DBG_SEL_AMB(x)			((x) & (~BITS_DBG_SEL_AMB))
#define BIT_GET_DBG_SEL_AMB(x)				(((x) >> BIT_SHIFT_DBG_SEL_AMB) & BIT_MASK_DBG_SEL_AMB)
#define BIT_SET_DBG_SEL_AMB(x, v)			(BIT_CLEAR_DBG_SEL_AMB(x) | BIT_DBG_SEL_AMB(v))

#define BIT_EN_OUTSTD					BIT(24)

#define BIT_SHIFT_RDE_SFF_WR_PTR			15
#define BIT_MASK_RDE_SFF_WR_PTR			0x1f
#define BIT_RDE_SFF_WR_PTR(x)				(((x) & BIT_MASK_RDE_SFF_WR_PTR) << BIT_SHIFT_RDE_SFF_WR_PTR)
#define BITS_RDE_SFF_WR_PTR				(BIT_MASK_RDE_SFF_WR_PTR << BIT_SHIFT_RDE_SFF_WR_PTR)
#define BIT_CLEAR_RDE_SFF_WR_PTR(x)			((x) & (~BITS_RDE_SFF_WR_PTR))
#define BIT_GET_RDE_SFF_WR_PTR(x)			(((x) >> BIT_SHIFT_RDE_SFF_WR_PTR) & BIT_MASK_RDE_SFF_WR_PTR)
#define BIT_SET_RDE_SFF_WR_PTR(x, v)			(BIT_CLEAR_RDE_SFF_WR_PTR(x) | BIT_RDE_SFF_WR_PTR(v))

#define BIT_SHIFT_RDE_SFF_RD_PTR			10
#define BIT_MASK_RDE_SFF_RD_PTR			0x1f
#define BIT_RDE_SFF_RD_PTR(x)				(((x) & BIT_MASK_RDE_SFF_RD_PTR) << BIT_SHIFT_RDE_SFF_RD_PTR)
#define BITS_RDE_SFF_RD_PTR				(BIT_MASK_RDE_SFF_RD_PTR << BIT_SHIFT_RDE_SFF_RD_PTR)
#define BIT_CLEAR_RDE_SFF_RD_PTR(x)			((x) & (~BITS_RDE_SFF_RD_PTR))
#define BIT_GET_RDE_SFF_RD_PTR(x)			(((x) >> BIT_SHIFT_RDE_SFF_RD_PTR) & BIT_MASK_RDE_SFF_RD_PTR)
#define BIT_SET_RDE_SFF_RD_PTR(x, v)			(BIT_CLEAR_RDE_SFF_RD_PTR(x) | BIT_RDE_SFF_RD_PTR(v))

#define BIT_SHIFT_TDE_SFF_WR_PTR			5
#define BIT_MASK_TDE_SFF_WR_PTR			0x1f
#define BIT_TDE_SFF_WR_PTR(x)				(((x) & BIT_MASK_TDE_SFF_WR_PTR) << BIT_SHIFT_TDE_SFF_WR_PTR)
#define BITS_TDE_SFF_WR_PTR				(BIT_MASK_TDE_SFF_WR_PTR << BIT_SHIFT_TDE_SFF_WR_PTR)
#define BIT_CLEAR_TDE_SFF_WR_PTR(x)			((x) & (~BITS_TDE_SFF_WR_PTR))
#define BIT_GET_TDE_SFF_WR_PTR(x)			(((x) >> BIT_SHIFT_TDE_SFF_WR_PTR) & BIT_MASK_TDE_SFF_WR_PTR)
#define BIT_SET_TDE_SFF_WR_PTR(x, v)			(BIT_CLEAR_TDE_SFF_WR_PTR(x) | BIT_TDE_SFF_WR_PTR(v))

#define BIT_SHIFT_TDE_SFF_RD_PTR			0
#define BIT_MASK_TDE_SFF_RD_PTR			0x1f
#define BIT_TDE_SFF_RD_PTR(x)				(((x) & BIT_MASK_TDE_SFF_RD_PTR) << BIT_SHIFT_TDE_SFF_RD_PTR)
#define BITS_TDE_SFF_RD_PTR				(BIT_MASK_TDE_SFF_RD_PTR << BIT_SHIFT_TDE_SFF_RD_PTR)
#define BIT_CLEAR_TDE_SFF_RD_PTR(x)			((x) & (~BITS_TDE_SFF_RD_PTR))
#define BIT_GET_TDE_SFF_RD_PTR(x)			(((x) >> BIT_SHIFT_TDE_SFF_RD_PTR) & BIT_MASK_TDE_SFF_RD_PTR)
#define BIT_SET_TDE_SFF_RD_PTR(x, v)			(BIT_CLEAR_TDE_SFF_RD_PTR(x) | BIT_TDE_SFF_RD_PTR(v))

/* 2 REG_Q0_INFO				(Offset 0x0400) */

#define BIT_SHIFT_QUEUEMACID_Q0_V1			25
#define BIT_MASK_QUEUEMACID_Q0_V1			0x7f
#define BIT_QUEUEMACID_Q0_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q0_V1) << BIT_SHIFT_QUEUEMACID_Q0_V1)
#define BITS_QUEUEMACID_Q0_V1				(BIT_MASK_QUEUEMACID_Q0_V1 << BIT_SHIFT_QUEUEMACID_Q0_V1)
#define BIT_CLEAR_QUEUEMACID_Q0_V1(x)			((x) & (~BITS_QUEUEMACID_Q0_V1))
#define BIT_GET_QUEUEMACID_Q0_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q0_V1) & BIT_MASK_QUEUEMACID_Q0_V1)
#define BIT_SET_QUEUEMACID_Q0_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q0_V1(x) | BIT_QUEUEMACID_Q0_V1(v))

#define BIT_SHIFT_QUEUEAC_Q0_V1			23
#define BIT_MASK_QUEUEAC_Q0_V1				0x3
#define BIT_QUEUEAC_Q0_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q0_V1) << BIT_SHIFT_QUEUEAC_Q0_V1)
#define BITS_QUEUEAC_Q0_V1				(BIT_MASK_QUEUEAC_Q0_V1 << BIT_SHIFT_QUEUEAC_Q0_V1)
#define BIT_CLEAR_QUEUEAC_Q0_V1(x)			((x) & (~BITS_QUEUEAC_Q0_V1))
#define BIT_GET_QUEUEAC_Q0_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q0_V1) & BIT_MASK_QUEUEAC_Q0_V1)
#define BIT_SET_QUEUEAC_Q0_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q0_V1(x) | BIT_QUEUEAC_Q0_V1(v))

#define BIT_TIDEMPTY_Q0_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q0_V2			11
#define BIT_MASK_TAIL_PKT_Q0_V2			0x7ff
#define BIT_TAIL_PKT_Q0_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q0_V2) << BIT_SHIFT_TAIL_PKT_Q0_V2)
#define BITS_TAIL_PKT_Q0_V2				(BIT_MASK_TAIL_PKT_Q0_V2 << BIT_SHIFT_TAIL_PKT_Q0_V2)
#define BIT_CLEAR_TAIL_PKT_Q0_V2(x)			((x) & (~BITS_TAIL_PKT_Q0_V2))
#define BIT_GET_TAIL_PKT_Q0_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q0_V2) & BIT_MASK_TAIL_PKT_Q0_V2)
#define BIT_SET_TAIL_PKT_Q0_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q0_V2(x) | BIT_TAIL_PKT_Q0_V2(v))

#define BIT_SHIFT_HEAD_PKT_Q0_V1			0
#define BIT_MASK_HEAD_PKT_Q0_V1			0x7ff
#define BIT_HEAD_PKT_Q0_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q0_V1) << BIT_SHIFT_HEAD_PKT_Q0_V1)
#define BITS_HEAD_PKT_Q0_V1				(BIT_MASK_HEAD_PKT_Q0_V1 << BIT_SHIFT_HEAD_PKT_Q0_V1)
#define BIT_CLEAR_HEAD_PKT_Q0_V1(x)			((x) & (~BITS_HEAD_PKT_Q0_V1))
#define BIT_GET_HEAD_PKT_Q0_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q0_V1) & BIT_MASK_HEAD_PKT_Q0_V1)
#define BIT_SET_HEAD_PKT_Q0_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q0_V1(x) | BIT_HEAD_PKT_Q0_V1(v))

/* 2 REG_Q1_INFO				(Offset 0x0404) */

#define BIT_SHIFT_QUEUEMACID_Q1_V1			25
#define BIT_MASK_QUEUEMACID_Q1_V1			0x7f
#define BIT_QUEUEMACID_Q1_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q1_V1) << BIT_SHIFT_QUEUEMACID_Q1_V1)
#define BITS_QUEUEMACID_Q1_V1				(BIT_MASK_QUEUEMACID_Q1_V1 << BIT_SHIFT_QUEUEMACID_Q1_V1)
#define BIT_CLEAR_QUEUEMACID_Q1_V1(x)			((x) & (~BITS_QUEUEMACID_Q1_V1))
#define BIT_GET_QUEUEMACID_Q1_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q1_V1) & BIT_MASK_QUEUEMACID_Q1_V1)
#define BIT_SET_QUEUEMACID_Q1_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q1_V1(x) | BIT_QUEUEMACID_Q1_V1(v))

#define BIT_SHIFT_QUEUEAC_Q1_V1			23
#define BIT_MASK_QUEUEAC_Q1_V1				0x3
#define BIT_QUEUEAC_Q1_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q1_V1) << BIT_SHIFT_QUEUEAC_Q1_V1)
#define BITS_QUEUEAC_Q1_V1				(BIT_MASK_QUEUEAC_Q1_V1 << BIT_SHIFT_QUEUEAC_Q1_V1)
#define BIT_CLEAR_QUEUEAC_Q1_V1(x)			((x) & (~BITS_QUEUEAC_Q1_V1))
#define BIT_GET_QUEUEAC_Q1_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q1_V1) & BIT_MASK_QUEUEAC_Q1_V1)
#define BIT_SET_QUEUEAC_Q1_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q1_V1(x) | BIT_QUEUEAC_Q1_V1(v))

#define BIT_TIDEMPTY_Q1_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q1_V2			11
#define BIT_MASK_TAIL_PKT_Q1_V2			0x7ff
#define BIT_TAIL_PKT_Q1_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q1_V2) << BIT_SHIFT_TAIL_PKT_Q1_V2)
#define BITS_TAIL_PKT_Q1_V2				(BIT_MASK_TAIL_PKT_Q1_V2 << BIT_SHIFT_TAIL_PKT_Q1_V2)
#define BIT_CLEAR_TAIL_PKT_Q1_V2(x)			((x) & (~BITS_TAIL_PKT_Q1_V2))
#define BIT_GET_TAIL_PKT_Q1_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q1_V2) & BIT_MASK_TAIL_PKT_Q1_V2)
#define BIT_SET_TAIL_PKT_Q1_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q1_V2(x) | BIT_TAIL_PKT_Q1_V2(v))

#define BIT_SHIFT_HEAD_PKT_Q1_V1			0
#define BIT_MASK_HEAD_PKT_Q1_V1			0x7ff
#define BIT_HEAD_PKT_Q1_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q1_V1) << BIT_SHIFT_HEAD_PKT_Q1_V1)
#define BITS_HEAD_PKT_Q1_V1				(BIT_MASK_HEAD_PKT_Q1_V1 << BIT_SHIFT_HEAD_PKT_Q1_V1)
#define BIT_CLEAR_HEAD_PKT_Q1_V1(x)			((x) & (~BITS_HEAD_PKT_Q1_V1))
#define BIT_GET_HEAD_PKT_Q1_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q1_V1) & BIT_MASK_HEAD_PKT_Q1_V1)
#define BIT_SET_HEAD_PKT_Q1_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q1_V1(x) | BIT_HEAD_PKT_Q1_V1(v))

/* 2 REG_Q2_INFO				(Offset 0x0408) */

#define BIT_SHIFT_QUEUEMACID_Q2_V1			25
#define BIT_MASK_QUEUEMACID_Q2_V1			0x7f
#define BIT_QUEUEMACID_Q2_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q2_V1) << BIT_SHIFT_QUEUEMACID_Q2_V1)
#define BITS_QUEUEMACID_Q2_V1				(BIT_MASK_QUEUEMACID_Q2_V1 << BIT_SHIFT_QUEUEMACID_Q2_V1)
#define BIT_CLEAR_QUEUEMACID_Q2_V1(x)			((x) & (~BITS_QUEUEMACID_Q2_V1))
#define BIT_GET_QUEUEMACID_Q2_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q2_V1) & BIT_MASK_QUEUEMACID_Q2_V1)
#define BIT_SET_QUEUEMACID_Q2_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q2_V1(x) | BIT_QUEUEMACID_Q2_V1(v))

#define BIT_SHIFT_QUEUEAC_Q2_V1			23
#define BIT_MASK_QUEUEAC_Q2_V1				0x3
#define BIT_QUEUEAC_Q2_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q2_V1) << BIT_SHIFT_QUEUEAC_Q2_V1)
#define BITS_QUEUEAC_Q2_V1				(BIT_MASK_QUEUEAC_Q2_V1 << BIT_SHIFT_QUEUEAC_Q2_V1)
#define BIT_CLEAR_QUEUEAC_Q2_V1(x)			((x) & (~BITS_QUEUEAC_Q2_V1))
#define BIT_GET_QUEUEAC_Q2_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q2_V1) & BIT_MASK_QUEUEAC_Q2_V1)
#define BIT_SET_QUEUEAC_Q2_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q2_V1(x) | BIT_QUEUEAC_Q2_V1(v))

#define BIT_TIDEMPTY_Q2_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q2_V2			11
#define BIT_MASK_TAIL_PKT_Q2_V2			0x7ff
#define BIT_TAIL_PKT_Q2_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q2_V2) << BIT_SHIFT_TAIL_PKT_Q2_V2)
#define BITS_TAIL_PKT_Q2_V2				(BIT_MASK_TAIL_PKT_Q2_V2 << BIT_SHIFT_TAIL_PKT_Q2_V2)
#define BIT_CLEAR_TAIL_PKT_Q2_V2(x)			((x) & (~BITS_TAIL_PKT_Q2_V2))
#define BIT_GET_TAIL_PKT_Q2_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q2_V2) & BIT_MASK_TAIL_PKT_Q2_V2)
#define BIT_SET_TAIL_PKT_Q2_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q2_V2(x) | BIT_TAIL_PKT_Q2_V2(v))

#define BIT_SHIFT_HEAD_PKT_Q2_V1			0
#define BIT_MASK_HEAD_PKT_Q2_V1			0x7ff
#define BIT_HEAD_PKT_Q2_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q2_V1) << BIT_SHIFT_HEAD_PKT_Q2_V1)
#define BITS_HEAD_PKT_Q2_V1				(BIT_MASK_HEAD_PKT_Q2_V1 << BIT_SHIFT_HEAD_PKT_Q2_V1)
#define BIT_CLEAR_HEAD_PKT_Q2_V1(x)			((x) & (~BITS_HEAD_PKT_Q2_V1))
#define BIT_GET_HEAD_PKT_Q2_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q2_V1) & BIT_MASK_HEAD_PKT_Q2_V1)
#define BIT_SET_HEAD_PKT_Q2_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q2_V1(x) | BIT_HEAD_PKT_Q2_V1(v))

/* 2 REG_Q3_INFO				(Offset 0x040C) */

#define BIT_SHIFT_QUEUEMACID_Q3_V1			25
#define BIT_MASK_QUEUEMACID_Q3_V1			0x7f
#define BIT_QUEUEMACID_Q3_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q3_V1) << BIT_SHIFT_QUEUEMACID_Q3_V1)
#define BITS_QUEUEMACID_Q3_V1				(BIT_MASK_QUEUEMACID_Q3_V1 << BIT_SHIFT_QUEUEMACID_Q3_V1)
#define BIT_CLEAR_QUEUEMACID_Q3_V1(x)			((x) & (~BITS_QUEUEMACID_Q3_V1))
#define BIT_GET_QUEUEMACID_Q3_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q3_V1) & BIT_MASK_QUEUEMACID_Q3_V1)
#define BIT_SET_QUEUEMACID_Q3_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q3_V1(x) | BIT_QUEUEMACID_Q3_V1(v))

#define BIT_SHIFT_QUEUEAC_Q3_V1			23
#define BIT_MASK_QUEUEAC_Q3_V1				0x3
#define BIT_QUEUEAC_Q3_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q3_V1) << BIT_SHIFT_QUEUEAC_Q3_V1)
#define BITS_QUEUEAC_Q3_V1				(BIT_MASK_QUEUEAC_Q3_V1 << BIT_SHIFT_QUEUEAC_Q3_V1)
#define BIT_CLEAR_QUEUEAC_Q3_V1(x)			((x) & (~BITS_QUEUEAC_Q3_V1))
#define BIT_GET_QUEUEAC_Q3_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q3_V1) & BIT_MASK_QUEUEAC_Q3_V1)
#define BIT_SET_QUEUEAC_Q3_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q3_V1(x) | BIT_QUEUEAC_Q3_V1(v))

#define BIT_TIDEMPTY_Q3_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q3_V2			11
#define BIT_MASK_TAIL_PKT_Q3_V2			0x7ff
#define BIT_TAIL_PKT_Q3_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q3_V2) << BIT_SHIFT_TAIL_PKT_Q3_V2)
#define BITS_TAIL_PKT_Q3_V2				(BIT_MASK_TAIL_PKT_Q3_V2 << BIT_SHIFT_TAIL_PKT_Q3_V2)
#define BIT_CLEAR_TAIL_PKT_Q3_V2(x)			((x) & (~BITS_TAIL_PKT_Q3_V2))
#define BIT_GET_TAIL_PKT_Q3_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q3_V2) & BIT_MASK_TAIL_PKT_Q3_V2)
#define BIT_SET_TAIL_PKT_Q3_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q3_V2(x) | BIT_TAIL_PKT_Q3_V2(v))

#define BIT_SHIFT_HEAD_PKT_Q3_V1			0
#define BIT_MASK_HEAD_PKT_Q3_V1			0x7ff
#define BIT_HEAD_PKT_Q3_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q3_V1) << BIT_SHIFT_HEAD_PKT_Q3_V1)
#define BITS_HEAD_PKT_Q3_V1				(BIT_MASK_HEAD_PKT_Q3_V1 << BIT_SHIFT_HEAD_PKT_Q3_V1)
#define BIT_CLEAR_HEAD_PKT_Q3_V1(x)			((x) & (~BITS_HEAD_PKT_Q3_V1))
#define BIT_GET_HEAD_PKT_Q3_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q3_V1) & BIT_MASK_HEAD_PKT_Q3_V1)
#define BIT_SET_HEAD_PKT_Q3_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q3_V1(x) | BIT_HEAD_PKT_Q3_V1(v))

/* 2 REG_MGQ_INFO				(Offset 0x0410) */

#define BIT_SHIFT_QUEUEMACID_MGQ_V1			25
#define BIT_MASK_QUEUEMACID_MGQ_V1			0x7f
#define BIT_QUEUEMACID_MGQ_V1(x)			(((x) & BIT_MASK_QUEUEMACID_MGQ_V1) << BIT_SHIFT_QUEUEMACID_MGQ_V1)
#define BITS_QUEUEMACID_MGQ_V1				(BIT_MASK_QUEUEMACID_MGQ_V1 << BIT_SHIFT_QUEUEMACID_MGQ_V1)
#define BIT_CLEAR_QUEUEMACID_MGQ_V1(x)			((x) & (~BITS_QUEUEMACID_MGQ_V1))
#define BIT_GET_QUEUEMACID_MGQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_MGQ_V1) & BIT_MASK_QUEUEMACID_MGQ_V1)
#define BIT_SET_QUEUEMACID_MGQ_V1(x, v)		(BIT_CLEAR_QUEUEMACID_MGQ_V1(x) | BIT_QUEUEMACID_MGQ_V1(v))

#define BIT_SHIFT_QUEUEAC_MGQ_V1			23
#define BIT_MASK_QUEUEAC_MGQ_V1			0x3
#define BIT_QUEUEAC_MGQ_V1(x)				(((x) & BIT_MASK_QUEUEAC_MGQ_V1) << BIT_SHIFT_QUEUEAC_MGQ_V1)
#define BITS_QUEUEAC_MGQ_V1				(BIT_MASK_QUEUEAC_MGQ_V1 << BIT_SHIFT_QUEUEAC_MGQ_V1)
#define BIT_CLEAR_QUEUEAC_MGQ_V1(x)			((x) & (~BITS_QUEUEAC_MGQ_V1))
#define BIT_GET_QUEUEAC_MGQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_MGQ_V1) & BIT_MASK_QUEUEAC_MGQ_V1)
#define BIT_SET_QUEUEAC_MGQ_V1(x, v)			(BIT_CLEAR_QUEUEAC_MGQ_V1(x) | BIT_QUEUEAC_MGQ_V1(v))

#define BIT_TIDEMPTY_MGQ_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_MGQ_V2			11
#define BIT_MASK_TAIL_PKT_MGQ_V2			0x7ff
#define BIT_TAIL_PKT_MGQ_V2(x)				(((x) & BIT_MASK_TAIL_PKT_MGQ_V2) << BIT_SHIFT_TAIL_PKT_MGQ_V2)
#define BITS_TAIL_PKT_MGQ_V2				(BIT_MASK_TAIL_PKT_MGQ_V2 << BIT_SHIFT_TAIL_PKT_MGQ_V2)
#define BIT_CLEAR_TAIL_PKT_MGQ_V2(x)			((x) & (~BITS_TAIL_PKT_MGQ_V2))
#define BIT_GET_TAIL_PKT_MGQ_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_MGQ_V2) & BIT_MASK_TAIL_PKT_MGQ_V2)
#define BIT_SET_TAIL_PKT_MGQ_V2(x, v)			(BIT_CLEAR_TAIL_PKT_MGQ_V2(x) | BIT_TAIL_PKT_MGQ_V2(v))

#define BIT_SHIFT_HEAD_PKT_MGQ_V1			0
#define BIT_MASK_HEAD_PKT_MGQ_V1			0x7ff
#define BIT_HEAD_PKT_MGQ_V1(x)				(((x) & BIT_MASK_HEAD_PKT_MGQ_V1) << BIT_SHIFT_HEAD_PKT_MGQ_V1)
#define BITS_HEAD_PKT_MGQ_V1				(BIT_MASK_HEAD_PKT_MGQ_V1 << BIT_SHIFT_HEAD_PKT_MGQ_V1)
#define BIT_CLEAR_HEAD_PKT_MGQ_V1(x)			((x) & (~BITS_HEAD_PKT_MGQ_V1))
#define BIT_GET_HEAD_PKT_MGQ_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_MGQ_V1) & BIT_MASK_HEAD_PKT_MGQ_V1)
#define BIT_SET_HEAD_PKT_MGQ_V1(x, v)			(BIT_CLEAR_HEAD_PKT_MGQ_V1(x) | BIT_HEAD_PKT_MGQ_V1(v))

/* 2 REG_HIQ_INFO				(Offset 0x0414) */

#define BIT_SHIFT_QUEUEMACID_HIQ_V1			25
#define BIT_MASK_QUEUEMACID_HIQ_V1			0x7f
#define BIT_QUEUEMACID_HIQ_V1(x)			(((x) & BIT_MASK_QUEUEMACID_HIQ_V1) << BIT_SHIFT_QUEUEMACID_HIQ_V1)
#define BITS_QUEUEMACID_HIQ_V1				(BIT_MASK_QUEUEMACID_HIQ_V1 << BIT_SHIFT_QUEUEMACID_HIQ_V1)
#define BIT_CLEAR_QUEUEMACID_HIQ_V1(x)			((x) & (~BITS_QUEUEMACID_HIQ_V1))
#define BIT_GET_QUEUEMACID_HIQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_HIQ_V1) & BIT_MASK_QUEUEMACID_HIQ_V1)
#define BIT_SET_QUEUEMACID_HIQ_V1(x, v)		(BIT_CLEAR_QUEUEMACID_HIQ_V1(x) | BIT_QUEUEMACID_HIQ_V1(v))

#define BIT_SHIFT_QUEUEAC_HIQ_V1			23
#define BIT_MASK_QUEUEAC_HIQ_V1			0x3
#define BIT_QUEUEAC_HIQ_V1(x)				(((x) & BIT_MASK_QUEUEAC_HIQ_V1) << BIT_SHIFT_QUEUEAC_HIQ_V1)
#define BITS_QUEUEAC_HIQ_V1				(BIT_MASK_QUEUEAC_HIQ_V1 << BIT_SHIFT_QUEUEAC_HIQ_V1)
#define BIT_CLEAR_QUEUEAC_HIQ_V1(x)			((x) & (~BITS_QUEUEAC_HIQ_V1))
#define BIT_GET_QUEUEAC_HIQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_HIQ_V1) & BIT_MASK_QUEUEAC_HIQ_V1)
#define BIT_SET_QUEUEAC_HIQ_V1(x, v)			(BIT_CLEAR_QUEUEAC_HIQ_V1(x) | BIT_QUEUEAC_HIQ_V1(v))

#define BIT_TIDEMPTY_HIQ_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_HIQ_V2			11
#define BIT_MASK_TAIL_PKT_HIQ_V2			0x7ff
#define BIT_TAIL_PKT_HIQ_V2(x)				(((x) & BIT_MASK_TAIL_PKT_HIQ_V2) << BIT_SHIFT_TAIL_PKT_HIQ_V2)
#define BITS_TAIL_PKT_HIQ_V2				(BIT_MASK_TAIL_PKT_HIQ_V2 << BIT_SHIFT_TAIL_PKT_HIQ_V2)
#define BIT_CLEAR_TAIL_PKT_HIQ_V2(x)			((x) & (~BITS_TAIL_PKT_HIQ_V2))
#define BIT_GET_TAIL_PKT_HIQ_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_HIQ_V2) & BIT_MASK_TAIL_PKT_HIQ_V2)
#define BIT_SET_TAIL_PKT_HIQ_V2(x, v)			(BIT_CLEAR_TAIL_PKT_HIQ_V2(x) | BIT_TAIL_PKT_HIQ_V2(v))

#define BIT_SHIFT_HEAD_PKT_HIQ_V1			0
#define BIT_MASK_HEAD_PKT_HIQ_V1			0x7ff
#define BIT_HEAD_PKT_HIQ_V1(x)				(((x) & BIT_MASK_HEAD_PKT_HIQ_V1) << BIT_SHIFT_HEAD_PKT_HIQ_V1)
#define BITS_HEAD_PKT_HIQ_V1				(BIT_MASK_HEAD_PKT_HIQ_V1 << BIT_SHIFT_HEAD_PKT_HIQ_V1)
#define BIT_CLEAR_HEAD_PKT_HIQ_V1(x)			((x) & (~BITS_HEAD_PKT_HIQ_V1))
#define BIT_GET_HEAD_PKT_HIQ_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_HIQ_V1) & BIT_MASK_HEAD_PKT_HIQ_V1)
#define BIT_SET_HEAD_PKT_HIQ_V1(x, v)			(BIT_CLEAR_HEAD_PKT_HIQ_V1(x) | BIT_HEAD_PKT_HIQ_V1(v))

/* 2 REG_BCNQ_INFO				(Offset 0x0418) */

#define BIT_SHIFT_BCNQ_HEAD_PG_V1			0
#define BIT_MASK_BCNQ_HEAD_PG_V1			0xfff
#define BIT_BCNQ_HEAD_PG_V1(x)				(((x) & BIT_MASK_BCNQ_HEAD_PG_V1) << BIT_SHIFT_BCNQ_HEAD_PG_V1)
#define BITS_BCNQ_HEAD_PG_V1				(BIT_MASK_BCNQ_HEAD_PG_V1 << BIT_SHIFT_BCNQ_HEAD_PG_V1)
#define BIT_CLEAR_BCNQ_HEAD_PG_V1(x)			((x) & (~BITS_BCNQ_HEAD_PG_V1))
#define BIT_GET_BCNQ_HEAD_PG_V1(x)			(((x) >> BIT_SHIFT_BCNQ_HEAD_PG_V1) & BIT_MASK_BCNQ_HEAD_PG_V1)
#define BIT_SET_BCNQ_HEAD_PG_V1(x, v)			(BIT_CLEAR_BCNQ_HEAD_PG_V1(x) | BIT_BCNQ_HEAD_PG_V1(v))

/* 2 REG_TXPKT_EMPTY				(Offset 0x041A) */

#define BIT_BCNQ_EMPTY					BIT(11)
#define BIT_HQQ_EMPTY					BIT(10)
#define BIT_MQQ_EMPTY					BIT(9)
#define BIT_MGQ_CPU_EMPTY				BIT(8)
#define BIT_AC7Q_EMPTY					BIT(7)
#define BIT_AC6Q_EMPTY					BIT(6)
#define BIT_AC5Q_EMPTY					BIT(5)
#define BIT_AC4Q_EMPTY					BIT(4)
#define BIT_AC3Q_EMPTY					BIT(3)
#define BIT_AC2Q_EMPTY					BIT(2)
#define BIT_AC1Q_EMPTY					BIT(1)
#define BIT_AC0Q_EMPTY					BIT(0)

/* 2 REG_CPU_MGQ_INFO			(Offset 0x041C) */

#define BIT_BCN1_POLL					BIT(30)
#define BIT_CPUMGT_POLL				BIT(29)
#define BIT_BCN_POLL					BIT(28)
#define BIT_CPUMGQ_FW_NUM_V1				BIT(12)

#define BIT_SHIFT_FW_FREE_TAIL_V1			0
#define BIT_MASK_FW_FREE_TAIL_V1			0xfff
#define BIT_FW_FREE_TAIL_V1(x)				(((x) & BIT_MASK_FW_FREE_TAIL_V1) << BIT_SHIFT_FW_FREE_TAIL_V1)
#define BITS_FW_FREE_TAIL_V1				(BIT_MASK_FW_FREE_TAIL_V1 << BIT_SHIFT_FW_FREE_TAIL_V1)
#define BIT_CLEAR_FW_FREE_TAIL_V1(x)			((x) & (~BITS_FW_FREE_TAIL_V1))
#define BIT_GET_FW_FREE_TAIL_V1(x)			(((x) >> BIT_SHIFT_FW_FREE_TAIL_V1) & BIT_MASK_FW_FREE_TAIL_V1)
#define BIT_SET_FW_FREE_TAIL_V1(x, v)			(BIT_CLEAR_FW_FREE_TAIL_V1(x) | BIT_FW_FREE_TAIL_V1(v))

/* 2 REG_FWHW_TXQ_CTRL			(Offset 0x0420) */

#define BIT_RTS_LIMIT_IN_OFDM				BIT(23)
#define BIT_EN_BCNQ_DL					BIT(22)
#define BIT_EN_RD_RESP_NAV_BK				BIT(21)
#define BIT_EN_WR_FREE_TAIL				BIT(20)
#define BIT_NOTXRPT_USERATE_EN				BIT(19)
#define BIT_DIS_TXFAIL_RPT				BIT(18)
#define BIT_FTM_TIMEOUT_BYPASS				BIT(16)

#define BIT_SHIFT_EN_QUEUE_RPT				8
#define BIT_MASK_EN_QUEUE_RPT				0xff
#define BIT_EN_QUEUE_RPT(x)				(((x) & BIT_MASK_EN_QUEUE_RPT) << BIT_SHIFT_EN_QUEUE_RPT)
#define BITS_EN_QUEUE_RPT				(BIT_MASK_EN_QUEUE_RPT << BIT_SHIFT_EN_QUEUE_RPT)
#define BIT_CLEAR_EN_QUEUE_RPT(x)			((x) & (~BITS_EN_QUEUE_RPT))
#define BIT_GET_EN_QUEUE_RPT(x)			(((x) >> BIT_SHIFT_EN_QUEUE_RPT) & BIT_MASK_EN_QUEUE_RPT)
#define BIT_SET_EN_QUEUE_RPT(x, v)			(BIT_CLEAR_EN_QUEUE_RPT(x) | BIT_EN_QUEUE_RPT(v))

#define BIT_EN_RTY_BK					BIT(7)
#define BIT_EN_USE_INI_RAT				BIT(6)
#define BIT_EN_RTS_NAV_BK				BIT(5)
#define BIT_DIS_SSN_CHECK				BIT(4)
#define BIT_MACID_MATCH_RTS				BIT(3)
#define BIT_EN_BCN_TRXRPT_V1				BIT(2)
#define BIT_R_EN_FTMRPT_V1				BIT(1)
#define BIT_R_BMC_NAV_PROTECT				BIT(0)

/* 2 REG_DATAFB_SEL				(Offset 0x0423) */

#define BIT_BROADCAST_RTY_EN				BIT(3)
#define BIT_EN_RTY_BK_COD				BIT(2)

#define BIT_SHIFT__R_DATA_FALLBACK_SEL			0
#define BIT_MASK__R_DATA_FALLBACK_SEL			0x3
#define BIT__R_DATA_FALLBACK_SEL(x)			(((x) & BIT_MASK__R_DATA_FALLBACK_SEL) << BIT_SHIFT__R_DATA_FALLBACK_SEL)
#define BITS__R_DATA_FALLBACK_SEL			(BIT_MASK__R_DATA_FALLBACK_SEL << BIT_SHIFT__R_DATA_FALLBACK_SEL)
#define BIT_CLEAR__R_DATA_FALLBACK_SEL(x)		((x) & (~BITS__R_DATA_FALLBACK_SEL))
#define BIT_GET__R_DATA_FALLBACK_SEL(x)		(((x) >> BIT_SHIFT__R_DATA_FALLBACK_SEL) & BIT_MASK__R_DATA_FALLBACK_SEL)
#define BIT_SET__R_DATA_FALLBACK_SEL(x, v)		(BIT_CLEAR__R_DATA_FALLBACK_SEL(x) | BIT__R_DATA_FALLBACK_SEL(v))

/* 2 REG_BCNQ_BDNY_V1			(Offset 0x0424) */

#define BIT_SHIFT_BCNQ_PGBNDY_V1			0
#define BIT_MASK_BCNQ_PGBNDY_V1			0xfff
#define BIT_BCNQ_PGBNDY_V1(x)				(((x) & BIT_MASK_BCNQ_PGBNDY_V1) << BIT_SHIFT_BCNQ_PGBNDY_V1)
#define BITS_BCNQ_PGBNDY_V1				(BIT_MASK_BCNQ_PGBNDY_V1 << BIT_SHIFT_BCNQ_PGBNDY_V1)
#define BIT_CLEAR_BCNQ_PGBNDY_V1(x)			((x) & (~BITS_BCNQ_PGBNDY_V1))
#define BIT_GET_BCNQ_PGBNDY_V1(x)			(((x) >> BIT_SHIFT_BCNQ_PGBNDY_V1) & BIT_MASK_BCNQ_PGBNDY_V1)
#define BIT_SET_BCNQ_PGBNDY_V1(x, v)			(BIT_CLEAR_BCNQ_PGBNDY_V1(x) | BIT_BCNQ_PGBNDY_V1(v))

/* 2 REG_LIFETIME_EN				(Offset 0x0426) */

#define BIT_BT_INT_CPU					BIT(7)
#define BIT_BT_INT_PTA					BIT(6)
#define BIT_BA_PARSER_EN				BIT(5)
#define BIT_EN_CTRL_RTYBIT				BIT(4)
#define BIT_LIFETIME_BK_EN				BIT(3)
#define BIT_LIFETIME_BE_EN				BIT(2)
#define BIT_LIFETIME_VI_EN				BIT(1)
#define BIT_LIFETIME_VO_EN				BIT(0)

/* 2 REG_SPEC_SIFS				(Offset 0x0428) */

#define BIT_SHIFT_SPEC_SIFS_OFDM_PTCL			8
#define BIT_MASK_SPEC_SIFS_OFDM_PTCL			0xff
#define BIT_SPEC_SIFS_OFDM_PTCL(x)			(((x) & BIT_MASK_SPEC_SIFS_OFDM_PTCL) << BIT_SHIFT_SPEC_SIFS_OFDM_PTCL)
#define BITS_SPEC_SIFS_OFDM_PTCL			(BIT_MASK_SPEC_SIFS_OFDM_PTCL << BIT_SHIFT_SPEC_SIFS_OFDM_PTCL)
#define BIT_CLEAR_SPEC_SIFS_OFDM_PTCL(x)		((x) & (~BITS_SPEC_SIFS_OFDM_PTCL))
#define BIT_GET_SPEC_SIFS_OFDM_PTCL(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_OFDM_PTCL) & BIT_MASK_SPEC_SIFS_OFDM_PTCL)
#define BIT_SET_SPEC_SIFS_OFDM_PTCL(x, v)		(BIT_CLEAR_SPEC_SIFS_OFDM_PTCL(x) | BIT_SPEC_SIFS_OFDM_PTCL(v))

#define BIT_SHIFT_SPEC_SIFS_CCK_PTCL			0
#define BIT_MASK_SPEC_SIFS_CCK_PTCL			0xff
#define BIT_SPEC_SIFS_CCK_PTCL(x)			(((x) & BIT_MASK_SPEC_SIFS_CCK_PTCL) << BIT_SHIFT_SPEC_SIFS_CCK_PTCL)
#define BITS_SPEC_SIFS_CCK_PTCL			(BIT_MASK_SPEC_SIFS_CCK_PTCL << BIT_SHIFT_SPEC_SIFS_CCK_PTCL)
#define BIT_CLEAR_SPEC_SIFS_CCK_PTCL(x)		((x) & (~BITS_SPEC_SIFS_CCK_PTCL))
#define BIT_GET_SPEC_SIFS_CCK_PTCL(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_CCK_PTCL) & BIT_MASK_SPEC_SIFS_CCK_PTCL)
#define BIT_SET_SPEC_SIFS_CCK_PTCL(x, v)		(BIT_CLEAR_SPEC_SIFS_CCK_PTCL(x) | BIT_SPEC_SIFS_CCK_PTCL(v))

/* 2 REG_RETRY_LIMIT				(Offset 0x042A) */

#define BIT_SHIFT_SRL					8
#define BIT_MASK_SRL					0x3f
#define BIT_SRL(x)					(((x) & BIT_MASK_SRL) << BIT_SHIFT_SRL)
#define BITS_SRL					(BIT_MASK_SRL << BIT_SHIFT_SRL)
#define BIT_CLEAR_SRL(x)				((x) & (~BITS_SRL))
#define BIT_GET_SRL(x)					(((x) >> BIT_SHIFT_SRL) & BIT_MASK_SRL)
#define BIT_SET_SRL(x, v)				(BIT_CLEAR_SRL(x) | BIT_SRL(v))

#define BIT_SHIFT_LRL					0
#define BIT_MASK_LRL					0x3f
#define BIT_LRL(x)					(((x) & BIT_MASK_LRL) << BIT_SHIFT_LRL)
#define BITS_LRL					(BIT_MASK_LRL << BIT_SHIFT_LRL)
#define BIT_CLEAR_LRL(x)				((x) & (~BITS_LRL))
#define BIT_GET_LRL(x)					(((x) >> BIT_SHIFT_LRL) & BIT_MASK_LRL)
#define BIT_SET_LRL(x, v)				(BIT_CLEAR_LRL(x) | BIT_LRL(v))

/* 2 REG_TXBF_CTRL				(Offset 0x042C) */

#define BIT_R_ENABLE_NDPA				BIT(31)
#define BIT_USE_NDPA_PARAMETER				BIT(30)
#define BIT_R_PROP_TXBF				BIT(29)
#define BIT_R_EN_NDPA_INT				BIT(28)
#define BIT_R_TXBF1_80M				BIT(27)
#define BIT_R_TXBF1_40M				BIT(26)
#define BIT_R_TXBF1_20M				BIT(25)

#define BIT_SHIFT_R_TXBF1_AID				16
#define BIT_MASK_R_TXBF1_AID				0x1ff
#define BIT_R_TXBF1_AID(x)				(((x) & BIT_MASK_R_TXBF1_AID) << BIT_SHIFT_R_TXBF1_AID)
#define BITS_R_TXBF1_AID				(BIT_MASK_R_TXBF1_AID << BIT_SHIFT_R_TXBF1_AID)
#define BIT_CLEAR_R_TXBF1_AID(x)			((x) & (~BITS_R_TXBF1_AID))
#define BIT_GET_R_TXBF1_AID(x)				(((x) >> BIT_SHIFT_R_TXBF1_AID) & BIT_MASK_R_TXBF1_AID)
#define BIT_SET_R_TXBF1_AID(x, v)			(BIT_CLEAR_R_TXBF1_AID(x) | BIT_R_TXBF1_AID(v))

#define BIT_DIS_NDP_BFEN				BIT(15)
#define BIT_R_TXBCN_NOBLOCK_NDP			BIT(14)
#define BIT_R_TXBF0_80M				BIT(11)
#define BIT_R_TXBF0_40M				BIT(10)
#define BIT_R_TXBF0_20M				BIT(9)

#define BIT_SHIFT_R_TXBF0_AID				0
#define BIT_MASK_R_TXBF0_AID				0x1ff
#define BIT_R_TXBF0_AID(x)				(((x) & BIT_MASK_R_TXBF0_AID) << BIT_SHIFT_R_TXBF0_AID)
#define BITS_R_TXBF0_AID				(BIT_MASK_R_TXBF0_AID << BIT_SHIFT_R_TXBF0_AID)
#define BIT_CLEAR_R_TXBF0_AID(x)			((x) & (~BITS_R_TXBF0_AID))
#define BIT_GET_R_TXBF0_AID(x)				(((x) >> BIT_SHIFT_R_TXBF0_AID) & BIT_MASK_R_TXBF0_AID)
#define BIT_SET_R_TXBF0_AID(x, v)			(BIT_CLEAR_R_TXBF0_AID(x) | BIT_R_TXBF0_AID(v))

/* 2 REG_DARFRC				(Offset 0x0430) */

#define BIT_SHIFT_DARF_RC4				24
#define BIT_MASK_DARF_RC4				0x1f
#define BIT_DARF_RC4(x)				(((x) & BIT_MASK_DARF_RC4) << BIT_SHIFT_DARF_RC4)
#define BITS_DARF_RC4					(BIT_MASK_DARF_RC4 << BIT_SHIFT_DARF_RC4)
#define BIT_CLEAR_DARF_RC4(x)				((x) & (~BITS_DARF_RC4))
#define BIT_GET_DARF_RC4(x)				(((x) >> BIT_SHIFT_DARF_RC4) & BIT_MASK_DARF_RC4)
#define BIT_SET_DARF_RC4(x, v)				(BIT_CLEAR_DARF_RC4(x) | BIT_DARF_RC4(v))

#define BIT_SHIFT_DARF_RC3				16
#define BIT_MASK_DARF_RC3				0x1f
#define BIT_DARF_RC3(x)				(((x) & BIT_MASK_DARF_RC3) << BIT_SHIFT_DARF_RC3)
#define BITS_DARF_RC3					(BIT_MASK_DARF_RC3 << BIT_SHIFT_DARF_RC3)
#define BIT_CLEAR_DARF_RC3(x)				((x) & (~BITS_DARF_RC3))
#define BIT_GET_DARF_RC3(x)				(((x) >> BIT_SHIFT_DARF_RC3) & BIT_MASK_DARF_RC3)
#define BIT_SET_DARF_RC3(x, v)				(BIT_CLEAR_DARF_RC3(x) | BIT_DARF_RC3(v))

#define BIT_SHIFT_DARF_RC2				8
#define BIT_MASK_DARF_RC2				0x1f
#define BIT_DARF_RC2(x)				(((x) & BIT_MASK_DARF_RC2) << BIT_SHIFT_DARF_RC2)
#define BITS_DARF_RC2					(BIT_MASK_DARF_RC2 << BIT_SHIFT_DARF_RC2)
#define BIT_CLEAR_DARF_RC2(x)				((x) & (~BITS_DARF_RC2))
#define BIT_GET_DARF_RC2(x)				(((x) >> BIT_SHIFT_DARF_RC2) & BIT_MASK_DARF_RC2)
#define BIT_SET_DARF_RC2(x, v)				(BIT_CLEAR_DARF_RC2(x) | BIT_DARF_RC2(v))

#define BIT_SHIFT_DARF_RC1				0
#define BIT_MASK_DARF_RC1				0x1f
#define BIT_DARF_RC1(x)				(((x) & BIT_MASK_DARF_RC1) << BIT_SHIFT_DARF_RC1)
#define BITS_DARF_RC1					(BIT_MASK_DARF_RC1 << BIT_SHIFT_DARF_RC1)
#define BIT_CLEAR_DARF_RC1(x)				((x) & (~BITS_DARF_RC1))
#define BIT_GET_DARF_RC1(x)				(((x) >> BIT_SHIFT_DARF_RC1) & BIT_MASK_DARF_RC1)
#define BIT_SET_DARF_RC1(x, v)				(BIT_CLEAR_DARF_RC1(x) | BIT_DARF_RC1(v))

/* 2 REG_DARFRCH				(Offset 0x0434) */

#define BIT_SHIFT_DARF_RC8_V1				24
#define BIT_MASK_DARF_RC8_V1				0x1f
#define BIT_DARF_RC8_V1(x)				(((x) & BIT_MASK_DARF_RC8_V1) << BIT_SHIFT_DARF_RC8_V1)
#define BITS_DARF_RC8_V1				(BIT_MASK_DARF_RC8_V1 << BIT_SHIFT_DARF_RC8_V1)
#define BIT_CLEAR_DARF_RC8_V1(x)			((x) & (~BITS_DARF_RC8_V1))
#define BIT_GET_DARF_RC8_V1(x)				(((x) >> BIT_SHIFT_DARF_RC8_V1) & BIT_MASK_DARF_RC8_V1)
#define BIT_SET_DARF_RC8_V1(x, v)			(BIT_CLEAR_DARF_RC8_V1(x) | BIT_DARF_RC8_V1(v))

#define BIT_SHIFT_DARF_RC7_V1				16
#define BIT_MASK_DARF_RC7_V1				0x1f
#define BIT_DARF_RC7_V1(x)				(((x) & BIT_MASK_DARF_RC7_V1) << BIT_SHIFT_DARF_RC7_V1)
#define BITS_DARF_RC7_V1				(BIT_MASK_DARF_RC7_V1 << BIT_SHIFT_DARF_RC7_V1)
#define BIT_CLEAR_DARF_RC7_V1(x)			((x) & (~BITS_DARF_RC7_V1))
#define BIT_GET_DARF_RC7_V1(x)				(((x) >> BIT_SHIFT_DARF_RC7_V1) & BIT_MASK_DARF_RC7_V1)
#define BIT_SET_DARF_RC7_V1(x, v)			(BIT_CLEAR_DARF_RC7_V1(x) | BIT_DARF_RC7_V1(v))

#define BIT_SHIFT_DARF_RC6_V1				8
#define BIT_MASK_DARF_RC6_V1				0x1f
#define BIT_DARF_RC6_V1(x)				(((x) & BIT_MASK_DARF_RC6_V1) << BIT_SHIFT_DARF_RC6_V1)
#define BITS_DARF_RC6_V1				(BIT_MASK_DARF_RC6_V1 << BIT_SHIFT_DARF_RC6_V1)
#define BIT_CLEAR_DARF_RC6_V1(x)			((x) & (~BITS_DARF_RC6_V1))
#define BIT_GET_DARF_RC6_V1(x)				(((x) >> BIT_SHIFT_DARF_RC6_V1) & BIT_MASK_DARF_RC6_V1)
#define BIT_SET_DARF_RC6_V1(x, v)			(BIT_CLEAR_DARF_RC6_V1(x) | BIT_DARF_RC6_V1(v))

#define BIT_SHIFT_DARF_RC5_V1				0
#define BIT_MASK_DARF_RC5_V1				0x1f
#define BIT_DARF_RC5_V1(x)				(((x) & BIT_MASK_DARF_RC5_V1) << BIT_SHIFT_DARF_RC5_V1)
#define BITS_DARF_RC5_V1				(BIT_MASK_DARF_RC5_V1 << BIT_SHIFT_DARF_RC5_V1)
#define BIT_CLEAR_DARF_RC5_V1(x)			((x) & (~BITS_DARF_RC5_V1))
#define BIT_GET_DARF_RC5_V1(x)				(((x) >> BIT_SHIFT_DARF_RC5_V1) & BIT_MASK_DARF_RC5_V1)
#define BIT_SET_DARF_RC5_V1(x, v)			(BIT_CLEAR_DARF_RC5_V1(x) | BIT_DARF_RC5_V1(v))

/* 2 REG_RARFRC				(Offset 0x0438) */

#define BIT_SHIFT_RARF_RC4				24
#define BIT_MASK_RARF_RC4				0x1f
#define BIT_RARF_RC4(x)				(((x) & BIT_MASK_RARF_RC4) << BIT_SHIFT_RARF_RC4)
#define BITS_RARF_RC4					(BIT_MASK_RARF_RC4 << BIT_SHIFT_RARF_RC4)
#define BIT_CLEAR_RARF_RC4(x)				((x) & (~BITS_RARF_RC4))
#define BIT_GET_RARF_RC4(x)				(((x) >> BIT_SHIFT_RARF_RC4) & BIT_MASK_RARF_RC4)
#define BIT_SET_RARF_RC4(x, v)				(BIT_CLEAR_RARF_RC4(x) | BIT_RARF_RC4(v))

#define BIT_SHIFT_RARF_RC3				16
#define BIT_MASK_RARF_RC3				0x1f
#define BIT_RARF_RC3(x)				(((x) & BIT_MASK_RARF_RC3) << BIT_SHIFT_RARF_RC3)
#define BITS_RARF_RC3					(BIT_MASK_RARF_RC3 << BIT_SHIFT_RARF_RC3)
#define BIT_CLEAR_RARF_RC3(x)				((x) & (~BITS_RARF_RC3))
#define BIT_GET_RARF_RC3(x)				(((x) >> BIT_SHIFT_RARF_RC3) & BIT_MASK_RARF_RC3)
#define BIT_SET_RARF_RC3(x, v)				(BIT_CLEAR_RARF_RC3(x) | BIT_RARF_RC3(v))

#define BIT_SHIFT_RARF_RC2				8
#define BIT_MASK_RARF_RC2				0x1f
#define BIT_RARF_RC2(x)				(((x) & BIT_MASK_RARF_RC2) << BIT_SHIFT_RARF_RC2)
#define BITS_RARF_RC2					(BIT_MASK_RARF_RC2 << BIT_SHIFT_RARF_RC2)
#define BIT_CLEAR_RARF_RC2(x)				((x) & (~BITS_RARF_RC2))
#define BIT_GET_RARF_RC2(x)				(((x) >> BIT_SHIFT_RARF_RC2) & BIT_MASK_RARF_RC2)
#define BIT_SET_RARF_RC2(x, v)				(BIT_CLEAR_RARF_RC2(x) | BIT_RARF_RC2(v))

#define BIT_SHIFT_RARF_RC1				0
#define BIT_MASK_RARF_RC1				0x1f
#define BIT_RARF_RC1(x)				(((x) & BIT_MASK_RARF_RC1) << BIT_SHIFT_RARF_RC1)
#define BITS_RARF_RC1					(BIT_MASK_RARF_RC1 << BIT_SHIFT_RARF_RC1)
#define BIT_CLEAR_RARF_RC1(x)				((x) & (~BITS_RARF_RC1))
#define BIT_GET_RARF_RC1(x)				(((x) >> BIT_SHIFT_RARF_RC1) & BIT_MASK_RARF_RC1)
#define BIT_SET_RARF_RC1(x, v)				(BIT_CLEAR_RARF_RC1(x) | BIT_RARF_RC1(v))

/* 2 REG_RARFRCH				(Offset 0x043C) */

#define BIT_SHIFT_RARF_RC8_V1				24
#define BIT_MASK_RARF_RC8_V1				0x1f
#define BIT_RARF_RC8_V1(x)				(((x) & BIT_MASK_RARF_RC8_V1) << BIT_SHIFT_RARF_RC8_V1)
#define BITS_RARF_RC8_V1				(BIT_MASK_RARF_RC8_V1 << BIT_SHIFT_RARF_RC8_V1)
#define BIT_CLEAR_RARF_RC8_V1(x)			((x) & (~BITS_RARF_RC8_V1))
#define BIT_GET_RARF_RC8_V1(x)				(((x) >> BIT_SHIFT_RARF_RC8_V1) & BIT_MASK_RARF_RC8_V1)
#define BIT_SET_RARF_RC8_V1(x, v)			(BIT_CLEAR_RARF_RC8_V1(x) | BIT_RARF_RC8_V1(v))

#define BIT_SHIFT_RARF_RC7_V1				16
#define BIT_MASK_RARF_RC7_V1				0x1f
#define BIT_RARF_RC7_V1(x)				(((x) & BIT_MASK_RARF_RC7_V1) << BIT_SHIFT_RARF_RC7_V1)
#define BITS_RARF_RC7_V1				(BIT_MASK_RARF_RC7_V1 << BIT_SHIFT_RARF_RC7_V1)
#define BIT_CLEAR_RARF_RC7_V1(x)			((x) & (~BITS_RARF_RC7_V1))
#define BIT_GET_RARF_RC7_V1(x)				(((x) >> BIT_SHIFT_RARF_RC7_V1) & BIT_MASK_RARF_RC7_V1)
#define BIT_SET_RARF_RC7_V1(x, v)			(BIT_CLEAR_RARF_RC7_V1(x) | BIT_RARF_RC7_V1(v))

#define BIT_SHIFT_RARF_RC6_V1				8
#define BIT_MASK_RARF_RC6_V1				0x1f
#define BIT_RARF_RC6_V1(x)				(((x) & BIT_MASK_RARF_RC6_V1) << BIT_SHIFT_RARF_RC6_V1)
#define BITS_RARF_RC6_V1				(BIT_MASK_RARF_RC6_V1 << BIT_SHIFT_RARF_RC6_V1)
#define BIT_CLEAR_RARF_RC6_V1(x)			((x) & (~BITS_RARF_RC6_V1))
#define BIT_GET_RARF_RC6_V1(x)				(((x) >> BIT_SHIFT_RARF_RC6_V1) & BIT_MASK_RARF_RC6_V1)
#define BIT_SET_RARF_RC6_V1(x, v)			(BIT_CLEAR_RARF_RC6_V1(x) | BIT_RARF_RC6_V1(v))

#define BIT_SHIFT_RARF_RC5_V1				0
#define BIT_MASK_RARF_RC5_V1				0x1f
#define BIT_RARF_RC5_V1(x)				(((x) & BIT_MASK_RARF_RC5_V1) << BIT_SHIFT_RARF_RC5_V1)
#define BITS_RARF_RC5_V1				(BIT_MASK_RARF_RC5_V1 << BIT_SHIFT_RARF_RC5_V1)
#define BIT_CLEAR_RARF_RC5_V1(x)			((x) & (~BITS_RARF_RC5_V1))
#define BIT_GET_RARF_RC5_V1(x)				(((x) >> BIT_SHIFT_RARF_RC5_V1) & BIT_MASK_RARF_RC5_V1)
#define BIT_SET_RARF_RC5_V1(x, v)			(BIT_CLEAR_RARF_RC5_V1(x) | BIT_RARF_RC5_V1(v))

/* 2 REG_RRSR				(Offset 0x0440) */

#define BIT_SHIFT_RRSR_RSC				21
#define BIT_MASK_RRSR_RSC				0x3
#define BIT_RRSR_RSC(x)				(((x) & BIT_MASK_RRSR_RSC) << BIT_SHIFT_RRSR_RSC)
#define BITS_RRSR_RSC					(BIT_MASK_RRSR_RSC << BIT_SHIFT_RRSR_RSC)
#define BIT_CLEAR_RRSR_RSC(x)				((x) & (~BITS_RRSR_RSC))
#define BIT_GET_RRSR_RSC(x)				(((x) >> BIT_SHIFT_RRSR_RSC) & BIT_MASK_RRSR_RSC)
#define BIT_SET_RRSR_RSC(x, v)				(BIT_CLEAR_RRSR_RSC(x) | BIT_RRSR_RSC(v))

#define BIT_SHIFT_RRSC_BITMAP				0
#define BIT_MASK_RRSC_BITMAP				0xfffff
#define BIT_RRSC_BITMAP(x)				(((x) & BIT_MASK_RRSC_BITMAP) << BIT_SHIFT_RRSC_BITMAP)
#define BITS_RRSC_BITMAP				(BIT_MASK_RRSC_BITMAP << BIT_SHIFT_RRSC_BITMAP)
#define BIT_CLEAR_RRSC_BITMAP(x)			((x) & (~BITS_RRSC_BITMAP))
#define BIT_GET_RRSC_BITMAP(x)				(((x) >> BIT_SHIFT_RRSC_BITMAP) & BIT_MASK_RRSC_BITMAP)
#define BIT_SET_RRSC_BITMAP(x, v)			(BIT_CLEAR_RRSC_BITMAP(x) | BIT_RRSC_BITMAP(v))

/* 2 REG_ARFR0				(Offset 0x0444) */

#define BIT_SHIFT_ARFRL0				0
#define BIT_MASK_ARFRL0				0xffffffffL
#define BIT_ARFRL0(x)					(((x) & BIT_MASK_ARFRL0) << BIT_SHIFT_ARFRL0)
#define BITS_ARFRL0					(BIT_MASK_ARFRL0 << BIT_SHIFT_ARFRL0)
#define BIT_CLEAR_ARFRL0(x)				((x) & (~BITS_ARFRL0))
#define BIT_GET_ARFRL0(x)				(((x) >> BIT_SHIFT_ARFRL0) & BIT_MASK_ARFRL0)
#define BIT_SET_ARFRL0(x, v)				(BIT_CLEAR_ARFRL0(x) | BIT_ARFRL0(v))

/* 2 REG_ARFRH0				(Offset 0x0448) */

#define BIT_SHIFT_ARFRH0				0
#define BIT_MASK_ARFRH0				0xffffffffL
#define BIT_ARFRH0(x)					(((x) & BIT_MASK_ARFRH0) << BIT_SHIFT_ARFRH0)
#define BITS_ARFRH0					(BIT_MASK_ARFRH0 << BIT_SHIFT_ARFRH0)
#define BIT_CLEAR_ARFRH0(x)				((x) & (~BITS_ARFRH0))
#define BIT_GET_ARFRH0(x)				(((x) >> BIT_SHIFT_ARFRH0) & BIT_MASK_ARFRH0)
#define BIT_SET_ARFRH0(x, v)				(BIT_CLEAR_ARFRH0(x) | BIT_ARFRH0(v))

/* 2 REG_ARFR1_V1				(Offset 0x044C) */

#define BIT_SHIFT_ARFRL1				0
#define BIT_MASK_ARFRL1				0xffffffffL
#define BIT_ARFRL1(x)					(((x) & BIT_MASK_ARFRL1) << BIT_SHIFT_ARFRL1)
#define BITS_ARFRL1					(BIT_MASK_ARFRL1 << BIT_SHIFT_ARFRL1)
#define BIT_CLEAR_ARFRL1(x)				((x) & (~BITS_ARFRL1))
#define BIT_GET_ARFRL1(x)				(((x) >> BIT_SHIFT_ARFRL1) & BIT_MASK_ARFRL1)
#define BIT_SET_ARFRL1(x, v)				(BIT_CLEAR_ARFRL1(x) | BIT_ARFRL1(v))

/* 2 REG_ARFRH1_V1				(Offset 0x0450) */

#define BIT_SHIFT_ARFRH1				0
#define BIT_MASK_ARFRH1				0xffffffffL
#define BIT_ARFRH1(x)					(((x) & BIT_MASK_ARFRH1) << BIT_SHIFT_ARFRH1)
#define BITS_ARFRH1					(BIT_MASK_ARFRH1 << BIT_SHIFT_ARFRH1)
#define BIT_CLEAR_ARFRH1(x)				((x) & (~BITS_ARFRH1))
#define BIT_GET_ARFRH1(x)				(((x) >> BIT_SHIFT_ARFRH1) & BIT_MASK_ARFRH1)
#define BIT_SET_ARFRH1(x, v)				(BIT_CLEAR_ARFRH1(x) | BIT_ARFRH1(v))

/* 2 REG_CCK_CHECK				(Offset 0x0454) */

#define BIT_CHECK_CCK_EN				BIT(7)
#define BIT_EN_BCN_PKT_REL				BIT(6)
#define BIT_BCN_PORT_SEL				BIT(5)
#define BIT_MOREDATA_BYPASS				BIT(4)
#define BIT_EN_CLR_CMD_REL_BCN_PKT			BIT(3)
#define BIT_R_EN_SET_MOREDATA				BIT(2)
#define BIT__R_DIS_CLEAR_MACID_RELEASE			BIT(1)
#define BIT__R_MACID_RELEASE_EN			BIT(0)

/* 2 REG_AMPDU_MAX_TIME_V1			(Offset 0x0455) */

#define BIT_SHIFT_AMPDU_MAX_TIME			0
#define BIT_MASK_AMPDU_MAX_TIME			0xff
#define BIT_AMPDU_MAX_TIME(x)				(((x) & BIT_MASK_AMPDU_MAX_TIME) << BIT_SHIFT_AMPDU_MAX_TIME)
#define BITS_AMPDU_MAX_TIME				(BIT_MASK_AMPDU_MAX_TIME << BIT_SHIFT_AMPDU_MAX_TIME)
#define BIT_CLEAR_AMPDU_MAX_TIME(x)			((x) & (~BITS_AMPDU_MAX_TIME))
#define BIT_GET_AMPDU_MAX_TIME(x)			(((x) >> BIT_SHIFT_AMPDU_MAX_TIME) & BIT_MASK_AMPDU_MAX_TIME)
#define BIT_SET_AMPDU_MAX_TIME(x, v)			(BIT_CLEAR_AMPDU_MAX_TIME(x) | BIT_AMPDU_MAX_TIME(v))

/* 2 REG_BCNQ1_BDNY_V1			(Offset 0x0456) */

#define BIT_SHIFT_BCNQ1_PGBNDY_V1			0
#define BIT_MASK_BCNQ1_PGBNDY_V1			0xfff
#define BIT_BCNQ1_PGBNDY_V1(x)				(((x) & BIT_MASK_BCNQ1_PGBNDY_V1) << BIT_SHIFT_BCNQ1_PGBNDY_V1)
#define BITS_BCNQ1_PGBNDY_V1				(BIT_MASK_BCNQ1_PGBNDY_V1 << BIT_SHIFT_BCNQ1_PGBNDY_V1)
#define BIT_CLEAR_BCNQ1_PGBNDY_V1(x)			((x) & (~BITS_BCNQ1_PGBNDY_V1))
#define BIT_GET_BCNQ1_PGBNDY_V1(x)			(((x) >> BIT_SHIFT_BCNQ1_PGBNDY_V1) & BIT_MASK_BCNQ1_PGBNDY_V1)
#define BIT_SET_BCNQ1_PGBNDY_V1(x, v)			(BIT_CLEAR_BCNQ1_PGBNDY_V1(x) | BIT_BCNQ1_PGBNDY_V1(v))

/* 2 REG_AMPDU_MAX_LENGTH_HT			(Offset 0x0458) */

#define BIT_SHIFT_AMPDU_MAX_LENGTH_HT			0
#define BIT_MASK_AMPDU_MAX_LENGTH_HT			0xffff
#define BIT_AMPDU_MAX_LENGTH_HT(x)			(((x) & BIT_MASK_AMPDU_MAX_LENGTH_HT) << BIT_SHIFT_AMPDU_MAX_LENGTH_HT)
#define BITS_AMPDU_MAX_LENGTH_HT			(BIT_MASK_AMPDU_MAX_LENGTH_HT << BIT_SHIFT_AMPDU_MAX_LENGTH_HT)
#define BIT_CLEAR_AMPDU_MAX_LENGTH_HT(x)		((x) & (~BITS_AMPDU_MAX_LENGTH_HT))
#define BIT_GET_AMPDU_MAX_LENGTH_HT(x)			(((x) >> BIT_SHIFT_AMPDU_MAX_LENGTH_HT) & BIT_MASK_AMPDU_MAX_LENGTH_HT)
#define BIT_SET_AMPDU_MAX_LENGTH_HT(x, v)		(BIT_CLEAR_AMPDU_MAX_LENGTH_HT(x) | BIT_AMPDU_MAX_LENGTH_HT(v))

/* 2 REG_ACQ_STOP				(Offset 0x045C) */

#define BIT_AC7Q_STOP					BIT(7)
#define BIT_AC6Q_STOP					BIT(6)
#define BIT_AC5Q_STOP					BIT(5)
#define BIT_AC4Q_STOP					BIT(4)
#define BIT_AC3Q_STOP					BIT(3)
#define BIT_AC2Q_STOP					BIT(2)
#define BIT_AC1Q_STOP					BIT(1)
#define BIT_AC0Q_STOP					BIT(0)

/* 2 REG_NDPA_RATE				(Offset 0x045D) */

#define BIT_SHIFT_R_NDPA_RATE_V1			0
#define BIT_MASK_R_NDPA_RATE_V1			0xff
#define BIT_R_NDPA_RATE_V1(x)				(((x) & BIT_MASK_R_NDPA_RATE_V1) << BIT_SHIFT_R_NDPA_RATE_V1)
#define BITS_R_NDPA_RATE_V1				(BIT_MASK_R_NDPA_RATE_V1 << BIT_SHIFT_R_NDPA_RATE_V1)
#define BIT_CLEAR_R_NDPA_RATE_V1(x)			((x) & (~BITS_R_NDPA_RATE_V1))
#define BIT_GET_R_NDPA_RATE_V1(x)			(((x) >> BIT_SHIFT_R_NDPA_RATE_V1) & BIT_MASK_R_NDPA_RATE_V1)
#define BIT_SET_R_NDPA_RATE_V1(x, v)			(BIT_CLEAR_R_NDPA_RATE_V1(x) | BIT_R_NDPA_RATE_V1(v))

/* 2 REG_TX_HANG_CTRL			(Offset 0x045E) */

#define BIT_R_EN_GNT_BT_AWAKE				BIT(3)
#define BIT_EN_EOF_V1					BIT(2)
#define BIT_DIS_OQT_BLOCK				BIT(1)
#define BIT_SEARCH_QUEUE_EN				BIT(0)

/* 2 REG_NDPA_OPT_CTRL			(Offset 0x045F) */

#define BIT_R_DIS_MACID_RELEASE_RTY			BIT(5)

#define BIT_SHIFT_BW_SIGTA				3
#define BIT_MASK_BW_SIGTA				0x3
#define BIT_BW_SIGTA(x)				(((x) & BIT_MASK_BW_SIGTA) << BIT_SHIFT_BW_SIGTA)
#define BITS_BW_SIGTA					(BIT_MASK_BW_SIGTA << BIT_SHIFT_BW_SIGTA)
#define BIT_CLEAR_BW_SIGTA(x)				((x) & (~BITS_BW_SIGTA))
#define BIT_GET_BW_SIGTA(x)				(((x) >> BIT_SHIFT_BW_SIGTA) & BIT_MASK_BW_SIGTA)
#define BIT_SET_BW_SIGTA(x, v)				(BIT_CLEAR_BW_SIGTA(x) | BIT_BW_SIGTA(v))

#define BIT_EN_BAR_SIGTA				BIT(2)

#define BIT_SHIFT_R_NDPA_BW				0
#define BIT_MASK_R_NDPA_BW				0x3
#define BIT_R_NDPA_BW(x)				(((x) & BIT_MASK_R_NDPA_BW) << BIT_SHIFT_R_NDPA_BW)
#define BITS_R_NDPA_BW					(BIT_MASK_R_NDPA_BW << BIT_SHIFT_R_NDPA_BW)
#define BIT_CLEAR_R_NDPA_BW(x)				((x) & (~BITS_R_NDPA_BW))
#define BIT_GET_R_NDPA_BW(x)				(((x) >> BIT_SHIFT_R_NDPA_BW) & BIT_MASK_R_NDPA_BW)
#define BIT_SET_R_NDPA_BW(x, v)			(BIT_CLEAR_R_NDPA_BW(x) | BIT_R_NDPA_BW(v))

/* 2 REG_AMPDU_MAX_LENGTH_VHT		(Offset 0x0460) */

#define BIT_SHIFT_AMPDU_MAX_LENGTH_VHT_V1		0
#define BIT_MASK_AMPDU_MAX_LENGTH_VHT_V1		0xfffff
#define BIT_AMPDU_MAX_LENGTH_VHT_V1(x)			(((x) & BIT_MASK_AMPDU_MAX_LENGTH_VHT_V1) << BIT_SHIFT_AMPDU_MAX_LENGTH_VHT_V1)
#define BITS_AMPDU_MAX_LENGTH_VHT_V1			(BIT_MASK_AMPDU_MAX_LENGTH_VHT_V1 << BIT_SHIFT_AMPDU_MAX_LENGTH_VHT_V1)
#define BIT_CLEAR_AMPDU_MAX_LENGTH_VHT_V1(x)		((x) & (~BITS_AMPDU_MAX_LENGTH_VHT_V1))
#define BIT_GET_AMPDU_MAX_LENGTH_VHT_V1(x)		(((x) >> BIT_SHIFT_AMPDU_MAX_LENGTH_VHT_V1) & BIT_MASK_AMPDU_MAX_LENGTH_VHT_V1)
#define BIT_SET_AMPDU_MAX_LENGTH_VHT_V1(x, v)		(BIT_CLEAR_AMPDU_MAX_LENGTH_VHT_V1(x) | BIT_AMPDU_MAX_LENGTH_VHT_V1(v))

/* 2 REG_RD_RESP_PKT_TH			(Offset 0x0463) */

#define BIT_SHIFT_RD_RESP_PKT_TH_V1			0
#define BIT_MASK_RD_RESP_PKT_TH_V1			0x3f
#define BIT_RD_RESP_PKT_TH_V1(x)			(((x) & BIT_MASK_RD_RESP_PKT_TH_V1) << BIT_SHIFT_RD_RESP_PKT_TH_V1)
#define BITS_RD_RESP_PKT_TH_V1				(BIT_MASK_RD_RESP_PKT_TH_V1 << BIT_SHIFT_RD_RESP_PKT_TH_V1)
#define BIT_CLEAR_RD_RESP_PKT_TH_V1(x)			((x) & (~BITS_RD_RESP_PKT_TH_V1))
#define BIT_GET_RD_RESP_PKT_TH_V1(x)			(((x) >> BIT_SHIFT_RD_RESP_PKT_TH_V1) & BIT_MASK_RD_RESP_PKT_TH_V1)
#define BIT_SET_RD_RESP_PKT_TH_V1(x, v)		(BIT_CLEAR_RD_RESP_PKT_TH_V1(x) | BIT_RD_RESP_PKT_TH_V1(v))

/* 2 REG_CMDQ_INFO				(Offset 0x0464) */

#define BIT_SHIFT_QUEUEMACID_CMDQ_V1			25
#define BIT_MASK_QUEUEMACID_CMDQ_V1			0x7f
#define BIT_QUEUEMACID_CMDQ_V1(x)			(((x) & BIT_MASK_QUEUEMACID_CMDQ_V1) << BIT_SHIFT_QUEUEMACID_CMDQ_V1)
#define BITS_QUEUEMACID_CMDQ_V1			(BIT_MASK_QUEUEMACID_CMDQ_V1 << BIT_SHIFT_QUEUEMACID_CMDQ_V1)
#define BIT_CLEAR_QUEUEMACID_CMDQ_V1(x)		((x) & (~BITS_QUEUEMACID_CMDQ_V1))
#define BIT_GET_QUEUEMACID_CMDQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_CMDQ_V1) & BIT_MASK_QUEUEMACID_CMDQ_V1)
#define BIT_SET_QUEUEMACID_CMDQ_V1(x, v)		(BIT_CLEAR_QUEUEMACID_CMDQ_V1(x) | BIT_QUEUEMACID_CMDQ_V1(v))

#define BIT_SHIFT_QUEUEAC_CMDQ_V1			23
#define BIT_MASK_QUEUEAC_CMDQ_V1			0x3
#define BIT_QUEUEAC_CMDQ_V1(x)				(((x) & BIT_MASK_QUEUEAC_CMDQ_V1) << BIT_SHIFT_QUEUEAC_CMDQ_V1)
#define BITS_QUEUEAC_CMDQ_V1				(BIT_MASK_QUEUEAC_CMDQ_V1 << BIT_SHIFT_QUEUEAC_CMDQ_V1)
#define BIT_CLEAR_QUEUEAC_CMDQ_V1(x)			((x) & (~BITS_QUEUEAC_CMDQ_V1))
#define BIT_GET_QUEUEAC_CMDQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_CMDQ_V1) & BIT_MASK_QUEUEAC_CMDQ_V1)
#define BIT_SET_QUEUEAC_CMDQ_V1(x, v)			(BIT_CLEAR_QUEUEAC_CMDQ_V1(x) | BIT_QUEUEAC_CMDQ_V1(v))

#define BIT_TIDEMPTY_CMDQ_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q4_V2			11
#define BIT_MASK_TAIL_PKT_Q4_V2			0x7ff
#define BIT_TAIL_PKT_Q4_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q4_V2) << BIT_SHIFT_TAIL_PKT_Q4_V2)
#define BITS_TAIL_PKT_Q4_V2				(BIT_MASK_TAIL_PKT_Q4_V2 << BIT_SHIFT_TAIL_PKT_Q4_V2)
#define BIT_CLEAR_TAIL_PKT_Q4_V2(x)			((x) & (~BITS_TAIL_PKT_Q4_V2))
#define BIT_GET_TAIL_PKT_Q4_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q4_V2) & BIT_MASK_TAIL_PKT_Q4_V2)
#define BIT_SET_TAIL_PKT_Q4_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q4_V2(x) | BIT_TAIL_PKT_Q4_V2(v))

#define BIT_SHIFT_HEAD_PKT_CMDQ_V1			0
#define BIT_MASK_HEAD_PKT_CMDQ_V1			0x7ff
#define BIT_HEAD_PKT_CMDQ_V1(x)			(((x) & BIT_MASK_HEAD_PKT_CMDQ_V1) << BIT_SHIFT_HEAD_PKT_CMDQ_V1)
#define BITS_HEAD_PKT_CMDQ_V1				(BIT_MASK_HEAD_PKT_CMDQ_V1 << BIT_SHIFT_HEAD_PKT_CMDQ_V1)
#define BIT_CLEAR_HEAD_PKT_CMDQ_V1(x)			((x) & (~BITS_HEAD_PKT_CMDQ_V1))
#define BIT_GET_HEAD_PKT_CMDQ_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_CMDQ_V1) & BIT_MASK_HEAD_PKT_CMDQ_V1)
#define BIT_SET_HEAD_PKT_CMDQ_V1(x, v)			(BIT_CLEAR_HEAD_PKT_CMDQ_V1(x) | BIT_HEAD_PKT_CMDQ_V1(v))

/* 2 REG_Q4_INFO				(Offset 0x0468) */

#define BIT_SHIFT_QUEUEMACID_Q4_V1			25
#define BIT_MASK_QUEUEMACID_Q4_V1			0x7f
#define BIT_QUEUEMACID_Q4_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q4_V1) << BIT_SHIFT_QUEUEMACID_Q4_V1)
#define BITS_QUEUEMACID_Q4_V1				(BIT_MASK_QUEUEMACID_Q4_V1 << BIT_SHIFT_QUEUEMACID_Q4_V1)
#define BIT_CLEAR_QUEUEMACID_Q4_V1(x)			((x) & (~BITS_QUEUEMACID_Q4_V1))
#define BIT_GET_QUEUEMACID_Q4_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q4_V1) & BIT_MASK_QUEUEMACID_Q4_V1)
#define BIT_SET_QUEUEMACID_Q4_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q4_V1(x) | BIT_QUEUEMACID_Q4_V1(v))

#define BIT_SHIFT_QUEUEAC_Q4_V1			23
#define BIT_MASK_QUEUEAC_Q4_V1				0x3
#define BIT_QUEUEAC_Q4_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q4_V1) << BIT_SHIFT_QUEUEAC_Q4_V1)
#define BITS_QUEUEAC_Q4_V1				(BIT_MASK_QUEUEAC_Q4_V1 << BIT_SHIFT_QUEUEAC_Q4_V1)
#define BIT_CLEAR_QUEUEAC_Q4_V1(x)			((x) & (~BITS_QUEUEAC_Q4_V1))
#define BIT_GET_QUEUEAC_Q4_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q4_V1) & BIT_MASK_QUEUEAC_Q4_V1)
#define BIT_SET_QUEUEAC_Q4_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q4_V1(x) | BIT_QUEUEAC_Q4_V1(v))

#define BIT_TIDEMPTY_Q4_V1				BIT(22)

#define BIT_SHIFT_HEAD_PKT_Q4_V1			0
#define BIT_MASK_HEAD_PKT_Q4_V1			0x7ff
#define BIT_HEAD_PKT_Q4_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q4_V1) << BIT_SHIFT_HEAD_PKT_Q4_V1)
#define BITS_HEAD_PKT_Q4_V1				(BIT_MASK_HEAD_PKT_Q4_V1 << BIT_SHIFT_HEAD_PKT_Q4_V1)
#define BIT_CLEAR_HEAD_PKT_Q4_V1(x)			((x) & (~BITS_HEAD_PKT_Q4_V1))
#define BIT_GET_HEAD_PKT_Q4_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q4_V1) & BIT_MASK_HEAD_PKT_Q4_V1)
#define BIT_SET_HEAD_PKT_Q4_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q4_V1(x) | BIT_HEAD_PKT_Q4_V1(v))

/* 2 REG_Q5_INFO				(Offset 0x046C) */

#define BIT_SHIFT_QUEUEMACID_Q5_V1			25
#define BIT_MASK_QUEUEMACID_Q5_V1			0x7f
#define BIT_QUEUEMACID_Q5_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q5_V1) << BIT_SHIFT_QUEUEMACID_Q5_V1)
#define BITS_QUEUEMACID_Q5_V1				(BIT_MASK_QUEUEMACID_Q5_V1 << BIT_SHIFT_QUEUEMACID_Q5_V1)
#define BIT_CLEAR_QUEUEMACID_Q5_V1(x)			((x) & (~BITS_QUEUEMACID_Q5_V1))
#define BIT_GET_QUEUEMACID_Q5_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q5_V1) & BIT_MASK_QUEUEMACID_Q5_V1)
#define BIT_SET_QUEUEMACID_Q5_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q5_V1(x) | BIT_QUEUEMACID_Q5_V1(v))

#define BIT_SHIFT_QUEUEAC_Q5_V1			23
#define BIT_MASK_QUEUEAC_Q5_V1				0x3
#define BIT_QUEUEAC_Q5_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q5_V1) << BIT_SHIFT_QUEUEAC_Q5_V1)
#define BITS_QUEUEAC_Q5_V1				(BIT_MASK_QUEUEAC_Q5_V1 << BIT_SHIFT_QUEUEAC_Q5_V1)
#define BIT_CLEAR_QUEUEAC_Q5_V1(x)			((x) & (~BITS_QUEUEAC_Q5_V1))
#define BIT_GET_QUEUEAC_Q5_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q5_V1) & BIT_MASK_QUEUEAC_Q5_V1)
#define BIT_SET_QUEUEAC_Q5_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q5_V1(x) | BIT_QUEUEAC_Q5_V1(v))

#define BIT_TIDEMPTY_Q5_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q5_V2			11
#define BIT_MASK_TAIL_PKT_Q5_V2			0x7ff
#define BIT_TAIL_PKT_Q5_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q5_V2) << BIT_SHIFT_TAIL_PKT_Q5_V2)
#define BITS_TAIL_PKT_Q5_V2				(BIT_MASK_TAIL_PKT_Q5_V2 << BIT_SHIFT_TAIL_PKT_Q5_V2)
#define BIT_CLEAR_TAIL_PKT_Q5_V2(x)			((x) & (~BITS_TAIL_PKT_Q5_V2))
#define BIT_GET_TAIL_PKT_Q5_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q5_V2) & BIT_MASK_TAIL_PKT_Q5_V2)
#define BIT_SET_TAIL_PKT_Q5_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q5_V2(x) | BIT_TAIL_PKT_Q5_V2(v))

#define BIT_SHIFT_HEAD_PKT_Q5_V1			0
#define BIT_MASK_HEAD_PKT_Q5_V1			0x7ff
#define BIT_HEAD_PKT_Q5_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q5_V1) << BIT_SHIFT_HEAD_PKT_Q5_V1)
#define BITS_HEAD_PKT_Q5_V1				(BIT_MASK_HEAD_PKT_Q5_V1 << BIT_SHIFT_HEAD_PKT_Q5_V1)
#define BIT_CLEAR_HEAD_PKT_Q5_V1(x)			((x) & (~BITS_HEAD_PKT_Q5_V1))
#define BIT_GET_HEAD_PKT_Q5_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q5_V1) & BIT_MASK_HEAD_PKT_Q5_V1)
#define BIT_SET_HEAD_PKT_Q5_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q5_V1(x) | BIT_HEAD_PKT_Q5_V1(v))

/* 2 REG_Q6_INFO				(Offset 0x0470) */

#define BIT_SHIFT_QUEUEMACID_Q6_V1			25
#define BIT_MASK_QUEUEMACID_Q6_V1			0x7f
#define BIT_QUEUEMACID_Q6_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q6_V1) << BIT_SHIFT_QUEUEMACID_Q6_V1)
#define BITS_QUEUEMACID_Q6_V1				(BIT_MASK_QUEUEMACID_Q6_V1 << BIT_SHIFT_QUEUEMACID_Q6_V1)
#define BIT_CLEAR_QUEUEMACID_Q6_V1(x)			((x) & (~BITS_QUEUEMACID_Q6_V1))
#define BIT_GET_QUEUEMACID_Q6_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q6_V1) & BIT_MASK_QUEUEMACID_Q6_V1)
#define BIT_SET_QUEUEMACID_Q6_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q6_V1(x) | BIT_QUEUEMACID_Q6_V1(v))

#define BIT_SHIFT_QUEUEAC_Q6_V1			23
#define BIT_MASK_QUEUEAC_Q6_V1				0x3
#define BIT_QUEUEAC_Q6_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q6_V1) << BIT_SHIFT_QUEUEAC_Q6_V1)
#define BITS_QUEUEAC_Q6_V1				(BIT_MASK_QUEUEAC_Q6_V1 << BIT_SHIFT_QUEUEAC_Q6_V1)
#define BIT_CLEAR_QUEUEAC_Q6_V1(x)			((x) & (~BITS_QUEUEAC_Q6_V1))
#define BIT_GET_QUEUEAC_Q6_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q6_V1) & BIT_MASK_QUEUEAC_Q6_V1)
#define BIT_SET_QUEUEAC_Q6_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q6_V1(x) | BIT_QUEUEAC_Q6_V1(v))

#define BIT_TIDEMPTY_Q6_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q6_V2			11
#define BIT_MASK_TAIL_PKT_Q6_V2			0x7ff
#define BIT_TAIL_PKT_Q6_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q6_V2) << BIT_SHIFT_TAIL_PKT_Q6_V2)
#define BITS_TAIL_PKT_Q6_V2				(BIT_MASK_TAIL_PKT_Q6_V2 << BIT_SHIFT_TAIL_PKT_Q6_V2)
#define BIT_CLEAR_TAIL_PKT_Q6_V2(x)			((x) & (~BITS_TAIL_PKT_Q6_V2))
#define BIT_GET_TAIL_PKT_Q6_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q6_V2) & BIT_MASK_TAIL_PKT_Q6_V2)
#define BIT_SET_TAIL_PKT_Q6_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q6_V2(x) | BIT_TAIL_PKT_Q6_V2(v))

#define BIT_SHIFT_HEAD_PKT_Q6_V1			0
#define BIT_MASK_HEAD_PKT_Q6_V1			0x7ff
#define BIT_HEAD_PKT_Q6_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q6_V1) << BIT_SHIFT_HEAD_PKT_Q6_V1)
#define BITS_HEAD_PKT_Q6_V1				(BIT_MASK_HEAD_PKT_Q6_V1 << BIT_SHIFT_HEAD_PKT_Q6_V1)
#define BIT_CLEAR_HEAD_PKT_Q6_V1(x)			((x) & (~BITS_HEAD_PKT_Q6_V1))
#define BIT_GET_HEAD_PKT_Q6_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q6_V1) & BIT_MASK_HEAD_PKT_Q6_V1)
#define BIT_SET_HEAD_PKT_Q6_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q6_V1(x) | BIT_HEAD_PKT_Q6_V1(v))

/* 2 REG_Q7_INFO				(Offset 0x0474) */

#define BIT_SHIFT_QUEUEMACID_Q7_V1			25
#define BIT_MASK_QUEUEMACID_Q7_V1			0x7f
#define BIT_QUEUEMACID_Q7_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q7_V1) << BIT_SHIFT_QUEUEMACID_Q7_V1)
#define BITS_QUEUEMACID_Q7_V1				(BIT_MASK_QUEUEMACID_Q7_V1 << BIT_SHIFT_QUEUEMACID_Q7_V1)
#define BIT_CLEAR_QUEUEMACID_Q7_V1(x)			((x) & (~BITS_QUEUEMACID_Q7_V1))
#define BIT_GET_QUEUEMACID_Q7_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q7_V1) & BIT_MASK_QUEUEMACID_Q7_V1)
#define BIT_SET_QUEUEMACID_Q7_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q7_V1(x) | BIT_QUEUEMACID_Q7_V1(v))

#define BIT_SHIFT_QUEUEAC_Q7_V1			23
#define BIT_MASK_QUEUEAC_Q7_V1				0x3
#define BIT_QUEUEAC_Q7_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q7_V1) << BIT_SHIFT_QUEUEAC_Q7_V1)
#define BITS_QUEUEAC_Q7_V1				(BIT_MASK_QUEUEAC_Q7_V1 << BIT_SHIFT_QUEUEAC_Q7_V1)
#define BIT_CLEAR_QUEUEAC_Q7_V1(x)			((x) & (~BITS_QUEUEAC_Q7_V1))
#define BIT_GET_QUEUEAC_Q7_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q7_V1) & BIT_MASK_QUEUEAC_Q7_V1)
#define BIT_SET_QUEUEAC_Q7_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q7_V1(x) | BIT_QUEUEAC_Q7_V1(v))

#define BIT_TIDEMPTY_Q7_V1				BIT(22)

#define BIT_SHIFT_TAIL_PKT_Q7_V2			11
#define BIT_MASK_TAIL_PKT_Q7_V2			0x7ff
#define BIT_TAIL_PKT_Q7_V2(x)				(((x) & BIT_MASK_TAIL_PKT_Q7_V2) << BIT_SHIFT_TAIL_PKT_Q7_V2)
#define BITS_TAIL_PKT_Q7_V2				(BIT_MASK_TAIL_PKT_Q7_V2 << BIT_SHIFT_TAIL_PKT_Q7_V2)
#define BIT_CLEAR_TAIL_PKT_Q7_V2(x)			((x) & (~BITS_TAIL_PKT_Q7_V2))
#define BIT_GET_TAIL_PKT_Q7_V2(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q7_V2) & BIT_MASK_TAIL_PKT_Q7_V2)
#define BIT_SET_TAIL_PKT_Q7_V2(x, v)			(BIT_CLEAR_TAIL_PKT_Q7_V2(x) | BIT_TAIL_PKT_Q7_V2(v))

#define BIT_SHIFT_HEAD_PKT_Q7_V1			0
#define BIT_MASK_HEAD_PKT_Q7_V1			0x7ff
#define BIT_HEAD_PKT_Q7_V1(x)				(((x) & BIT_MASK_HEAD_PKT_Q7_V1) << BIT_SHIFT_HEAD_PKT_Q7_V1)
#define BITS_HEAD_PKT_Q7_V1				(BIT_MASK_HEAD_PKT_Q7_V1 << BIT_SHIFT_HEAD_PKT_Q7_V1)
#define BIT_CLEAR_HEAD_PKT_Q7_V1(x)			((x) & (~BITS_HEAD_PKT_Q7_V1))
#define BIT_GET_HEAD_PKT_Q7_V1(x)			(((x) >> BIT_SHIFT_HEAD_PKT_Q7_V1) & BIT_MASK_HEAD_PKT_Q7_V1)
#define BIT_SET_HEAD_PKT_Q7_V1(x, v)			(BIT_CLEAR_HEAD_PKT_Q7_V1(x) | BIT_HEAD_PKT_Q7_V1(v))

/* 2 REG_WMAC_LBK_BUF_HD_V1			(Offset 0x0478) */

#define BIT_SHIFT_WMAC_LBK_BUF_HEAD_V1			0
#define BIT_MASK_WMAC_LBK_BUF_HEAD_V1			0xfff
#define BIT_WMAC_LBK_BUF_HEAD_V1(x)			(((x) & BIT_MASK_WMAC_LBK_BUF_HEAD_V1) << BIT_SHIFT_WMAC_LBK_BUF_HEAD_V1)
#define BITS_WMAC_LBK_BUF_HEAD_V1			(BIT_MASK_WMAC_LBK_BUF_HEAD_V1 << BIT_SHIFT_WMAC_LBK_BUF_HEAD_V1)
#define BIT_CLEAR_WMAC_LBK_BUF_HEAD_V1(x)		((x) & (~BITS_WMAC_LBK_BUF_HEAD_V1))
#define BIT_GET_WMAC_LBK_BUF_HEAD_V1(x)		(((x) >> BIT_SHIFT_WMAC_LBK_BUF_HEAD_V1) & BIT_MASK_WMAC_LBK_BUF_HEAD_V1)
#define BIT_SET_WMAC_LBK_BUF_HEAD_V1(x, v)		(BIT_CLEAR_WMAC_LBK_BUF_HEAD_V1(x) | BIT_WMAC_LBK_BUF_HEAD_V1(v))

/* 2 REG_MGQ_BDNY_V1				(Offset 0x047A) */

#define BIT_SHIFT_MGQ_PGBNDY_V1			0
#define BIT_MASK_MGQ_PGBNDY_V1				0xfff
#define BIT_MGQ_PGBNDY_V1(x)				(((x) & BIT_MASK_MGQ_PGBNDY_V1) << BIT_SHIFT_MGQ_PGBNDY_V1)
#define BITS_MGQ_PGBNDY_V1				(BIT_MASK_MGQ_PGBNDY_V1 << BIT_SHIFT_MGQ_PGBNDY_V1)
#define BIT_CLEAR_MGQ_PGBNDY_V1(x)			((x) & (~BITS_MGQ_PGBNDY_V1))
#define BIT_GET_MGQ_PGBNDY_V1(x)			(((x) >> BIT_SHIFT_MGQ_PGBNDY_V1) & BIT_MASK_MGQ_PGBNDY_V1)
#define BIT_SET_MGQ_PGBNDY_V1(x, v)			(BIT_CLEAR_MGQ_PGBNDY_V1(x) | BIT_MGQ_PGBNDY_V1(v))

/* 2 REG_TXRPT_CTRL				(Offset 0x047C) */

#define BIT_SHIFT_TRXRPT_TIMER_TH			24
#define BIT_MASK_TRXRPT_TIMER_TH			0xff
#define BIT_TRXRPT_TIMER_TH(x)				(((x) & BIT_MASK_TRXRPT_TIMER_TH) << BIT_SHIFT_TRXRPT_TIMER_TH)
#define BITS_TRXRPT_TIMER_TH				(BIT_MASK_TRXRPT_TIMER_TH << BIT_SHIFT_TRXRPT_TIMER_TH)
#define BIT_CLEAR_TRXRPT_TIMER_TH(x)			((x) & (~BITS_TRXRPT_TIMER_TH))
#define BIT_GET_TRXRPT_TIMER_TH(x)			(((x) >> BIT_SHIFT_TRXRPT_TIMER_TH) & BIT_MASK_TRXRPT_TIMER_TH)
#define BIT_SET_TRXRPT_TIMER_TH(x, v)			(BIT_CLEAR_TRXRPT_TIMER_TH(x) | BIT_TRXRPT_TIMER_TH(v))

#define BIT_SHIFT_TRXRPT_LEN_TH			16
#define BIT_MASK_TRXRPT_LEN_TH				0xff
#define BIT_TRXRPT_LEN_TH(x)				(((x) & BIT_MASK_TRXRPT_LEN_TH) << BIT_SHIFT_TRXRPT_LEN_TH)
#define BITS_TRXRPT_LEN_TH				(BIT_MASK_TRXRPT_LEN_TH << BIT_SHIFT_TRXRPT_LEN_TH)
#define BIT_CLEAR_TRXRPT_LEN_TH(x)			((x) & (~BITS_TRXRPT_LEN_TH))
#define BIT_GET_TRXRPT_LEN_TH(x)			(((x) >> BIT_SHIFT_TRXRPT_LEN_TH) & BIT_MASK_TRXRPT_LEN_TH)
#define BIT_SET_TRXRPT_LEN_TH(x, v)			(BIT_CLEAR_TRXRPT_LEN_TH(x) | BIT_TRXRPT_LEN_TH(v))

#define BIT_SHIFT_TRXRPT_READ_PTR			8
#define BIT_MASK_TRXRPT_READ_PTR			0xff
#define BIT_TRXRPT_READ_PTR(x)				(((x) & BIT_MASK_TRXRPT_READ_PTR) << BIT_SHIFT_TRXRPT_READ_PTR)
#define BITS_TRXRPT_READ_PTR				(BIT_MASK_TRXRPT_READ_PTR << BIT_SHIFT_TRXRPT_READ_PTR)
#define BIT_CLEAR_TRXRPT_READ_PTR(x)			((x) & (~BITS_TRXRPT_READ_PTR))
#define BIT_GET_TRXRPT_READ_PTR(x)			(((x) >> BIT_SHIFT_TRXRPT_READ_PTR) & BIT_MASK_TRXRPT_READ_PTR)
#define BIT_SET_TRXRPT_READ_PTR(x, v)			(BIT_CLEAR_TRXRPT_READ_PTR(x) | BIT_TRXRPT_READ_PTR(v))

#define BIT_SHIFT_TRXRPT_WRITE_PTR			0
#define BIT_MASK_TRXRPT_WRITE_PTR			0xff
#define BIT_TRXRPT_WRITE_PTR(x)			(((x) & BIT_MASK_TRXRPT_WRITE_PTR) << BIT_SHIFT_TRXRPT_WRITE_PTR)
#define BITS_TRXRPT_WRITE_PTR				(BIT_MASK_TRXRPT_WRITE_PTR << BIT_SHIFT_TRXRPT_WRITE_PTR)
#define BIT_CLEAR_TRXRPT_WRITE_PTR(x)			((x) & (~BITS_TRXRPT_WRITE_PTR))
#define BIT_GET_TRXRPT_WRITE_PTR(x)			(((x) >> BIT_SHIFT_TRXRPT_WRITE_PTR) & BIT_MASK_TRXRPT_WRITE_PTR)
#define BIT_SET_TRXRPT_WRITE_PTR(x, v)			(BIT_CLEAR_TRXRPT_WRITE_PTR(x) | BIT_TRXRPT_WRITE_PTR(v))

/* 2 REG_INIRTS_RATE_SEL			(Offset 0x0480) */

#define BIT_LEAG_RTS_BW_DUP				BIT(5)

/* 2 REG_BASIC_CFEND_RATE			(Offset 0x0481) */

#define BIT_SHIFT_BASIC_CFEND_RATE			0
#define BIT_MASK_BASIC_CFEND_RATE			0x1f
#define BIT_BASIC_CFEND_RATE(x)			(((x) & BIT_MASK_BASIC_CFEND_RATE) << BIT_SHIFT_BASIC_CFEND_RATE)
#define BITS_BASIC_CFEND_RATE				(BIT_MASK_BASIC_CFEND_RATE << BIT_SHIFT_BASIC_CFEND_RATE)
#define BIT_CLEAR_BASIC_CFEND_RATE(x)			((x) & (~BITS_BASIC_CFEND_RATE))
#define BIT_GET_BASIC_CFEND_RATE(x)			(((x) >> BIT_SHIFT_BASIC_CFEND_RATE) & BIT_MASK_BASIC_CFEND_RATE)
#define BIT_SET_BASIC_CFEND_RATE(x, v)			(BIT_CLEAR_BASIC_CFEND_RATE(x) | BIT_BASIC_CFEND_RATE(v))

/* 2 REG_STBC_CFEND_RATE			(Offset 0x0482) */

#define BIT_SHIFT_STBC_CFEND_RATE			0
#define BIT_MASK_STBC_CFEND_RATE			0x1f
#define BIT_STBC_CFEND_RATE(x)				(((x) & BIT_MASK_STBC_CFEND_RATE) << BIT_SHIFT_STBC_CFEND_RATE)
#define BITS_STBC_CFEND_RATE				(BIT_MASK_STBC_CFEND_RATE << BIT_SHIFT_STBC_CFEND_RATE)
#define BIT_CLEAR_STBC_CFEND_RATE(x)			((x) & (~BITS_STBC_CFEND_RATE))
#define BIT_GET_STBC_CFEND_RATE(x)			(((x) >> BIT_SHIFT_STBC_CFEND_RATE) & BIT_MASK_STBC_CFEND_RATE)
#define BIT_SET_STBC_CFEND_RATE(x, v)			(BIT_CLEAR_STBC_CFEND_RATE(x) | BIT_STBC_CFEND_RATE(v))

/* 2 REG_DATA_SC				(Offset 0x0483) */

#define BIT_SHIFT_TXSC_40M				4
#define BIT_MASK_TXSC_40M				0xf
#define BIT_TXSC_40M(x)				(((x) & BIT_MASK_TXSC_40M) << BIT_SHIFT_TXSC_40M)
#define BITS_TXSC_40M					(BIT_MASK_TXSC_40M << BIT_SHIFT_TXSC_40M)
#define BIT_CLEAR_TXSC_40M(x)				((x) & (~BITS_TXSC_40M))
#define BIT_GET_TXSC_40M(x)				(((x) >> BIT_SHIFT_TXSC_40M) & BIT_MASK_TXSC_40M)
#define BIT_SET_TXSC_40M(x, v)				(BIT_CLEAR_TXSC_40M(x) | BIT_TXSC_40M(v))

#define BIT_SHIFT_TXSC_20M				0
#define BIT_MASK_TXSC_20M				0xf
#define BIT_TXSC_20M(x)				(((x) & BIT_MASK_TXSC_20M) << BIT_SHIFT_TXSC_20M)
#define BITS_TXSC_20M					(BIT_MASK_TXSC_20M << BIT_SHIFT_TXSC_20M)
#define BIT_CLEAR_TXSC_20M(x)				((x) & (~BITS_TXSC_20M))
#define BIT_GET_TXSC_20M(x)				(((x) >> BIT_SHIFT_TXSC_20M) & BIT_MASK_TXSC_20M)
#define BIT_SET_TXSC_20M(x, v)				(BIT_CLEAR_TXSC_20M(x) | BIT_TXSC_20M(v))

/* 2 REG_MACID_SLEEP3			(Offset 0x0484) */

#define BIT_SHIFT_MACID127_96_PKTSLEEP			0
#define BIT_MASK_MACID127_96_PKTSLEEP			0xffffffffL
#define BIT_MACID127_96_PKTSLEEP(x)			(((x) & BIT_MASK_MACID127_96_PKTSLEEP) << BIT_SHIFT_MACID127_96_PKTSLEEP)
#define BITS_MACID127_96_PKTSLEEP			(BIT_MASK_MACID127_96_PKTSLEEP << BIT_SHIFT_MACID127_96_PKTSLEEP)
#define BIT_CLEAR_MACID127_96_PKTSLEEP(x)		((x) & (~BITS_MACID127_96_PKTSLEEP))
#define BIT_GET_MACID127_96_PKTSLEEP(x)		(((x) >> BIT_SHIFT_MACID127_96_PKTSLEEP) & BIT_MASK_MACID127_96_PKTSLEEP)
#define BIT_SET_MACID127_96_PKTSLEEP(x, v)		(BIT_CLEAR_MACID127_96_PKTSLEEP(x) | BIT_MACID127_96_PKTSLEEP(v))

/* 2 REG_MACID_SLEEP1			(Offset 0x0488) */

#define BIT_SHIFT_MACID63_32_PKTSLEEP			0
#define BIT_MASK_MACID63_32_PKTSLEEP			0xffffffffL
#define BIT_MACID63_32_PKTSLEEP(x)			(((x) & BIT_MASK_MACID63_32_PKTSLEEP) << BIT_SHIFT_MACID63_32_PKTSLEEP)
#define BITS_MACID63_32_PKTSLEEP			(BIT_MASK_MACID63_32_PKTSLEEP << BIT_SHIFT_MACID63_32_PKTSLEEP)
#define BIT_CLEAR_MACID63_32_PKTSLEEP(x)		((x) & (~BITS_MACID63_32_PKTSLEEP))
#define BIT_GET_MACID63_32_PKTSLEEP(x)			(((x) >> BIT_SHIFT_MACID63_32_PKTSLEEP) & BIT_MASK_MACID63_32_PKTSLEEP)
#define BIT_SET_MACID63_32_PKTSLEEP(x, v)		(BIT_CLEAR_MACID63_32_PKTSLEEP(x) | BIT_MACID63_32_PKTSLEEP(v))

/* 2 REG_ARFR2_V1				(Offset 0x048C) */

#define BIT_SHIFT_ARFRL2				0
#define BIT_MASK_ARFRL2				0xffffffffL
#define BIT_ARFRL2(x)					(((x) & BIT_MASK_ARFRL2) << BIT_SHIFT_ARFRL2)
#define BITS_ARFRL2					(BIT_MASK_ARFRL2 << BIT_SHIFT_ARFRL2)
#define BIT_CLEAR_ARFRL2(x)				((x) & (~BITS_ARFRL2))
#define BIT_GET_ARFRL2(x)				(((x) >> BIT_SHIFT_ARFRL2) & BIT_MASK_ARFRL2)
#define BIT_SET_ARFRL2(x, v)				(BIT_CLEAR_ARFRL2(x) | BIT_ARFRL2(v))

/* 2 REG_ARFRH2_V1				(Offset 0x0490) */

#define BIT_SHIFT_ARFRH2				0
#define BIT_MASK_ARFRH2				0xffffffffL
#define BIT_ARFRH2(x)					(((x) & BIT_MASK_ARFRH2) << BIT_SHIFT_ARFRH2)
#define BITS_ARFRH2					(BIT_MASK_ARFRH2 << BIT_SHIFT_ARFRH2)
#define BIT_CLEAR_ARFRH2(x)				((x) & (~BITS_ARFRH2))
#define BIT_GET_ARFRH2(x)				(((x) >> BIT_SHIFT_ARFRH2) & BIT_MASK_ARFRH2)
#define BIT_SET_ARFRH2(x, v)				(BIT_CLEAR_ARFRH2(x) | BIT_ARFRH2(v))

/* 2 REG_ARFR3_V1				(Offset 0x0494) */

#define BIT_SHIFT_ARFRL3				0
#define BIT_MASK_ARFRL3				0xffffffffL
#define BIT_ARFRL3(x)					(((x) & BIT_MASK_ARFRL3) << BIT_SHIFT_ARFRL3)
#define BITS_ARFRL3					(BIT_MASK_ARFRL3 << BIT_SHIFT_ARFRL3)
#define BIT_CLEAR_ARFRL3(x)				((x) & (~BITS_ARFRL3))
#define BIT_GET_ARFRL3(x)				(((x) >> BIT_SHIFT_ARFRL3) & BIT_MASK_ARFRL3)
#define BIT_SET_ARFRL3(x, v)				(BIT_CLEAR_ARFRL3(x) | BIT_ARFRL3(v))

/* 2 REG_ARFRH3_V1				(Offset 0x0498) */

#define BIT_SHIFT_ARFRH3				0
#define BIT_MASK_ARFRH3				0xffffffffL
#define BIT_ARFRH3(x)					(((x) & BIT_MASK_ARFRH3) << BIT_SHIFT_ARFRH3)
#define BITS_ARFRH3					(BIT_MASK_ARFRH3 << BIT_SHIFT_ARFRH3)
#define BIT_CLEAR_ARFRH3(x)				((x) & (~BITS_ARFRH3))
#define BIT_GET_ARFRH3(x)				(((x) >> BIT_SHIFT_ARFRH3) & BIT_MASK_ARFRH3)
#define BIT_SET_ARFRH3(x, v)				(BIT_CLEAR_ARFRH3(x) | BIT_ARFRH3(v))

/* 2 REG_ARFR4				(Offset 0x049C) */

#define BIT_SHIFT_ARFRL4				0
#define BIT_MASK_ARFRL4				0xffffffffL
#define BIT_ARFRL4(x)					(((x) & BIT_MASK_ARFRL4) << BIT_SHIFT_ARFRL4)
#define BITS_ARFRL4					(BIT_MASK_ARFRL4 << BIT_SHIFT_ARFRL4)
#define BIT_CLEAR_ARFRL4(x)				((x) & (~BITS_ARFRL4))
#define BIT_GET_ARFRL4(x)				(((x) >> BIT_SHIFT_ARFRL4) & BIT_MASK_ARFRL4)
#define BIT_SET_ARFRL4(x, v)				(BIT_CLEAR_ARFRL4(x) | BIT_ARFRL4(v))

/* 2 REG_ARFRH4				(Offset 0x04A0) */

#define BIT_SHIFT_ARFRH4				0
#define BIT_MASK_ARFRH4				0xffffffffL
#define BIT_ARFRH4(x)					(((x) & BIT_MASK_ARFRH4) << BIT_SHIFT_ARFRH4)
#define BITS_ARFRH4					(BIT_MASK_ARFRH4 << BIT_SHIFT_ARFRH4)
#define BIT_CLEAR_ARFRH4(x)				((x) & (~BITS_ARFRH4))
#define BIT_GET_ARFRH4(x)				(((x) >> BIT_SHIFT_ARFRH4) & BIT_MASK_ARFRH4)
#define BIT_SET_ARFRH4(x, v)				(BIT_CLEAR_ARFRH4(x) | BIT_ARFRH4(v))

/* 2 REG_ARFR5				(Offset 0x04A4) */

#define BIT_SHIFT_ARFRL5				0
#define BIT_MASK_ARFRL5				0xffffffffL
#define BIT_ARFRL5(x)					(((x) & BIT_MASK_ARFRL5) << BIT_SHIFT_ARFRL5)
#define BITS_ARFRL5					(BIT_MASK_ARFRL5 << BIT_SHIFT_ARFRL5)
#define BIT_CLEAR_ARFRL5(x)				((x) & (~BITS_ARFRL5))
#define BIT_GET_ARFRL5(x)				(((x) >> BIT_SHIFT_ARFRL5) & BIT_MASK_ARFRL5)
#define BIT_SET_ARFRL5(x, v)				(BIT_CLEAR_ARFRL5(x) | BIT_ARFRL5(v))

/* 2 REG_ARFRH5				(Offset 0x04A8) */

#define BIT_SHIFT_ARFRH5				0
#define BIT_MASK_ARFRH5				0xffffffffL
#define BIT_ARFRH5(x)					(((x) & BIT_MASK_ARFRH5) << BIT_SHIFT_ARFRH5)
#define BITS_ARFRH5					(BIT_MASK_ARFRH5 << BIT_SHIFT_ARFRH5)
#define BIT_CLEAR_ARFRH5(x)				((x) & (~BITS_ARFRH5))
#define BIT_GET_ARFRH5(x)				(((x) >> BIT_SHIFT_ARFRH5) & BIT_MASK_ARFRH5)
#define BIT_SET_ARFRH5(x, v)				(BIT_CLEAR_ARFRH5(x) | BIT_ARFRH5(v))

/* 2 REG_TXRPT_START_OFFSET			(Offset 0x04AC) */

#define BIT_SHIFT_MACID_MURATE_OFFSET			24
#define BIT_MASK_MACID_MURATE_OFFSET			0xff
#define BIT_MACID_MURATE_OFFSET(x)			(((x) & BIT_MASK_MACID_MURATE_OFFSET) << BIT_SHIFT_MACID_MURATE_OFFSET)
#define BITS_MACID_MURATE_OFFSET			(BIT_MASK_MACID_MURATE_OFFSET << BIT_SHIFT_MACID_MURATE_OFFSET)
#define BIT_CLEAR_MACID_MURATE_OFFSET(x)		((x) & (~BITS_MACID_MURATE_OFFSET))
#define BIT_GET_MACID_MURATE_OFFSET(x)			(((x) >> BIT_SHIFT_MACID_MURATE_OFFSET) & BIT_MASK_MACID_MURATE_OFFSET)
#define BIT_SET_MACID_MURATE_OFFSET(x, v)		(BIT_CLEAR_MACID_MURATE_OFFSET(x) | BIT_MACID_MURATE_OFFSET(v))

#define BIT_SHIFT_TXRPT_MISS_COUNT			17
#define BIT_MASK_TXRPT_MISS_COUNT			0x7
#define BIT_TXRPT_MISS_COUNT(x)			(((x) & BIT_MASK_TXRPT_MISS_COUNT) << BIT_SHIFT_TXRPT_MISS_COUNT)
#define BITS_TXRPT_MISS_COUNT				(BIT_MASK_TXRPT_MISS_COUNT << BIT_SHIFT_TXRPT_MISS_COUNT)
#define BIT_CLEAR_TXRPT_MISS_COUNT(x)			((x) & (~BITS_TXRPT_MISS_COUNT))
#define BIT_GET_TXRPT_MISS_COUNT(x)			(((x) >> BIT_SHIFT_TXRPT_MISS_COUNT) & BIT_MASK_TXRPT_MISS_COUNT)
#define BIT_SET_TXRPT_MISS_COUNT(x, v)			(BIT_CLEAR_TXRPT_MISS_COUNT(x) | BIT_TXRPT_MISS_COUNT(v))

#define BIT_RPTFIFO_SIZE_OPT				BIT(16)

#define BIT_SHIFT_MACID_CTRL_OFFSET			8
#define BIT_MASK_MACID_CTRL_OFFSET			0xff
#define BIT_MACID_CTRL_OFFSET(x)			(((x) & BIT_MASK_MACID_CTRL_OFFSET) << BIT_SHIFT_MACID_CTRL_OFFSET)
#define BITS_MACID_CTRL_OFFSET				(BIT_MASK_MACID_CTRL_OFFSET << BIT_SHIFT_MACID_CTRL_OFFSET)
#define BIT_CLEAR_MACID_CTRL_OFFSET(x)			((x) & (~BITS_MACID_CTRL_OFFSET))
#define BIT_GET_MACID_CTRL_OFFSET(x)			(((x) >> BIT_SHIFT_MACID_CTRL_OFFSET) & BIT_MASK_MACID_CTRL_OFFSET)
#define BIT_SET_MACID_CTRL_OFFSET(x, v)		(BIT_CLEAR_MACID_CTRL_OFFSET(x) | BIT_MACID_CTRL_OFFSET(v))

#define BIT_SHIFT_AMPDU_TXRPT_OFFSET			0
#define BIT_MASK_AMPDU_TXRPT_OFFSET			0xff
#define BIT_AMPDU_TXRPT_OFFSET(x)			(((x) & BIT_MASK_AMPDU_TXRPT_OFFSET) << BIT_SHIFT_AMPDU_TXRPT_OFFSET)
#define BITS_AMPDU_TXRPT_OFFSET			(BIT_MASK_AMPDU_TXRPT_OFFSET << BIT_SHIFT_AMPDU_TXRPT_OFFSET)
#define BIT_CLEAR_AMPDU_TXRPT_OFFSET(x)		((x) & (~BITS_AMPDU_TXRPT_OFFSET))
#define BIT_GET_AMPDU_TXRPT_OFFSET(x)			(((x) >> BIT_SHIFT_AMPDU_TXRPT_OFFSET) & BIT_MASK_AMPDU_TXRPT_OFFSET)
#define BIT_SET_AMPDU_TXRPT_OFFSET(x, v)		(BIT_CLEAR_AMPDU_TXRPT_OFFSET(x) | BIT_AMPDU_TXRPT_OFFSET(v))

/* 2 REG_RRSR_CTS				(Offset 0x04B0) */

#define BIT_SHIFT_RRCTSSR_RSC				21
#define BIT_MASK_RRCTSSR_RSC				0x3
#define BIT_RRCTSSR_RSC(x)				(((x) & BIT_MASK_RRCTSSR_RSC) << BIT_SHIFT_RRCTSSR_RSC)
#define BITS_RRCTSSR_RSC				(BIT_MASK_RRCTSSR_RSC << BIT_SHIFT_RRCTSSR_RSC)
#define BIT_CLEAR_RRCTSSR_RSC(x)			((x) & (~BITS_RRCTSSR_RSC))
#define BIT_GET_RRCTSSR_RSC(x)				(((x) >> BIT_SHIFT_RRCTSSR_RSC) & BIT_MASK_RRCTSSR_RSC)
#define BIT_SET_RRCTSSR_RSC(x, v)			(BIT_CLEAR_RRCTSSR_RSC(x) | BIT_RRCTSSR_RSC(v))

#define BIT_SHIFT_RRCTSSC_BITMAP			0
#define BIT_MASK_RRCTSSC_BITMAP			0xfffff
#define BIT_RRCTSSC_BITMAP(x)				(((x) & BIT_MASK_RRCTSSC_BITMAP) << BIT_SHIFT_RRCTSSC_BITMAP)
#define BITS_RRCTSSC_BITMAP				(BIT_MASK_RRCTSSC_BITMAP << BIT_SHIFT_RRCTSSC_BITMAP)
#define BIT_CLEAR_RRCTSSC_BITMAP(x)			((x) & (~BITS_RRCTSSC_BITMAP))
#define BIT_GET_RRCTSSC_BITMAP(x)			(((x) >> BIT_SHIFT_RRCTSSC_BITMAP) & BIT_MASK_RRCTSSC_BITMAP)
#define BIT_SET_RRCTSSC_BITMAP(x, v)			(BIT_CLEAR_RRCTSSC_BITMAP(x) | BIT_RRCTSSC_BITMAP(v))

/* 2 REG_POWER_STAGE1			(Offset 0x04B4) */

#define BIT_PTA_WL_PRI_MASK_CPU_MGQ			BIT(31)
#define BIT_PTA_WL_PRI_MASK_BCNQ			BIT(30)
#define BIT_PTA_WL_PRI_MASK_HIQ			BIT(29)
#define BIT_PTA_WL_PRI_MASK_MGQ			BIT(28)
#define BIT_PTA_WL_PRI_MASK_BK				BIT(27)
#define BIT_PTA_WL_PRI_MASK_BE				BIT(26)
#define BIT_PTA_WL_PRI_MASK_VI				BIT(25)
#define BIT_PTA_WL_PRI_MASK_VO				BIT(24)

#define BIT_SHIFT_POWER_STAGE1				0
#define BIT_MASK_POWER_STAGE1				0xffffff
#define BIT_POWER_STAGE1(x)				(((x) & BIT_MASK_POWER_STAGE1) << BIT_SHIFT_POWER_STAGE1)
#define BITS_POWER_STAGE1				(BIT_MASK_POWER_STAGE1 << BIT_SHIFT_POWER_STAGE1)
#define BIT_CLEAR_POWER_STAGE1(x)			((x) & (~BITS_POWER_STAGE1))
#define BIT_GET_POWER_STAGE1(x)			(((x) >> BIT_SHIFT_POWER_STAGE1) & BIT_MASK_POWER_STAGE1)
#define BIT_SET_POWER_STAGE1(x, v)			(BIT_CLEAR_POWER_STAGE1(x) | BIT_POWER_STAGE1(v))

/* 2 REG_POWER_STAGE2			(Offset 0x04B8) */

#define BIT__R_CTRL_PKT_POW_ADJ			BIT(24)

#define BIT_SHIFT_POWER_STAGE2				0
#define BIT_MASK_POWER_STAGE2				0xffffff
#define BIT_POWER_STAGE2(x)				(((x) & BIT_MASK_POWER_STAGE2) << BIT_SHIFT_POWER_STAGE2)
#define BITS_POWER_STAGE2				(BIT_MASK_POWER_STAGE2 << BIT_SHIFT_POWER_STAGE2)
#define BIT_CLEAR_POWER_STAGE2(x)			((x) & (~BITS_POWER_STAGE2))
#define BIT_GET_POWER_STAGE2(x)			(((x) >> BIT_SHIFT_POWER_STAGE2) & BIT_MASK_POWER_STAGE2)
#define BIT_SET_POWER_STAGE2(x, v)			(BIT_CLEAR_POWER_STAGE2(x) | BIT_POWER_STAGE2(v))

/* 2 REG_SW_AMPDU_BURST_MODE_CTRL		(Offset 0x04BC) */

#define BIT_SHIFT_PAD_NUM_THRES			24
#define BIT_MASK_PAD_NUM_THRES				0x3f
#define BIT_PAD_NUM_THRES(x)				(((x) & BIT_MASK_PAD_NUM_THRES) << BIT_SHIFT_PAD_NUM_THRES)
#define BITS_PAD_NUM_THRES				(BIT_MASK_PAD_NUM_THRES << BIT_SHIFT_PAD_NUM_THRES)
#define BIT_CLEAR_PAD_NUM_THRES(x)			((x) & (~BITS_PAD_NUM_THRES))
#define BIT_GET_PAD_NUM_THRES(x)			(((x) >> BIT_SHIFT_PAD_NUM_THRES) & BIT_MASK_PAD_NUM_THRES)
#define BIT_SET_PAD_NUM_THRES(x, v)			(BIT_CLEAR_PAD_NUM_THRES(x) | BIT_PAD_NUM_THRES(v))

#define BIT_R_DMA_THIS_QUEUE_BK			BIT(23)
#define BIT_R_DMA_THIS_QUEUE_BE			BIT(22)
#define BIT_R_DMA_THIS_QUEUE_VI			BIT(21)
#define BIT_R_DMA_THIS_QUEUE_VO			BIT(20)

#define BIT_SHIFT_R_TOTAL_LEN_TH			8
#define BIT_MASK_R_TOTAL_LEN_TH			0xfff
#define BIT_R_TOTAL_LEN_TH(x)				(((x) & BIT_MASK_R_TOTAL_LEN_TH) << BIT_SHIFT_R_TOTAL_LEN_TH)
#define BITS_R_TOTAL_LEN_TH				(BIT_MASK_R_TOTAL_LEN_TH << BIT_SHIFT_R_TOTAL_LEN_TH)
#define BIT_CLEAR_R_TOTAL_LEN_TH(x)			((x) & (~BITS_R_TOTAL_LEN_TH))
#define BIT_GET_R_TOTAL_LEN_TH(x)			(((x) >> BIT_SHIFT_R_TOTAL_LEN_TH) & BIT_MASK_R_TOTAL_LEN_TH)
#define BIT_SET_R_TOTAL_LEN_TH(x, v)			(BIT_CLEAR_R_TOTAL_LEN_TH(x) | BIT_R_TOTAL_LEN_TH(v))

#define BIT_EN_NEW_EARLY				BIT(7)
#define BIT_PRE_TX_CMD					BIT(6)

#define BIT_SHIFT_NUM_SCL_EN				4
#define BIT_MASK_NUM_SCL_EN				0x3
#define BIT_NUM_SCL_EN(x)				(((x) & BIT_MASK_NUM_SCL_EN) << BIT_SHIFT_NUM_SCL_EN)
#define BITS_NUM_SCL_EN				(BIT_MASK_NUM_SCL_EN << BIT_SHIFT_NUM_SCL_EN)
#define BIT_CLEAR_NUM_SCL_EN(x)			((x) & (~BITS_NUM_SCL_EN))
#define BIT_GET_NUM_SCL_EN(x)				(((x) >> BIT_SHIFT_NUM_SCL_EN) & BIT_MASK_NUM_SCL_EN)
#define BIT_SET_NUM_SCL_EN(x, v)			(BIT_CLEAR_NUM_SCL_EN(x) | BIT_NUM_SCL_EN(v))

#define BIT_BK_EN					BIT(3)
#define BIT_BE_EN					BIT(2)
#define BIT_VI_EN					BIT(1)
#define BIT_VO_EN					BIT(0)

/* 2 REG_PKT_LIFE_TIME			(Offset 0x04C0) */

#define BIT_SHIFT_PKT_LIFTIME_BEBK			16
#define BIT_MASK_PKT_LIFTIME_BEBK			0xffff
#define BIT_PKT_LIFTIME_BEBK(x)			(((x) & BIT_MASK_PKT_LIFTIME_BEBK) << BIT_SHIFT_PKT_LIFTIME_BEBK)
#define BITS_PKT_LIFTIME_BEBK				(BIT_MASK_PKT_LIFTIME_BEBK << BIT_SHIFT_PKT_LIFTIME_BEBK)
#define BIT_CLEAR_PKT_LIFTIME_BEBK(x)			((x) & (~BITS_PKT_LIFTIME_BEBK))
#define BIT_GET_PKT_LIFTIME_BEBK(x)			(((x) >> BIT_SHIFT_PKT_LIFTIME_BEBK) & BIT_MASK_PKT_LIFTIME_BEBK)
#define BIT_SET_PKT_LIFTIME_BEBK(x, v)			(BIT_CLEAR_PKT_LIFTIME_BEBK(x) | BIT_PKT_LIFTIME_BEBK(v))

#define BIT_SHIFT_PKT_LIFTIME_VOVI			0
#define BIT_MASK_PKT_LIFTIME_VOVI			0xffff
#define BIT_PKT_LIFTIME_VOVI(x)			(((x) & BIT_MASK_PKT_LIFTIME_VOVI) << BIT_SHIFT_PKT_LIFTIME_VOVI)
#define BITS_PKT_LIFTIME_VOVI				(BIT_MASK_PKT_LIFTIME_VOVI << BIT_SHIFT_PKT_LIFTIME_VOVI)
#define BIT_CLEAR_PKT_LIFTIME_VOVI(x)			((x) & (~BITS_PKT_LIFTIME_VOVI))
#define BIT_GET_PKT_LIFTIME_VOVI(x)			(((x) >> BIT_SHIFT_PKT_LIFTIME_VOVI) & BIT_MASK_PKT_LIFTIME_VOVI)
#define BIT_SET_PKT_LIFTIME_VOVI(x, v)			(BIT_CLEAR_PKT_LIFTIME_VOVI(x) | BIT_PKT_LIFTIME_VOVI(v))

/* 2 REG_STBC_SETTING			(Offset 0x04C4) */

#define BIT_SHIFT_CDEND_TXTIME_L			4
#define BIT_MASK_CDEND_TXTIME_L			0xf
#define BIT_CDEND_TXTIME_L(x)				(((x) & BIT_MASK_CDEND_TXTIME_L) << BIT_SHIFT_CDEND_TXTIME_L)
#define BITS_CDEND_TXTIME_L				(BIT_MASK_CDEND_TXTIME_L << BIT_SHIFT_CDEND_TXTIME_L)
#define BIT_CLEAR_CDEND_TXTIME_L(x)			((x) & (~BITS_CDEND_TXTIME_L))
#define BIT_GET_CDEND_TXTIME_L(x)			(((x) >> BIT_SHIFT_CDEND_TXTIME_L) & BIT_MASK_CDEND_TXTIME_L)
#define BIT_SET_CDEND_TXTIME_L(x, v)			(BIT_CLEAR_CDEND_TXTIME_L(x) | BIT_CDEND_TXTIME_L(v))

#define BIT_SHIFT_NESS					2
#define BIT_MASK_NESS					0x3
#define BIT_NESS(x)					(((x) & BIT_MASK_NESS) << BIT_SHIFT_NESS)
#define BITS_NESS					(BIT_MASK_NESS << BIT_SHIFT_NESS)
#define BIT_CLEAR_NESS(x)				((x) & (~BITS_NESS))
#define BIT_GET_NESS(x)				(((x) >> BIT_SHIFT_NESS) & BIT_MASK_NESS)
#define BIT_SET_NESS(x, v)				(BIT_CLEAR_NESS(x) | BIT_NESS(v))

#define BIT_SHIFT_STBC_CFEND				0
#define BIT_MASK_STBC_CFEND				0x3
#define BIT_STBC_CFEND(x)				(((x) & BIT_MASK_STBC_CFEND) << BIT_SHIFT_STBC_CFEND)
#define BITS_STBC_CFEND				(BIT_MASK_STBC_CFEND << BIT_SHIFT_STBC_CFEND)
#define BIT_CLEAR_STBC_CFEND(x)			((x) & (~BITS_STBC_CFEND))
#define BIT_GET_STBC_CFEND(x)				(((x) >> BIT_SHIFT_STBC_CFEND) & BIT_MASK_STBC_CFEND)
#define BIT_SET_STBC_CFEND(x, v)			(BIT_CLEAR_STBC_CFEND(x) | BIT_STBC_CFEND(v))

/* 2 REG_STBC_SETTING2			(Offset 0x04C5) */

#define BIT_SHIFT_CDEND_TXTIME_H			0
#define BIT_MASK_CDEND_TXTIME_H			0x1f
#define BIT_CDEND_TXTIME_H(x)				(((x) & BIT_MASK_CDEND_TXTIME_H) << BIT_SHIFT_CDEND_TXTIME_H)
#define BITS_CDEND_TXTIME_H				(BIT_MASK_CDEND_TXTIME_H << BIT_SHIFT_CDEND_TXTIME_H)
#define BIT_CLEAR_CDEND_TXTIME_H(x)			((x) & (~BITS_CDEND_TXTIME_H))
#define BIT_GET_CDEND_TXTIME_H(x)			(((x) >> BIT_SHIFT_CDEND_TXTIME_H) & BIT_MASK_CDEND_TXTIME_H)
#define BIT_SET_CDEND_TXTIME_H(x, v)			(BIT_CLEAR_CDEND_TXTIME_H(x) | BIT_CDEND_TXTIME_H(v))

/* 2 REG_QUEUE_CTRL				(Offset 0x04C6) */

#define BIT_FORCE_RND_PRI				BIT(6)
#define BIT_PTA_EDCCA_EN				BIT(5)
#define BIT_PTA_WL_TX_EN				BIT(4)
#define BIT_R_USE_DATA_BW				BIT(3)
#define BIT_TRI_PKT_INT_MODE1				BIT(2)
#define BIT_TRI_PKT_INT_MODE0				BIT(1)
#define BIT_ACQ_MODE_SEL				BIT(0)

/* 2 REG_SINGLE_AMPDU_CTRL			(Offset 0x04C7) */

#define BIT_EN_SINGLE_APMDU				BIT(7)

#define BIT_SHIFT_SNDTX_MAXTIME			0
#define BIT_MASK_SNDTX_MAXTIME				0x7f
#define BIT_SNDTX_MAXTIME(x)				(((x) & BIT_MASK_SNDTX_MAXTIME) << BIT_SHIFT_SNDTX_MAXTIME)
#define BITS_SNDTX_MAXTIME				(BIT_MASK_SNDTX_MAXTIME << BIT_SHIFT_SNDTX_MAXTIME)
#define BIT_CLEAR_SNDTX_MAXTIME(x)			((x) & (~BITS_SNDTX_MAXTIME))
#define BIT_GET_SNDTX_MAXTIME(x)			(((x) >> BIT_SHIFT_SNDTX_MAXTIME) & BIT_MASK_SNDTX_MAXTIME)
#define BIT_SET_SNDTX_MAXTIME(x, v)			(BIT_CLEAR_SNDTX_MAXTIME(x) | BIT_SNDTX_MAXTIME(v))

/* 2 REG_PROT_MODE_CTRL			(Offset 0x04C8) */

#define BIT_SND_SIFS_TXDATA				BIT(31)
#define BIT_TX_SND_MATCH_MACID				BIT(30)

#define BIT_SHIFT_RTS_MAX_AGG_NUM			24
#define BIT_MASK_RTS_MAX_AGG_NUM			0x3f
#define BIT_RTS_MAX_AGG_NUM(x)				(((x) & BIT_MASK_RTS_MAX_AGG_NUM) << BIT_SHIFT_RTS_MAX_AGG_NUM)
#define BITS_RTS_MAX_AGG_NUM				(BIT_MASK_RTS_MAX_AGG_NUM << BIT_SHIFT_RTS_MAX_AGG_NUM)
#define BIT_CLEAR_RTS_MAX_AGG_NUM(x)			((x) & (~BITS_RTS_MAX_AGG_NUM))
#define BIT_GET_RTS_MAX_AGG_NUM(x)			(((x) >> BIT_SHIFT_RTS_MAX_AGG_NUM) & BIT_MASK_RTS_MAX_AGG_NUM)
#define BIT_SET_RTS_MAX_AGG_NUM(x, v)			(BIT_CLEAR_RTS_MAX_AGG_NUM(x) | BIT_RTS_MAX_AGG_NUM(v))

#define BIT_SHIFT_MAX_AGG_NUM				16
#define BIT_MASK_MAX_AGG_NUM				0x3f
#define BIT_MAX_AGG_NUM(x)				(((x) & BIT_MASK_MAX_AGG_NUM) << BIT_SHIFT_MAX_AGG_NUM)
#define BITS_MAX_AGG_NUM				(BIT_MASK_MAX_AGG_NUM << BIT_SHIFT_MAX_AGG_NUM)
#define BIT_CLEAR_MAX_AGG_NUM(x)			((x) & (~BITS_MAX_AGG_NUM))
#define BIT_GET_MAX_AGG_NUM(x)				(((x) >> BIT_SHIFT_MAX_AGG_NUM) & BIT_MASK_MAX_AGG_NUM)
#define BIT_SET_MAX_AGG_NUM(x, v)			(BIT_CLEAR_MAX_AGG_NUM(x) | BIT_MAX_AGG_NUM(v))

#define BIT_SHIFT_RTS_TXTIME_TH			8
#define BIT_MASK_RTS_TXTIME_TH				0xff
#define BIT_RTS_TXTIME_TH(x)				(((x) & BIT_MASK_RTS_TXTIME_TH) << BIT_SHIFT_RTS_TXTIME_TH)
#define BITS_RTS_TXTIME_TH				(BIT_MASK_RTS_TXTIME_TH << BIT_SHIFT_RTS_TXTIME_TH)
#define BIT_CLEAR_RTS_TXTIME_TH(x)			((x) & (~BITS_RTS_TXTIME_TH))
#define BIT_GET_RTS_TXTIME_TH(x)			(((x) >> BIT_SHIFT_RTS_TXTIME_TH) & BIT_MASK_RTS_TXTIME_TH)
#define BIT_SET_RTS_TXTIME_TH(x, v)			(BIT_CLEAR_RTS_TXTIME_TH(x) | BIT_RTS_TXTIME_TH(v))

#define BIT_SHIFT_RTS_LEN_TH				0
#define BIT_MASK_RTS_LEN_TH				0xff
#define BIT_RTS_LEN_TH(x)				(((x) & BIT_MASK_RTS_LEN_TH) << BIT_SHIFT_RTS_LEN_TH)
#define BITS_RTS_LEN_TH				(BIT_MASK_RTS_LEN_TH << BIT_SHIFT_RTS_LEN_TH)
#define BIT_CLEAR_RTS_LEN_TH(x)			((x) & (~BITS_RTS_LEN_TH))
#define BIT_GET_RTS_LEN_TH(x)				(((x) >> BIT_SHIFT_RTS_LEN_TH) & BIT_MASK_RTS_LEN_TH)
#define BIT_SET_RTS_LEN_TH(x, v)			(BIT_CLEAR_RTS_LEN_TH(x) | BIT_RTS_LEN_TH(v))

/* 2 REG_BAR_MODE_CTRL			(Offset 0x04CC) */

#define BIT_SHIFT_BAR_RTY_LMT				16
#define BIT_MASK_BAR_RTY_LMT				0x3
#define BIT_BAR_RTY_LMT(x)				(((x) & BIT_MASK_BAR_RTY_LMT) << BIT_SHIFT_BAR_RTY_LMT)
#define BITS_BAR_RTY_LMT				(BIT_MASK_BAR_RTY_LMT << BIT_SHIFT_BAR_RTY_LMT)
#define BIT_CLEAR_BAR_RTY_LMT(x)			((x) & (~BITS_BAR_RTY_LMT))
#define BIT_GET_BAR_RTY_LMT(x)				(((x) >> BIT_SHIFT_BAR_RTY_LMT) & BIT_MASK_BAR_RTY_LMT)
#define BIT_SET_BAR_RTY_LMT(x, v)			(BIT_CLEAR_BAR_RTY_LMT(x) | BIT_BAR_RTY_LMT(v))

#define BIT_SHIFT_BAR_PKT_TXTIME_TH			8
#define BIT_MASK_BAR_PKT_TXTIME_TH			0xff
#define BIT_BAR_PKT_TXTIME_TH(x)			(((x) & BIT_MASK_BAR_PKT_TXTIME_TH) << BIT_SHIFT_BAR_PKT_TXTIME_TH)
#define BITS_BAR_PKT_TXTIME_TH				(BIT_MASK_BAR_PKT_TXTIME_TH << BIT_SHIFT_BAR_PKT_TXTIME_TH)
#define BIT_CLEAR_BAR_PKT_TXTIME_TH(x)			((x) & (~BITS_BAR_PKT_TXTIME_TH))
#define BIT_GET_BAR_PKT_TXTIME_TH(x)			(((x) >> BIT_SHIFT_BAR_PKT_TXTIME_TH) & BIT_MASK_BAR_PKT_TXTIME_TH)
#define BIT_SET_BAR_PKT_TXTIME_TH(x, v)		(BIT_CLEAR_BAR_PKT_TXTIME_TH(x) | BIT_BAR_PKT_TXTIME_TH(v))

#define BIT_BAR_EN_V1					BIT(6)

#define BIT_SHIFT_BAR_PKTNUM_TH_V1			0
#define BIT_MASK_BAR_PKTNUM_TH_V1			0x3f
#define BIT_BAR_PKTNUM_TH_V1(x)			(((x) & BIT_MASK_BAR_PKTNUM_TH_V1) << BIT_SHIFT_BAR_PKTNUM_TH_V1)
#define BITS_BAR_PKTNUM_TH_V1				(BIT_MASK_BAR_PKTNUM_TH_V1 << BIT_SHIFT_BAR_PKTNUM_TH_V1)
#define BIT_CLEAR_BAR_PKTNUM_TH_V1(x)			((x) & (~BITS_BAR_PKTNUM_TH_V1))
#define BIT_GET_BAR_PKTNUM_TH_V1(x)			(((x) >> BIT_SHIFT_BAR_PKTNUM_TH_V1) & BIT_MASK_BAR_PKTNUM_TH_V1)
#define BIT_SET_BAR_PKTNUM_TH_V1(x, v)			(BIT_CLEAR_BAR_PKTNUM_TH_V1(x) | BIT_BAR_PKTNUM_TH_V1(v))

/* 2 REG_RA_TRY_RATE_AGG_LMT			(Offset 0x04CF) */

#define BIT_SHIFT_RA_TRY_RATE_AGG_LMT_V1		0
#define BIT_MASK_RA_TRY_RATE_AGG_LMT_V1		0x3f
#define BIT_RA_TRY_RATE_AGG_LMT_V1(x)			(((x) & BIT_MASK_RA_TRY_RATE_AGG_LMT_V1) << BIT_SHIFT_RA_TRY_RATE_AGG_LMT_V1)
#define BITS_RA_TRY_RATE_AGG_LMT_V1			(BIT_MASK_RA_TRY_RATE_AGG_LMT_V1 << BIT_SHIFT_RA_TRY_RATE_AGG_LMT_V1)
#define BIT_CLEAR_RA_TRY_RATE_AGG_LMT_V1(x)		((x) & (~BITS_RA_TRY_RATE_AGG_LMT_V1))
#define BIT_GET_RA_TRY_RATE_AGG_LMT_V1(x)		(((x) >> BIT_SHIFT_RA_TRY_RATE_AGG_LMT_V1) & BIT_MASK_RA_TRY_RATE_AGG_LMT_V1)
#define BIT_SET_RA_TRY_RATE_AGG_LMT_V1(x, v)		(BIT_CLEAR_RA_TRY_RATE_AGG_LMT_V1(x) | BIT_RA_TRY_RATE_AGG_LMT_V1(v))

/* 2 REG_MACID_SLEEP2			(Offset 0x04D0) */

#define BIT_SHIFT_MACID95_64PKTSLEEP			0
#define BIT_MASK_MACID95_64PKTSLEEP			0xffffffffL
#define BIT_MACID95_64PKTSLEEP(x)			(((x) & BIT_MASK_MACID95_64PKTSLEEP) << BIT_SHIFT_MACID95_64PKTSLEEP)
#define BITS_MACID95_64PKTSLEEP			(BIT_MASK_MACID95_64PKTSLEEP << BIT_SHIFT_MACID95_64PKTSLEEP)
#define BIT_CLEAR_MACID95_64PKTSLEEP(x)		((x) & (~BITS_MACID95_64PKTSLEEP))
#define BIT_GET_MACID95_64PKTSLEEP(x)			(((x) >> BIT_SHIFT_MACID95_64PKTSLEEP) & BIT_MASK_MACID95_64PKTSLEEP)
#define BIT_SET_MACID95_64PKTSLEEP(x, v)		(BIT_CLEAR_MACID95_64PKTSLEEP(x) | BIT_MACID95_64PKTSLEEP(v))

/* 2 REG_MACID_SLEEP				(Offset 0x04D4) */

#define BIT_SHIFT_MACID31_0_PKTSLEEP			0
#define BIT_MASK_MACID31_0_PKTSLEEP			0xffffffffL
#define BIT_MACID31_0_PKTSLEEP(x)			(((x) & BIT_MASK_MACID31_0_PKTSLEEP) << BIT_SHIFT_MACID31_0_PKTSLEEP)
#define BITS_MACID31_0_PKTSLEEP			(BIT_MASK_MACID31_0_PKTSLEEP << BIT_SHIFT_MACID31_0_PKTSLEEP)
#define BIT_CLEAR_MACID31_0_PKTSLEEP(x)		((x) & (~BITS_MACID31_0_PKTSLEEP))
#define BIT_GET_MACID31_0_PKTSLEEP(x)			(((x) >> BIT_SHIFT_MACID31_0_PKTSLEEP) & BIT_MASK_MACID31_0_PKTSLEEP)
#define BIT_SET_MACID31_0_PKTSLEEP(x, v)		(BIT_CLEAR_MACID31_0_PKTSLEEP(x) | BIT_MACID31_0_PKTSLEEP(v))

/* 2 REG_HW_SEQ0				(Offset 0x04D8) */

#define BIT_SHIFT_HW_SSN_SEQ0				0
#define BIT_MASK_HW_SSN_SEQ0				0xfff
#define BIT_HW_SSN_SEQ0(x)				(((x) & BIT_MASK_HW_SSN_SEQ0) << BIT_SHIFT_HW_SSN_SEQ0)
#define BITS_HW_SSN_SEQ0				(BIT_MASK_HW_SSN_SEQ0 << BIT_SHIFT_HW_SSN_SEQ0)
#define BIT_CLEAR_HW_SSN_SEQ0(x)			((x) & (~BITS_HW_SSN_SEQ0))
#define BIT_GET_HW_SSN_SEQ0(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ0) & BIT_MASK_HW_SSN_SEQ0)
#define BIT_SET_HW_SSN_SEQ0(x, v)			(BIT_CLEAR_HW_SSN_SEQ0(x) | BIT_HW_SSN_SEQ0(v))

/* 2 REG_HW_SEQ1				(Offset 0x04DA) */

#define BIT_SHIFT_HW_SSN_SEQ1				0
#define BIT_MASK_HW_SSN_SEQ1				0xfff
#define BIT_HW_SSN_SEQ1(x)				(((x) & BIT_MASK_HW_SSN_SEQ1) << BIT_SHIFT_HW_SSN_SEQ1)
#define BITS_HW_SSN_SEQ1				(BIT_MASK_HW_SSN_SEQ1 << BIT_SHIFT_HW_SSN_SEQ1)
#define BIT_CLEAR_HW_SSN_SEQ1(x)			((x) & (~BITS_HW_SSN_SEQ1))
#define BIT_GET_HW_SSN_SEQ1(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ1) & BIT_MASK_HW_SSN_SEQ1)
#define BIT_SET_HW_SSN_SEQ1(x, v)			(BIT_CLEAR_HW_SSN_SEQ1(x) | BIT_HW_SSN_SEQ1(v))

/* 2 REG_HW_SEQ2				(Offset 0x04DC) */

#define BIT_SHIFT_HW_SSN_SEQ2				0
#define BIT_MASK_HW_SSN_SEQ2				0xfff
#define BIT_HW_SSN_SEQ2(x)				(((x) & BIT_MASK_HW_SSN_SEQ2) << BIT_SHIFT_HW_SSN_SEQ2)
#define BITS_HW_SSN_SEQ2				(BIT_MASK_HW_SSN_SEQ2 << BIT_SHIFT_HW_SSN_SEQ2)
#define BIT_CLEAR_HW_SSN_SEQ2(x)			((x) & (~BITS_HW_SSN_SEQ2))
#define BIT_GET_HW_SSN_SEQ2(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ2) & BIT_MASK_HW_SSN_SEQ2)
#define BIT_SET_HW_SSN_SEQ2(x, v)			(BIT_CLEAR_HW_SSN_SEQ2(x) | BIT_HW_SSN_SEQ2(v))

/* 2 REG_HW_SEQ3				(Offset 0x04DE) */

#define BIT_SHIFT_CSI_HWSEQ_SEL			12
#define BIT_MASK_CSI_HWSEQ_SEL				0x3
#define BIT_CSI_HWSEQ_SEL(x)				(((x) & BIT_MASK_CSI_HWSEQ_SEL) << BIT_SHIFT_CSI_HWSEQ_SEL)
#define BITS_CSI_HWSEQ_SEL				(BIT_MASK_CSI_HWSEQ_SEL << BIT_SHIFT_CSI_HWSEQ_SEL)
#define BIT_CLEAR_CSI_HWSEQ_SEL(x)			((x) & (~BITS_CSI_HWSEQ_SEL))
#define BIT_GET_CSI_HWSEQ_SEL(x)			(((x) >> BIT_SHIFT_CSI_HWSEQ_SEL) & BIT_MASK_CSI_HWSEQ_SEL)
#define BIT_SET_CSI_HWSEQ_SEL(x, v)			(BIT_CLEAR_CSI_HWSEQ_SEL(x) | BIT_CSI_HWSEQ_SEL(v))

#define BIT_SHIFT_HW_SSN_SEQ3				0
#define BIT_MASK_HW_SSN_SEQ3				0xfff
#define BIT_HW_SSN_SEQ3(x)				(((x) & BIT_MASK_HW_SSN_SEQ3) << BIT_SHIFT_HW_SSN_SEQ3)
#define BITS_HW_SSN_SEQ3				(BIT_MASK_HW_SSN_SEQ3 << BIT_SHIFT_HW_SSN_SEQ3)
#define BIT_CLEAR_HW_SSN_SEQ3(x)			((x) & (~BITS_HW_SSN_SEQ3))
#define BIT_GET_HW_SSN_SEQ3(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ3) & BIT_MASK_HW_SSN_SEQ3)
#define BIT_SET_HW_SSN_SEQ3(x, v)			(BIT_CLEAR_HW_SSN_SEQ3(x) | BIT_HW_SSN_SEQ3(v))

/* 2 REG_NULL_PKT_STATUS_V1			(Offset 0x04E0) */

#define BIT_SHIFT_PTCL_TOTAL_PG_V2			2
#define BIT_MASK_PTCL_TOTAL_PG_V2			0x3fff
#define BIT_PTCL_TOTAL_PG_V2(x)			(((x) & BIT_MASK_PTCL_TOTAL_PG_V2) << BIT_SHIFT_PTCL_TOTAL_PG_V2)
#define BITS_PTCL_TOTAL_PG_V2				(BIT_MASK_PTCL_TOTAL_PG_V2 << BIT_SHIFT_PTCL_TOTAL_PG_V2)
#define BIT_CLEAR_PTCL_TOTAL_PG_V2(x)			((x) & (~BITS_PTCL_TOTAL_PG_V2))
#define BIT_GET_PTCL_TOTAL_PG_V2(x)			(((x) >> BIT_SHIFT_PTCL_TOTAL_PG_V2) & BIT_MASK_PTCL_TOTAL_PG_V2)
#define BIT_SET_PTCL_TOTAL_PG_V2(x, v)			(BIT_CLEAR_PTCL_TOTAL_PG_V2(x) | BIT_PTCL_TOTAL_PG_V2(v))

#define BIT_TX_NULL_1					BIT(1)
#define BIT_TX_NULL_0					BIT(0)

/* 2 REG_PTCL_ERR_STATUS			(Offset 0x04E2) */

#define BIT_PTCL_RATE_TABLE_INVALID			BIT(7)
#define BIT_FTM_T2R_ERROR				BIT(6)
#define BIT_PTCL_ERR0					BIT(5)
#define BIT_PTCL_ERR1					BIT(4)
#define BIT_PTCL_ERR2					BIT(3)
#define BIT_PTCL_ERR3					BIT(2)
#define BIT_PTCL_ERR4					BIT(1)
#define BIT_PTCL_ERR5					BIT(0)

/* 2 REG_NULL_PKT_STATUS_EXTEND		(Offset 0x04E3) */

#define BIT_CLI3_TX_NULL_1				BIT(7)
#define BIT_CLI3_TX_NULL_0				BIT(6)
#define BIT_CLI2_TX_NULL_1				BIT(5)
#define BIT_CLI2_TX_NULL_0				BIT(4)
#define BIT_CLI1_TX_NULL_1				BIT(3)
#define BIT_CLI1_TX_NULL_0				BIT(2)
#define BIT_CLI0_TX_NULL_1				BIT(1)
#define BIT_CLI0_TX_NULL_0				BIT(0)

/* 2 REG_HQMGQ_DROP				(Offset 0x04E4) */

#define BIT_HIQ_DROP					BIT(7)
#define BIT_MGQ_DROP					BIT(6)
#define BIT_CLR_HGQ_REQ_BLOCK				BIT(5)

/* 2 REG_PRECNT_CTRL				(Offset 0x04E5) */

#define BIT_SHIFT_COLLISION_DETECT_TIME		12
#define BIT_MASK_COLLISION_DETECT_TIME			0xf
#define BIT_COLLISION_DETECT_TIME(x)			(((x) & BIT_MASK_COLLISION_DETECT_TIME) << BIT_SHIFT_COLLISION_DETECT_TIME)
#define BITS_COLLISION_DETECT_TIME			(BIT_MASK_COLLISION_DETECT_TIME << BIT_SHIFT_COLLISION_DETECT_TIME)
#define BIT_CLEAR_COLLISION_DETECT_TIME(x)		((x) & (~BITS_COLLISION_DETECT_TIME))
#define BIT_GET_COLLISION_DETECT_TIME(x)		(((x) >> BIT_SHIFT_COLLISION_DETECT_TIME) & BIT_MASK_COLLISION_DETECT_TIME)
#define BIT_SET_COLLISION_DETECT_TIME(x, v)		(BIT_CLEAR_COLLISION_DETECT_TIME(x) | BIT_COLLISION_DETECT_TIME(v))

#define BIT_EN_PRECNT					BIT(11)

#define BIT_SHIFT_PRECNT_TH				0
#define BIT_MASK_PRECNT_TH				0x7ff
#define BIT_PRECNT_TH(x)				(((x) & BIT_MASK_PRECNT_TH) << BIT_SHIFT_PRECNT_TH)
#define BITS_PRECNT_TH					(BIT_MASK_PRECNT_TH << BIT_SHIFT_PRECNT_TH)
#define BIT_CLEAR_PRECNT_TH(x)				((x) & (~BITS_PRECNT_TH))
#define BIT_GET_PRECNT_TH(x)				(((x) >> BIT_SHIFT_PRECNT_TH) & BIT_MASK_PRECNT_TH)
#define BIT_SET_PRECNT_TH(x, v)			(BIT_CLEAR_PRECNT_TH(x) | BIT_PRECNT_TH(v))

/* 2 REG_BT_POLLUTE_PKT_CNT			(Offset 0x04E8) */

#define BIT_SHIFT_BT_POLLUTE_PKT_CNT			0
#define BIT_MASK_BT_POLLUTE_PKT_CNT			0xffff
#define BIT_BT_POLLUTE_PKT_CNT(x)			(((x) & BIT_MASK_BT_POLLUTE_PKT_CNT) << BIT_SHIFT_BT_POLLUTE_PKT_CNT)
#define BITS_BT_POLLUTE_PKT_CNT			(BIT_MASK_BT_POLLUTE_PKT_CNT << BIT_SHIFT_BT_POLLUTE_PKT_CNT)
#define BIT_CLEAR_BT_POLLUTE_PKT_CNT(x)		((x) & (~BITS_BT_POLLUTE_PKT_CNT))
#define BIT_GET_BT_POLLUTE_PKT_CNT(x)			(((x) >> BIT_SHIFT_BT_POLLUTE_PKT_CNT) & BIT_MASK_BT_POLLUTE_PKT_CNT)
#define BIT_SET_BT_POLLUTE_PKT_CNT(x, v)		(BIT_CLEAR_BT_POLLUTE_PKT_CNT(x) | BIT_BT_POLLUTE_PKT_CNT(v))

/* 2 REG_PTCL_DBG				(Offset 0x04EC) */

#define BIT_SHIFT_PTCL_DBG				0
#define BIT_MASK_PTCL_DBG				0xffffffffL
#define BIT_PTCL_DBG(x)				(((x) & BIT_MASK_PTCL_DBG) << BIT_SHIFT_PTCL_DBG)
#define BITS_PTCL_DBG					(BIT_MASK_PTCL_DBG << BIT_SHIFT_PTCL_DBG)
#define BIT_CLEAR_PTCL_DBG(x)				((x) & (~BITS_PTCL_DBG))
#define BIT_GET_PTCL_DBG(x)				(((x) >> BIT_SHIFT_PTCL_DBG) & BIT_MASK_PTCL_DBG)
#define BIT_SET_PTCL_DBG(x, v)				(BIT_CLEAR_PTCL_DBG(x) | BIT_PTCL_DBG(v))

/* 2 REG_CPUMGQ_TIMER_CTRL2			(Offset 0x04F4) */

#define BIT_SHIFT_TRI_HEAD_ADDR			16
#define BIT_MASK_TRI_HEAD_ADDR				0xfff
#define BIT_TRI_HEAD_ADDR(x)				(((x) & BIT_MASK_TRI_HEAD_ADDR) << BIT_SHIFT_TRI_HEAD_ADDR)
#define BITS_TRI_HEAD_ADDR				(BIT_MASK_TRI_HEAD_ADDR << BIT_SHIFT_TRI_HEAD_ADDR)
#define BIT_CLEAR_TRI_HEAD_ADDR(x)			((x) & (~BITS_TRI_HEAD_ADDR))
#define BIT_GET_TRI_HEAD_ADDR(x)			(((x) >> BIT_SHIFT_TRI_HEAD_ADDR) & BIT_MASK_TRI_HEAD_ADDR)
#define BIT_SET_TRI_HEAD_ADDR(x, v)			(BIT_CLEAR_TRI_HEAD_ADDR(x) | BIT_TRI_HEAD_ADDR(v))

#define BIT_DROP_TH_EN					BIT(8)

#define BIT_SHIFT_DROP_TH				0
#define BIT_MASK_DROP_TH				0xff
#define BIT_DROP_TH(x)					(((x) & BIT_MASK_DROP_TH) << BIT_SHIFT_DROP_TH)
#define BITS_DROP_TH					(BIT_MASK_DROP_TH << BIT_SHIFT_DROP_TH)
#define BIT_CLEAR_DROP_TH(x)				((x) & (~BITS_DROP_TH))
#define BIT_GET_DROP_TH(x)				(((x) >> BIT_SHIFT_DROP_TH) & BIT_MASK_DROP_TH)
#define BIT_SET_DROP_TH(x, v)				(BIT_CLEAR_DROP_TH(x) | BIT_DROP_TH(v))

/* 2 REG_MOREDATA				(Offset 0x04FE) */

#define BIT_QUEUE_MACID_AC_NOT_THE_SAME		BIT(31)

#define BIT_SHIFT_GTAB_ID				28
#define BIT_MASK_GTAB_ID				0x7
#define BIT_GTAB_ID(x)					(((x) & BIT_MASK_GTAB_ID) << BIT_SHIFT_GTAB_ID)
#define BITS_GTAB_ID					(BIT_MASK_GTAB_ID << BIT_SHIFT_GTAB_ID)
#define BIT_CLEAR_GTAB_ID(x)				((x) & (~BITS_GTAB_ID))
#define BIT_GET_GTAB_ID(x)				(((x) >> BIT_SHIFT_GTAB_ID) & BIT_MASK_GTAB_ID)
#define BIT_SET_GTAB_ID(x, v)				(BIT_CLEAR_GTAB_ID(x) | BIT_GTAB_ID(v))

#define BIT_MOREDATA_CTRL2_EN_V1			BIT(3)
#define BIT_MOREDATA_CTRL1_EN_V1			BIT(2)
#define BIT_PKTIN_MOREDATA_REPLACE_ENABLE_V1		BIT(0)

/* 2 REG_EDCA_VO_PARAM			(Offset 0x0500) */

#define BIT_SHIFT_TXOPLIMIT				16
#define BIT_MASK_TXOPLIMIT				0x7ff
#define BIT_TXOPLIMIT(x)				(((x) & BIT_MASK_TXOPLIMIT) << BIT_SHIFT_TXOPLIMIT)
#define BITS_TXOPLIMIT					(BIT_MASK_TXOPLIMIT << BIT_SHIFT_TXOPLIMIT)
#define BIT_CLEAR_TXOPLIMIT(x)				((x) & (~BITS_TXOPLIMIT))
#define BIT_GET_TXOPLIMIT(x)				(((x) >> BIT_SHIFT_TXOPLIMIT) & BIT_MASK_TXOPLIMIT)
#define BIT_SET_TXOPLIMIT(x, v)			(BIT_CLEAR_TXOPLIMIT(x) | BIT_TXOPLIMIT(v))

#define BIT_SHIFT_CW					8
#define BIT_MASK_CW					0xff
#define BIT_CW(x)					(((x) & BIT_MASK_CW) << BIT_SHIFT_CW)
#define BITS_CW					(BIT_MASK_CW << BIT_SHIFT_CW)
#define BIT_CLEAR_CW(x)				((x) & (~BITS_CW))
#define BIT_GET_CW(x)					(((x) >> BIT_SHIFT_CW) & BIT_MASK_CW)
#define BIT_SET_CW(x, v)				(BIT_CLEAR_CW(x) | BIT_CW(v))

#define BIT_SHIFT_AIFS					0
#define BIT_MASK_AIFS					0xff
#define BIT_AIFS(x)					(((x) & BIT_MASK_AIFS) << BIT_SHIFT_AIFS)
#define BITS_AIFS					(BIT_MASK_AIFS << BIT_SHIFT_AIFS)
#define BIT_CLEAR_AIFS(x)				((x) & (~BITS_AIFS))
#define BIT_GET_AIFS(x)				(((x) >> BIT_SHIFT_AIFS) & BIT_MASK_AIFS)
#define BIT_SET_AIFS(x, v)				(BIT_CLEAR_AIFS(x) | BIT_AIFS(v))

/* 2 REG_BCNTCFG				(Offset 0x0510) */

#define BIT_SHIFT_BCNCW_MAX				12
#define BIT_MASK_BCNCW_MAX				0xf
#define BIT_BCNCW_MAX(x)				(((x) & BIT_MASK_BCNCW_MAX) << BIT_SHIFT_BCNCW_MAX)
#define BITS_BCNCW_MAX					(BIT_MASK_BCNCW_MAX << BIT_SHIFT_BCNCW_MAX)
#define BIT_CLEAR_BCNCW_MAX(x)				((x) & (~BITS_BCNCW_MAX))
#define BIT_GET_BCNCW_MAX(x)				(((x) >> BIT_SHIFT_BCNCW_MAX) & BIT_MASK_BCNCW_MAX)
#define BIT_SET_BCNCW_MAX(x, v)			(BIT_CLEAR_BCNCW_MAX(x) | BIT_BCNCW_MAX(v))

#define BIT_SHIFT_BCNCW_MIN				8
#define BIT_MASK_BCNCW_MIN				0xf
#define BIT_BCNCW_MIN(x)				(((x) & BIT_MASK_BCNCW_MIN) << BIT_SHIFT_BCNCW_MIN)
#define BITS_BCNCW_MIN					(BIT_MASK_BCNCW_MIN << BIT_SHIFT_BCNCW_MIN)
#define BIT_CLEAR_BCNCW_MIN(x)				((x) & (~BITS_BCNCW_MIN))
#define BIT_GET_BCNCW_MIN(x)				(((x) >> BIT_SHIFT_BCNCW_MIN) & BIT_MASK_BCNCW_MIN)
#define BIT_SET_BCNCW_MIN(x, v)			(BIT_CLEAR_BCNCW_MIN(x) | BIT_BCNCW_MIN(v))

#define BIT_SHIFT_BCNIFS				0
#define BIT_MASK_BCNIFS				0xff
#define BIT_BCNIFS(x)					(((x) & BIT_MASK_BCNIFS) << BIT_SHIFT_BCNIFS)
#define BITS_BCNIFS					(BIT_MASK_BCNIFS << BIT_SHIFT_BCNIFS)
#define BIT_CLEAR_BCNIFS(x)				((x) & (~BITS_BCNIFS))
#define BIT_GET_BCNIFS(x)				(((x) >> BIT_SHIFT_BCNIFS) & BIT_MASK_BCNIFS)
#define BIT_SET_BCNIFS(x, v)				(BIT_CLEAR_BCNIFS(x) | BIT_BCNIFS(v))

/* 2 REG_PIFS				(Offset 0x0512) */

#define BIT_SHIFT_PIFS					0
#define BIT_MASK_PIFS					0xff
#define BIT_PIFS(x)					(((x) & BIT_MASK_PIFS) << BIT_SHIFT_PIFS)
#define BITS_PIFS					(BIT_MASK_PIFS << BIT_SHIFT_PIFS)
#define BIT_CLEAR_PIFS(x)				((x) & (~BITS_PIFS))
#define BIT_GET_PIFS(x)				(((x) >> BIT_SHIFT_PIFS) & BIT_MASK_PIFS)
#define BIT_SET_PIFS(x, v)				(BIT_CLEAR_PIFS(x) | BIT_PIFS(v))

/* 2 REG_RDG_PIFS				(Offset 0x0513) */

#define BIT_SHIFT_RDG_PIFS				0
#define BIT_MASK_RDG_PIFS				0xff
#define BIT_RDG_PIFS(x)				(((x) & BIT_MASK_RDG_PIFS) << BIT_SHIFT_RDG_PIFS)
#define BITS_RDG_PIFS					(BIT_MASK_RDG_PIFS << BIT_SHIFT_RDG_PIFS)
#define BIT_CLEAR_RDG_PIFS(x)				((x) & (~BITS_RDG_PIFS))
#define BIT_GET_RDG_PIFS(x)				(((x) >> BIT_SHIFT_RDG_PIFS) & BIT_MASK_RDG_PIFS)
#define BIT_SET_RDG_PIFS(x, v)				(BIT_CLEAR_RDG_PIFS(x) | BIT_RDG_PIFS(v))

/* 2 REG_SIFS				(Offset 0x0514) */

#define BIT_SHIFT_SIFS_OFDM_TRX			24
#define BIT_MASK_SIFS_OFDM_TRX				0xff
#define BIT_SIFS_OFDM_TRX(x)				(((x) & BIT_MASK_SIFS_OFDM_TRX) << BIT_SHIFT_SIFS_OFDM_TRX)
#define BITS_SIFS_OFDM_TRX				(BIT_MASK_SIFS_OFDM_TRX << BIT_SHIFT_SIFS_OFDM_TRX)
#define BIT_CLEAR_SIFS_OFDM_TRX(x)			((x) & (~BITS_SIFS_OFDM_TRX))
#define BIT_GET_SIFS_OFDM_TRX(x)			(((x) >> BIT_SHIFT_SIFS_OFDM_TRX) & BIT_MASK_SIFS_OFDM_TRX)
#define BIT_SET_SIFS_OFDM_TRX(x, v)			(BIT_CLEAR_SIFS_OFDM_TRX(x) | BIT_SIFS_OFDM_TRX(v))

#define BIT_SHIFT_SIFS_CCK_TRX				16
#define BIT_MASK_SIFS_CCK_TRX				0xff
#define BIT_SIFS_CCK_TRX(x)				(((x) & BIT_MASK_SIFS_CCK_TRX) << BIT_SHIFT_SIFS_CCK_TRX)
#define BITS_SIFS_CCK_TRX				(BIT_MASK_SIFS_CCK_TRX << BIT_SHIFT_SIFS_CCK_TRX)
#define BIT_CLEAR_SIFS_CCK_TRX(x)			((x) & (~BITS_SIFS_CCK_TRX))
#define BIT_GET_SIFS_CCK_TRX(x)			(((x) >> BIT_SHIFT_SIFS_CCK_TRX) & BIT_MASK_SIFS_CCK_TRX)
#define BIT_SET_SIFS_CCK_TRX(x, v)			(BIT_CLEAR_SIFS_CCK_TRX(x) | BIT_SIFS_CCK_TRX(v))

#define BIT_SHIFT_SIFS_OFDM_CTX			8
#define BIT_MASK_SIFS_OFDM_CTX				0xff
#define BIT_SIFS_OFDM_CTX(x)				(((x) & BIT_MASK_SIFS_OFDM_CTX) << BIT_SHIFT_SIFS_OFDM_CTX)
#define BITS_SIFS_OFDM_CTX				(BIT_MASK_SIFS_OFDM_CTX << BIT_SHIFT_SIFS_OFDM_CTX)
#define BIT_CLEAR_SIFS_OFDM_CTX(x)			((x) & (~BITS_SIFS_OFDM_CTX))
#define BIT_GET_SIFS_OFDM_CTX(x)			(((x) >> BIT_SHIFT_SIFS_OFDM_CTX) & BIT_MASK_SIFS_OFDM_CTX)
#define BIT_SET_SIFS_OFDM_CTX(x, v)			(BIT_CLEAR_SIFS_OFDM_CTX(x) | BIT_SIFS_OFDM_CTX(v))

#define BIT_SHIFT_SIFS_CCK_CTX				0
#define BIT_MASK_SIFS_CCK_CTX				0xff
#define BIT_SIFS_CCK_CTX(x)				(((x) & BIT_MASK_SIFS_CCK_CTX) << BIT_SHIFT_SIFS_CCK_CTX)
#define BITS_SIFS_CCK_CTX				(BIT_MASK_SIFS_CCK_CTX << BIT_SHIFT_SIFS_CCK_CTX)
#define BIT_CLEAR_SIFS_CCK_CTX(x)			((x) & (~BITS_SIFS_CCK_CTX))
#define BIT_GET_SIFS_CCK_CTX(x)			(((x) >> BIT_SHIFT_SIFS_CCK_CTX) & BIT_MASK_SIFS_CCK_CTX)
#define BIT_SET_SIFS_CCK_CTX(x, v)			(BIT_CLEAR_SIFS_CCK_CTX(x) | BIT_SIFS_CCK_CTX(v))

/* 2 REG_TSFTR_SYN_OFFSET			(Offset 0x0518) */

#define BIT_SHIFT_TSFTR_SNC_OFFSET			0
#define BIT_MASK_TSFTR_SNC_OFFSET			0xffff
#define BIT_TSFTR_SNC_OFFSET(x)			(((x) & BIT_MASK_TSFTR_SNC_OFFSET) << BIT_SHIFT_TSFTR_SNC_OFFSET)
#define BITS_TSFTR_SNC_OFFSET				(BIT_MASK_TSFTR_SNC_OFFSET << BIT_SHIFT_TSFTR_SNC_OFFSET)
#define BIT_CLEAR_TSFTR_SNC_OFFSET(x)			((x) & (~BITS_TSFTR_SNC_OFFSET))
#define BIT_GET_TSFTR_SNC_OFFSET(x)			(((x) >> BIT_SHIFT_TSFTR_SNC_OFFSET) & BIT_MASK_TSFTR_SNC_OFFSET)
#define BIT_SET_TSFTR_SNC_OFFSET(x, v)			(BIT_CLEAR_TSFTR_SNC_OFFSET(x) | BIT_TSFTR_SNC_OFFSET(v))

/* 2 REG_AGGR_BREAK_TIME			(Offset 0x051A) */

#define BIT_SHIFT_AGGR_BK_TIME				0
#define BIT_MASK_AGGR_BK_TIME				0xff
#define BIT_AGGR_BK_TIME(x)				(((x) & BIT_MASK_AGGR_BK_TIME) << BIT_SHIFT_AGGR_BK_TIME)
#define BITS_AGGR_BK_TIME				(BIT_MASK_AGGR_BK_TIME << BIT_SHIFT_AGGR_BK_TIME)
#define BIT_CLEAR_AGGR_BK_TIME(x)			((x) & (~BITS_AGGR_BK_TIME))
#define BIT_GET_AGGR_BK_TIME(x)			(((x) >> BIT_SHIFT_AGGR_BK_TIME) & BIT_MASK_AGGR_BK_TIME)
#define BIT_SET_AGGR_BK_TIME(x, v)			(BIT_CLEAR_AGGR_BK_TIME(x) | BIT_AGGR_BK_TIME(v))

/* 2 REG_SLOT				(Offset 0x051B) */

#define BIT_SHIFT_SLOT					0
#define BIT_MASK_SLOT					0xff
#define BIT_SLOT(x)					(((x) & BIT_MASK_SLOT) << BIT_SHIFT_SLOT)
#define BITS_SLOT					(BIT_MASK_SLOT << BIT_SHIFT_SLOT)
#define BIT_CLEAR_SLOT(x)				((x) & (~BITS_SLOT))
#define BIT_GET_SLOT(x)				(((x) >> BIT_SHIFT_SLOT) & BIT_MASK_SLOT)
#define BIT_SET_SLOT(x, v)				(BIT_CLEAR_SLOT(x) | BIT_SLOT(v))

/* 2 REG_NOA_ON_ERLY_TIME			(Offset 0x051C) */

#define BIT_SHIFT__NOA_ON_ERLY_TIME			0
#define BIT_MASK__NOA_ON_ERLY_TIME			0xff
#define BIT__NOA_ON_ERLY_TIME(x)			(((x) & BIT_MASK__NOA_ON_ERLY_TIME) << BIT_SHIFT__NOA_ON_ERLY_TIME)
#define BITS__NOA_ON_ERLY_TIME				(BIT_MASK__NOA_ON_ERLY_TIME << BIT_SHIFT__NOA_ON_ERLY_TIME)
#define BIT_CLEAR__NOA_ON_ERLY_TIME(x)			((x) & (~BITS__NOA_ON_ERLY_TIME))
#define BIT_GET__NOA_ON_ERLY_TIME(x)			(((x) >> BIT_SHIFT__NOA_ON_ERLY_TIME) & BIT_MASK__NOA_ON_ERLY_TIME)
#define BIT_SET__NOA_ON_ERLY_TIME(x, v)		(BIT_CLEAR__NOA_ON_ERLY_TIME(x) | BIT__NOA_ON_ERLY_TIME(v))

/* 2 REG_NOA_OFF_ERLY_TIME			(Offset 0x051D) */

#define BIT_SHIFT__NOA_OFF_ERLY_TIME			0
#define BIT_MASK__NOA_OFF_ERLY_TIME			0xff
#define BIT__NOA_OFF_ERLY_TIME(x)			(((x) & BIT_MASK__NOA_OFF_ERLY_TIME) << BIT_SHIFT__NOA_OFF_ERLY_TIME)
#define BITS__NOA_OFF_ERLY_TIME			(BIT_MASK__NOA_OFF_ERLY_TIME << BIT_SHIFT__NOA_OFF_ERLY_TIME)
#define BIT_CLEAR__NOA_OFF_ERLY_TIME(x)		((x) & (~BITS__NOA_OFF_ERLY_TIME))
#define BIT_GET__NOA_OFF_ERLY_TIME(x)			(((x) >> BIT_SHIFT__NOA_OFF_ERLY_TIME) & BIT_MASK__NOA_OFF_ERLY_TIME)
#define BIT_SET__NOA_OFF_ERLY_TIME(x, v)		(BIT_CLEAR__NOA_OFF_ERLY_TIME(x) | BIT__NOA_OFF_ERLY_TIME(v))

/* 2 REG_TX_PTCL_CTRL			(Offset 0x0520) */

#define BIT_DIS_EDCCA					BIT(15)
#define BIT_DIS_CCA					BIT(14)
#define BIT_LSIG_TXOP_TXCMD_NAV			BIT(13)
#define BIT_SIFS_BK_EN					BIT(12)

#define BIT_SHIFT_TXQ_NAV_MSK				8
#define BIT_MASK_TXQ_NAV_MSK				0xf
#define BIT_TXQ_NAV_MSK(x)				(((x) & BIT_MASK_TXQ_NAV_MSK) << BIT_SHIFT_TXQ_NAV_MSK)
#define BITS_TXQ_NAV_MSK				(BIT_MASK_TXQ_NAV_MSK << BIT_SHIFT_TXQ_NAV_MSK)
#define BIT_CLEAR_TXQ_NAV_MSK(x)			((x) & (~BITS_TXQ_NAV_MSK))
#define BIT_GET_TXQ_NAV_MSK(x)				(((x) >> BIT_SHIFT_TXQ_NAV_MSK) & BIT_MASK_TXQ_NAV_MSK)
#define BIT_SET_TXQ_NAV_MSK(x, v)			(BIT_CLEAR_TXQ_NAV_MSK(x) | BIT_TXQ_NAV_MSK(v))

#define BIT_DIS_CW					BIT(7)
#define BIT_NAV_END_TXOP				BIT(6)
#define BIT_RDG_END_TXOP				BIT(5)
#define BIT_AC_INBCN_HOLD				BIT(4)
#define BIT_MGTQ_TXOP_EN				BIT(3)
#define BIT_MGTQ_RTSMF_EN				BIT(2)
#define BIT_HIQ_RTSMF_EN				BIT(1)
#define BIT_BCN_RTSMF_EN				BIT(0)

/* 2 REG_TXPAUSE				(Offset 0x0522) */

#define BIT_STOP_BCN_HI_MGT				BIT(7)
#define BIT_MAC_STOPBCNQ				BIT(6)
#define BIT_MAC_STOPHIQ				BIT(5)
#define BIT_MAC_STOPMGQ				BIT(4)
#define BIT_MAC_STOPBK					BIT(3)
#define BIT_MAC_STOPBE					BIT(2)
#define BIT_MAC_STOPVI					BIT(1)
#define BIT_MAC_STOPVO					BIT(0)

/* 2 REG_DIS_TXREQ_CLR			(Offset 0x0523) */

#define BIT_DIS_BT_CCA					BIT(7)
#define BIT_DIS_TXREQ_CLR_HI				BIT(5)
#define BIT_DIS_TXREQ_CLR_MGQ				BIT(4)
#define BIT_DIS_TXREQ_CLR_VO				BIT(3)
#define BIT_DIS_TXREQ_CLR_VI				BIT(2)
#define BIT_DIS_TXREQ_CLR_BE				BIT(1)
#define BIT_DIS_TXREQ_CLR_BK				BIT(0)

/* 2 REG_RD_CTRL				(Offset 0x0524) */

#define BIT_EN_CLR_TXREQ_INCCA				BIT(15)
#define BIT_DIS_TX_OVER_BCNQ				BIT(14)
#define BIT_EN_BCNERR_INCCCA				BIT(13)
#define BIT_EDCCA_MSK_CNTDOWN_EN			BIT(11)
#define BIT_DIS_TXOP_CFE				BIT(10)
#define BIT_DIS_LSIG_CFE				BIT(9)
#define BIT_DIS_STBC_CFE				BIT(8)
#define BIT_BKQ_RD_INIT_EN				BIT(7)
#define BIT_BEQ_RD_INIT_EN				BIT(6)
#define BIT_VIQ_RD_INIT_EN				BIT(5)
#define BIT_VOQ_RD_INIT_EN				BIT(4)
#define BIT_BKQ_RD_RESP_EN				BIT(3)
#define BIT_BEQ_RD_RESP_EN				BIT(2)
#define BIT_VIQ_RD_RESP_EN				BIT(1)
#define BIT_VOQ_RD_RESP_EN				BIT(0)

/* 2 REG_MBSSID_CTRL				(Offset 0x0526) */

#define BIT_MBID_BCNQ7_EN				BIT(7)
#define BIT_MBID_BCNQ6_EN				BIT(6)
#define BIT_MBID_BCNQ5_EN				BIT(5)
#define BIT_MBID_BCNQ4_EN				BIT(4)
#define BIT_MBID_BCNQ3_EN				BIT(3)
#define BIT_MBID_BCNQ2_EN				BIT(2)
#define BIT_MBID_BCNQ1_EN				BIT(1)
#define BIT_MBID_BCNQ0_EN				BIT(0)

/* 2 REG_P2PPS_CTRL				(Offset 0x0527) */

#define BIT_P2P_CTW_ALLSTASLEEP			BIT(7)
#define BIT_P2P_OFF_DISTX_EN				BIT(6)
#define BIT_PWR_MGT_EN					BIT(5)
#define BIT_P2P_NOA1_EN				BIT(2)
#define BIT_P2P_NOA0_EN				BIT(1)

/* 2 REG_PKT_LIFETIME_CTRL			(Offset 0x0528) */

#define BIT_EN_P2P_CTWND1				BIT(23)
#define BIT_EN_BKF_CLR_TXREQ				BIT(22)
#define BIT_EN_TSFBIT32_RST_P2P			BIT(21)
#define BIT_EN_BCN_TX_BTCCA				BIT(20)
#define BIT_DIS_PKT_TX_ATIM				BIT(19)
#define BIT_DIS_BCN_DIS_CTN				BIT(18)
#define BIT_EN_NAVEND_RST_TXOP				BIT(17)
#define BIT_EN_FILTER_CCA				BIT(16)

#define BIT_SHIFT_CCA_FILTER_THRS			8
#define BIT_MASK_CCA_FILTER_THRS			0xff
#define BIT_CCA_FILTER_THRS(x)				(((x) & BIT_MASK_CCA_FILTER_THRS) << BIT_SHIFT_CCA_FILTER_THRS)
#define BITS_CCA_FILTER_THRS				(BIT_MASK_CCA_FILTER_THRS << BIT_SHIFT_CCA_FILTER_THRS)
#define BIT_CLEAR_CCA_FILTER_THRS(x)			((x) & (~BITS_CCA_FILTER_THRS))
#define BIT_GET_CCA_FILTER_THRS(x)			(((x) >> BIT_SHIFT_CCA_FILTER_THRS) & BIT_MASK_CCA_FILTER_THRS)
#define BIT_SET_CCA_FILTER_THRS(x, v)			(BIT_CLEAR_CCA_FILTER_THRS(x) | BIT_CCA_FILTER_THRS(v))

#define BIT_SHIFT_EDCCA_THRS				0
#define BIT_MASK_EDCCA_THRS				0xff
#define BIT_EDCCA_THRS(x)				(((x) & BIT_MASK_EDCCA_THRS) << BIT_SHIFT_EDCCA_THRS)
#define BITS_EDCCA_THRS				(BIT_MASK_EDCCA_THRS << BIT_SHIFT_EDCCA_THRS)
#define BIT_CLEAR_EDCCA_THRS(x)			((x) & (~BITS_EDCCA_THRS))
#define BIT_GET_EDCCA_THRS(x)				(((x) >> BIT_SHIFT_EDCCA_THRS) & BIT_MASK_EDCCA_THRS)
#define BIT_SET_EDCCA_THRS(x, v)			(BIT_CLEAR_EDCCA_THRS(x) | BIT_EDCCA_THRS(v))

/* 2 REG_P2PPS_SPEC_STATE			(Offset 0x052B) */

#define BIT_SPEC_POWER_STATE				BIT(7)
#define BIT_SPEC_CTWINDOW_ON				BIT(6)
#define BIT_SPEC_BEACON_AREA_ON			BIT(5)
#define BIT_SPEC_CTWIN_EARLY_DISTX			BIT(4)
#define BIT_SPEC_NOA1_OFF_PERIOD			BIT(3)
#define BIT_SPEC_FORCE_DOZE1				BIT(2)
#define BIT_SPEC_NOA0_OFF_PERIOD			BIT(1)
#define BIT_SPEC_FORCE_DOZE0				BIT(0)

/* 2 REG_TXOP_LIMIT_CTRL			(Offset 0x052C) */

#define BIT_SHIFT_TXOP_TBTT_CNT			24
#define BIT_MASK_TXOP_TBTT_CNT				0xff
#define BIT_TXOP_TBTT_CNT(x)				(((x) & BIT_MASK_TXOP_TBTT_CNT) << BIT_SHIFT_TXOP_TBTT_CNT)
#define BITS_TXOP_TBTT_CNT				(BIT_MASK_TXOP_TBTT_CNT << BIT_SHIFT_TXOP_TBTT_CNT)
#define BIT_CLEAR_TXOP_TBTT_CNT(x)			((x) & (~BITS_TXOP_TBTT_CNT))
#define BIT_GET_TXOP_TBTT_CNT(x)			(((x) >> BIT_SHIFT_TXOP_TBTT_CNT) & BIT_MASK_TXOP_TBTT_CNT)
#define BIT_SET_TXOP_TBTT_CNT(x, v)			(BIT_CLEAR_TXOP_TBTT_CNT(x) | BIT_TXOP_TBTT_CNT(v))

#define BIT_SHIFT_TXOP_TBTT_CNT_SEL			20
#define BIT_MASK_TXOP_TBTT_CNT_SEL			0xf
#define BIT_TXOP_TBTT_CNT_SEL(x)			(((x) & BIT_MASK_TXOP_TBTT_CNT_SEL) << BIT_SHIFT_TXOP_TBTT_CNT_SEL)
#define BITS_TXOP_TBTT_CNT_SEL				(BIT_MASK_TXOP_TBTT_CNT_SEL << BIT_SHIFT_TXOP_TBTT_CNT_SEL)
#define BIT_CLEAR_TXOP_TBTT_CNT_SEL(x)			((x) & (~BITS_TXOP_TBTT_CNT_SEL))
#define BIT_GET_TXOP_TBTT_CNT_SEL(x)			(((x) >> BIT_SHIFT_TXOP_TBTT_CNT_SEL) & BIT_MASK_TXOP_TBTT_CNT_SEL)
#define BIT_SET_TXOP_TBTT_CNT_SEL(x, v)		(BIT_CLEAR_TXOP_TBTT_CNT_SEL(x) | BIT_TXOP_TBTT_CNT_SEL(v))

#define BIT_SHIFT_TXOP_LMT_EN				16
#define BIT_MASK_TXOP_LMT_EN				0xf
#define BIT_TXOP_LMT_EN(x)				(((x) & BIT_MASK_TXOP_LMT_EN) << BIT_SHIFT_TXOP_LMT_EN)
#define BITS_TXOP_LMT_EN				(BIT_MASK_TXOP_LMT_EN << BIT_SHIFT_TXOP_LMT_EN)
#define BIT_CLEAR_TXOP_LMT_EN(x)			((x) & (~BITS_TXOP_LMT_EN))
#define BIT_GET_TXOP_LMT_EN(x)				(((x) >> BIT_SHIFT_TXOP_LMT_EN) & BIT_MASK_TXOP_LMT_EN)
#define BIT_SET_TXOP_LMT_EN(x, v)			(BIT_CLEAR_TXOP_LMT_EN(x) | BIT_TXOP_LMT_EN(v))

#define BIT_SHIFT_TXOP_LMT_TX_TIME			8
#define BIT_MASK_TXOP_LMT_TX_TIME			0xff
#define BIT_TXOP_LMT_TX_TIME(x)			(((x) & BIT_MASK_TXOP_LMT_TX_TIME) << BIT_SHIFT_TXOP_LMT_TX_TIME)
#define BITS_TXOP_LMT_TX_TIME				(BIT_MASK_TXOP_LMT_TX_TIME << BIT_SHIFT_TXOP_LMT_TX_TIME)
#define BIT_CLEAR_TXOP_LMT_TX_TIME(x)			((x) & (~BITS_TXOP_LMT_TX_TIME))
#define BIT_GET_TXOP_LMT_TX_TIME(x)			(((x) >> BIT_SHIFT_TXOP_LMT_TX_TIME) & BIT_MASK_TXOP_LMT_TX_TIME)
#define BIT_SET_TXOP_LMT_TX_TIME(x, v)			(BIT_CLEAR_TXOP_LMT_TX_TIME(x) | BIT_TXOP_LMT_TX_TIME(v))

#define BIT_TXOP_CNT_TRIGGER_RESET			BIT(7)

#define BIT_SHIFT_TXOP_LMT_PKT_NUM			0
#define BIT_MASK_TXOP_LMT_PKT_NUM			0x3f
#define BIT_TXOP_LMT_PKT_NUM(x)			(((x) & BIT_MASK_TXOP_LMT_PKT_NUM) << BIT_SHIFT_TXOP_LMT_PKT_NUM)
#define BITS_TXOP_LMT_PKT_NUM				(BIT_MASK_TXOP_LMT_PKT_NUM << BIT_SHIFT_TXOP_LMT_PKT_NUM)
#define BIT_CLEAR_TXOP_LMT_PKT_NUM(x)			((x) & (~BITS_TXOP_LMT_PKT_NUM))
#define BIT_GET_TXOP_LMT_PKT_NUM(x)			(((x) >> BIT_SHIFT_TXOP_LMT_PKT_NUM) & BIT_MASK_TXOP_LMT_PKT_NUM)
#define BIT_SET_TXOP_LMT_PKT_NUM(x, v)			(BIT_CLEAR_TXOP_LMT_PKT_NUM(x) | BIT_TXOP_LMT_PKT_NUM(v))

/* 2 REG_P2PON_DIS_TXTIME			(Offset 0x0531) */

#define BIT_SHIFT_P2PON_DIS_TXTIME			0
#define BIT_MASK_P2PON_DIS_TXTIME			0xff
#define BIT_P2PON_DIS_TXTIME(x)			(((x) & BIT_MASK_P2PON_DIS_TXTIME) << BIT_SHIFT_P2PON_DIS_TXTIME)
#define BITS_P2PON_DIS_TXTIME				(BIT_MASK_P2PON_DIS_TXTIME << BIT_SHIFT_P2PON_DIS_TXTIME)
#define BIT_CLEAR_P2PON_DIS_TXTIME(x)			((x) & (~BITS_P2PON_DIS_TXTIME))
#define BIT_GET_P2PON_DIS_TXTIME(x)			(((x) >> BIT_SHIFT_P2PON_DIS_TXTIME) & BIT_MASK_P2PON_DIS_TXTIME)
#define BIT_SET_P2PON_DIS_TXTIME(x, v)			(BIT_CLEAR_P2PON_DIS_TXTIME(x) | BIT_P2PON_DIS_TXTIME(v))

/* 2 REG_CCA_TXEN_CNT			(Offset 0x0534) */

#define BIT_ENABLE_STOP_UPDATE_NAV			BIT(21)
#define BIT_ENABLE_GEN_RANDON_SLOT_TX			BIT(20)
#define BIT_ENABLE_RANDOM_SHIFT_TX			BIT(19)
#define BIT_ENABLE_EDCA_REF_FUNCTION			BIT(18)
#define BIT_CCA_TXEN_CNT_SWITCH			BIT(17)
#define BIT_CCA_TXEN_CNT_EN				BIT(16)

#define BIT_SHIFT_CCA_TXEN_BIG_CNT			8
#define BIT_MASK_CCA_TXEN_BIG_CNT			0xff
#define BIT_CCA_TXEN_BIG_CNT(x)			(((x) & BIT_MASK_CCA_TXEN_BIG_CNT) << BIT_SHIFT_CCA_TXEN_BIG_CNT)
#define BITS_CCA_TXEN_BIG_CNT				(BIT_MASK_CCA_TXEN_BIG_CNT << BIT_SHIFT_CCA_TXEN_BIG_CNT)
#define BIT_CLEAR_CCA_TXEN_BIG_CNT(x)			((x) & (~BITS_CCA_TXEN_BIG_CNT))
#define BIT_GET_CCA_TXEN_BIG_CNT(x)			(((x) >> BIT_SHIFT_CCA_TXEN_BIG_CNT) & BIT_MASK_CCA_TXEN_BIG_CNT)
#define BIT_SET_CCA_TXEN_BIG_CNT(x, v)			(BIT_CLEAR_CCA_TXEN_BIG_CNT(x) | BIT_CCA_TXEN_BIG_CNT(v))

#define BIT_SHIFT_CCA_TXEN_SMALL_CNT			0
#define BIT_MASK_CCA_TXEN_SMALL_CNT			0xff
#define BIT_CCA_TXEN_SMALL_CNT(x)			(((x) & BIT_MASK_CCA_TXEN_SMALL_CNT) << BIT_SHIFT_CCA_TXEN_SMALL_CNT)
#define BITS_CCA_TXEN_SMALL_CNT			(BIT_MASK_CCA_TXEN_SMALL_CNT << BIT_SHIFT_CCA_TXEN_SMALL_CNT)
#define BIT_CLEAR_CCA_TXEN_SMALL_CNT(x)		((x) & (~BITS_CCA_TXEN_SMALL_CNT))
#define BIT_GET_CCA_TXEN_SMALL_CNT(x)			(((x) >> BIT_SHIFT_CCA_TXEN_SMALL_CNT) & BIT_MASK_CCA_TXEN_SMALL_CNT)
#define BIT_SET_CCA_TXEN_SMALL_CNT(x, v)		(BIT_CLEAR_CCA_TXEN_SMALL_CNT(x) | BIT_CCA_TXEN_SMALL_CNT(v))

/* 2 REG_MAX_INTER_COLLISION			(Offset 0x0538) */

#define BIT_SHIFT_MAX_INTER_COLLISION_BK		24
#define BIT_MASK_MAX_INTER_COLLISION_BK		0xff
#define BIT_MAX_INTER_COLLISION_BK(x)			(((x) & BIT_MASK_MAX_INTER_COLLISION_BK) << BIT_SHIFT_MAX_INTER_COLLISION_BK)
#define BITS_MAX_INTER_COLLISION_BK			(BIT_MASK_MAX_INTER_COLLISION_BK << BIT_SHIFT_MAX_INTER_COLLISION_BK)
#define BIT_CLEAR_MAX_INTER_COLLISION_BK(x)		((x) & (~BITS_MAX_INTER_COLLISION_BK))
#define BIT_GET_MAX_INTER_COLLISION_BK(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_BK) & BIT_MASK_MAX_INTER_COLLISION_BK)
#define BIT_SET_MAX_INTER_COLLISION_BK(x, v)		(BIT_CLEAR_MAX_INTER_COLLISION_BK(x) | BIT_MAX_INTER_COLLISION_BK(v))

#define BIT_SHIFT_MAX_INTER_COLLISION_BE		16
#define BIT_MASK_MAX_INTER_COLLISION_BE		0xff
#define BIT_MAX_INTER_COLLISION_BE(x)			(((x) & BIT_MASK_MAX_INTER_COLLISION_BE) << BIT_SHIFT_MAX_INTER_COLLISION_BE)
#define BITS_MAX_INTER_COLLISION_BE			(BIT_MASK_MAX_INTER_COLLISION_BE << BIT_SHIFT_MAX_INTER_COLLISION_BE)
#define BIT_CLEAR_MAX_INTER_COLLISION_BE(x)		((x) & (~BITS_MAX_INTER_COLLISION_BE))
#define BIT_GET_MAX_INTER_COLLISION_BE(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_BE) & BIT_MASK_MAX_INTER_COLLISION_BE)
#define BIT_SET_MAX_INTER_COLLISION_BE(x, v)		(BIT_CLEAR_MAX_INTER_COLLISION_BE(x) | BIT_MAX_INTER_COLLISION_BE(v))

#define BIT_SHIFT_MAX_INTER_COLLISION_VI		8
#define BIT_MASK_MAX_INTER_COLLISION_VI		0xff
#define BIT_MAX_INTER_COLLISION_VI(x)			(((x) & BIT_MASK_MAX_INTER_COLLISION_VI) << BIT_SHIFT_MAX_INTER_COLLISION_VI)
#define BITS_MAX_INTER_COLLISION_VI			(BIT_MASK_MAX_INTER_COLLISION_VI << BIT_SHIFT_MAX_INTER_COLLISION_VI)
#define BIT_CLEAR_MAX_INTER_COLLISION_VI(x)		((x) & (~BITS_MAX_INTER_COLLISION_VI))
#define BIT_GET_MAX_INTER_COLLISION_VI(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_VI) & BIT_MASK_MAX_INTER_COLLISION_VI)
#define BIT_SET_MAX_INTER_COLLISION_VI(x, v)		(BIT_CLEAR_MAX_INTER_COLLISION_VI(x) | BIT_MAX_INTER_COLLISION_VI(v))

#define BIT_SHIFT_MAX_INTER_COLLISION_VO		0
#define BIT_MASK_MAX_INTER_COLLISION_VO		0xff
#define BIT_MAX_INTER_COLLISION_VO(x)			(((x) & BIT_MASK_MAX_INTER_COLLISION_VO) << BIT_SHIFT_MAX_INTER_COLLISION_VO)
#define BITS_MAX_INTER_COLLISION_VO			(BIT_MASK_MAX_INTER_COLLISION_VO << BIT_SHIFT_MAX_INTER_COLLISION_VO)
#define BIT_CLEAR_MAX_INTER_COLLISION_VO(x)		((x) & (~BITS_MAX_INTER_COLLISION_VO))
#define BIT_GET_MAX_INTER_COLLISION_VO(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_VO) & BIT_MASK_MAX_INTER_COLLISION_VO)
#define BIT_SET_MAX_INTER_COLLISION_VO(x, v)		(BIT_CLEAR_MAX_INTER_COLLISION_VO(x) | BIT_MAX_INTER_COLLISION_VO(v))

/* 2 REG_MAX_INTER_COLLISION_CNT		(Offset 0x053C) */

#define BIT_MAX_INTER_COLLISION_EN			BIT(16)

#define BIT_SHIFT_MAX_INTER_COLLISION_CNT_BK		12
#define BIT_MASK_MAX_INTER_COLLISION_CNT_BK		0xf
#define BIT_MAX_INTER_COLLISION_CNT_BK(x)		(((x) & BIT_MASK_MAX_INTER_COLLISION_CNT_BK) << BIT_SHIFT_MAX_INTER_COLLISION_CNT_BK)
#define BITS_MAX_INTER_COLLISION_CNT_BK		(BIT_MASK_MAX_INTER_COLLISION_CNT_BK << BIT_SHIFT_MAX_INTER_COLLISION_CNT_BK)
#define BIT_CLEAR_MAX_INTER_COLLISION_CNT_BK(x)	((x) & (~BITS_MAX_INTER_COLLISION_CNT_BK))
#define BIT_GET_MAX_INTER_COLLISION_CNT_BK(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_CNT_BK) & BIT_MASK_MAX_INTER_COLLISION_CNT_BK)
#define BIT_SET_MAX_INTER_COLLISION_CNT_BK(x, v)	(BIT_CLEAR_MAX_INTER_COLLISION_CNT_BK(x) | BIT_MAX_INTER_COLLISION_CNT_BK(v))

#define BIT_SHIFT_MAX_INTER_COLLISION_CNT_BE		8
#define BIT_MASK_MAX_INTER_COLLISION_CNT_BE		0xf
#define BIT_MAX_INTER_COLLISION_CNT_BE(x)		(((x) & BIT_MASK_MAX_INTER_COLLISION_CNT_BE) << BIT_SHIFT_MAX_INTER_COLLISION_CNT_BE)
#define BITS_MAX_INTER_COLLISION_CNT_BE		(BIT_MASK_MAX_INTER_COLLISION_CNT_BE << BIT_SHIFT_MAX_INTER_COLLISION_CNT_BE)
#define BIT_CLEAR_MAX_INTER_COLLISION_CNT_BE(x)	((x) & (~BITS_MAX_INTER_COLLISION_CNT_BE))
#define BIT_GET_MAX_INTER_COLLISION_CNT_BE(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_CNT_BE) & BIT_MASK_MAX_INTER_COLLISION_CNT_BE)
#define BIT_SET_MAX_INTER_COLLISION_CNT_BE(x, v)	(BIT_CLEAR_MAX_INTER_COLLISION_CNT_BE(x) | BIT_MAX_INTER_COLLISION_CNT_BE(v))

#define BIT_SHIFT_MAX_INTER_COLLISION_CNT_VI		4
#define BIT_MASK_MAX_INTER_COLLISION_CNT_VI		0xf
#define BIT_MAX_INTER_COLLISION_CNT_VI(x)		(((x) & BIT_MASK_MAX_INTER_COLLISION_CNT_VI) << BIT_SHIFT_MAX_INTER_COLLISION_CNT_VI)
#define BITS_MAX_INTER_COLLISION_CNT_VI		(BIT_MASK_MAX_INTER_COLLISION_CNT_VI << BIT_SHIFT_MAX_INTER_COLLISION_CNT_VI)
#define BIT_CLEAR_MAX_INTER_COLLISION_CNT_VI(x)	((x) & (~BITS_MAX_INTER_COLLISION_CNT_VI))
#define BIT_GET_MAX_INTER_COLLISION_CNT_VI(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_CNT_VI) & BIT_MASK_MAX_INTER_COLLISION_CNT_VI)
#define BIT_SET_MAX_INTER_COLLISION_CNT_VI(x, v)	(BIT_CLEAR_MAX_INTER_COLLISION_CNT_VI(x) | BIT_MAX_INTER_COLLISION_CNT_VI(v))

#define BIT_SHIFT_MAX_INTER_COLLISION_CNT_VO		0
#define BIT_MASK_MAX_INTER_COLLISION_CNT_VO		0xf
#define BIT_MAX_INTER_COLLISION_CNT_VO(x)		(((x) & BIT_MASK_MAX_INTER_COLLISION_CNT_VO) << BIT_SHIFT_MAX_INTER_COLLISION_CNT_VO)
#define BITS_MAX_INTER_COLLISION_CNT_VO		(BIT_MASK_MAX_INTER_COLLISION_CNT_VO << BIT_SHIFT_MAX_INTER_COLLISION_CNT_VO)
#define BIT_CLEAR_MAX_INTER_COLLISION_CNT_VO(x)	((x) & (~BITS_MAX_INTER_COLLISION_CNT_VO))
#define BIT_GET_MAX_INTER_COLLISION_CNT_VO(x)		(((x) >> BIT_SHIFT_MAX_INTER_COLLISION_CNT_VO) & BIT_MASK_MAX_INTER_COLLISION_CNT_VO)
#define BIT_SET_MAX_INTER_COLLISION_CNT_VO(x, v)	(BIT_CLEAR_MAX_INTER_COLLISION_CNT_VO(x) | BIT_MAX_INTER_COLLISION_CNT_VO(v))

/* 2 REG_TBTT_PROHIBIT			(Offset 0x0540) */

#define BIT_SHIFT_TBTT_HOLD_TIME_AP			8
#define BIT_MASK_TBTT_HOLD_TIME_AP			0xfff
#define BIT_TBTT_HOLD_TIME_AP(x)			(((x) & BIT_MASK_TBTT_HOLD_TIME_AP) << BIT_SHIFT_TBTT_HOLD_TIME_AP)
#define BITS_TBTT_HOLD_TIME_AP				(BIT_MASK_TBTT_HOLD_TIME_AP << BIT_SHIFT_TBTT_HOLD_TIME_AP)
#define BIT_CLEAR_TBTT_HOLD_TIME_AP(x)			((x) & (~BITS_TBTT_HOLD_TIME_AP))
#define BIT_GET_TBTT_HOLD_TIME_AP(x)			(((x) >> BIT_SHIFT_TBTT_HOLD_TIME_AP) & BIT_MASK_TBTT_HOLD_TIME_AP)
#define BIT_SET_TBTT_HOLD_TIME_AP(x, v)		(BIT_CLEAR_TBTT_HOLD_TIME_AP(x) | BIT_TBTT_HOLD_TIME_AP(v))

#define BIT_SHIFT_TBTT_PROHIBIT_SETUP			0
#define BIT_MASK_TBTT_PROHIBIT_SETUP			0xf
#define BIT_TBTT_PROHIBIT_SETUP(x)			(((x) & BIT_MASK_TBTT_PROHIBIT_SETUP) << BIT_SHIFT_TBTT_PROHIBIT_SETUP)
#define BITS_TBTT_PROHIBIT_SETUP			(BIT_MASK_TBTT_PROHIBIT_SETUP << BIT_SHIFT_TBTT_PROHIBIT_SETUP)
#define BIT_CLEAR_TBTT_PROHIBIT_SETUP(x)		((x) & (~BITS_TBTT_PROHIBIT_SETUP))
#define BIT_GET_TBTT_PROHIBIT_SETUP(x)			(((x) >> BIT_SHIFT_TBTT_PROHIBIT_SETUP) & BIT_MASK_TBTT_PROHIBIT_SETUP)
#define BIT_SET_TBTT_PROHIBIT_SETUP(x, v)		(BIT_CLEAR_TBTT_PROHIBIT_SETUP(x) | BIT_TBTT_PROHIBIT_SETUP(v))

/* 2 REG_P2PPS_STATE				(Offset 0x0543) */

#define BIT_POWER_STATE				BIT(7)
#define BIT_CTWINDOW_ON				BIT(6)
#define BIT_BEACON_AREA_ON				BIT(5)
#define BIT_CTWIN_EARLY_DISTX				BIT(4)
#define BIT_NOA1_OFF_PERIOD				BIT(3)
#define BIT_FORCE_DOZE1				BIT(2)
#define BIT_NOA0_OFF_PERIOD				BIT(1)
#define BIT_FORCE_DOZE0				BIT(0)

/* 2 REG_RD_NAV_NXT				(Offset 0x0544) */

#define BIT_SHIFT_RD_NAV_PROT_NXT			0
#define BIT_MASK_RD_NAV_PROT_NXT			0xffff
#define BIT_RD_NAV_PROT_NXT(x)				(((x) & BIT_MASK_RD_NAV_PROT_NXT) << BIT_SHIFT_RD_NAV_PROT_NXT)
#define BITS_RD_NAV_PROT_NXT				(BIT_MASK_RD_NAV_PROT_NXT << BIT_SHIFT_RD_NAV_PROT_NXT)
#define BIT_CLEAR_RD_NAV_PROT_NXT(x)			((x) & (~BITS_RD_NAV_PROT_NXT))
#define BIT_GET_RD_NAV_PROT_NXT(x)			(((x) >> BIT_SHIFT_RD_NAV_PROT_NXT) & BIT_MASK_RD_NAV_PROT_NXT)
#define BIT_SET_RD_NAV_PROT_NXT(x, v)			(BIT_CLEAR_RD_NAV_PROT_NXT(x) | BIT_RD_NAV_PROT_NXT(v))

/* 2 REG_NAV_PROT_LEN			(Offset 0x0546) */

#define BIT_SHIFT_NAV_PROT_LEN				0
#define BIT_MASK_NAV_PROT_LEN				0xffff
#define BIT_NAV_PROT_LEN(x)				(((x) & BIT_MASK_NAV_PROT_LEN) << BIT_SHIFT_NAV_PROT_LEN)
#define BITS_NAV_PROT_LEN				(BIT_MASK_NAV_PROT_LEN << BIT_SHIFT_NAV_PROT_LEN)
#define BIT_CLEAR_NAV_PROT_LEN(x)			((x) & (~BITS_NAV_PROT_LEN))
#define BIT_GET_NAV_PROT_LEN(x)			(((x) >> BIT_SHIFT_NAV_PROT_LEN) & BIT_MASK_NAV_PROT_LEN)
#define BIT_SET_NAV_PROT_LEN(x, v)			(BIT_CLEAR_NAV_PROT_LEN(x) | BIT_NAV_PROT_LEN(v))

/* 2 REG_FTM_PTT				(Offset 0x0548) */

#define BIT_SHIFT_FTM_PTT_TSF_R2T_SEL			22
#define BIT_MASK_FTM_PTT_TSF_R2T_SEL			0x7
#define BIT_FTM_PTT_TSF_R2T_SEL(x)			(((x) & BIT_MASK_FTM_PTT_TSF_R2T_SEL) << BIT_SHIFT_FTM_PTT_TSF_R2T_SEL)
#define BITS_FTM_PTT_TSF_R2T_SEL			(BIT_MASK_FTM_PTT_TSF_R2T_SEL << BIT_SHIFT_FTM_PTT_TSF_R2T_SEL)
#define BIT_CLEAR_FTM_PTT_TSF_R2T_SEL(x)		((x) & (~BITS_FTM_PTT_TSF_R2T_SEL))
#define BIT_GET_FTM_PTT_TSF_R2T_SEL(x)			(((x) >> BIT_SHIFT_FTM_PTT_TSF_R2T_SEL) & BIT_MASK_FTM_PTT_TSF_R2T_SEL)
#define BIT_SET_FTM_PTT_TSF_R2T_SEL(x, v)		(BIT_CLEAR_FTM_PTT_TSF_R2T_SEL(x) | BIT_FTM_PTT_TSF_R2T_SEL(v))

#define BIT_SHIFT_FTM_PTT_TSF_T2R_SEL			19
#define BIT_MASK_FTM_PTT_TSF_T2R_SEL			0x7
#define BIT_FTM_PTT_TSF_T2R_SEL(x)			(((x) & BIT_MASK_FTM_PTT_TSF_T2R_SEL) << BIT_SHIFT_FTM_PTT_TSF_T2R_SEL)
#define BITS_FTM_PTT_TSF_T2R_SEL			(BIT_MASK_FTM_PTT_TSF_T2R_SEL << BIT_SHIFT_FTM_PTT_TSF_T2R_SEL)
#define BIT_CLEAR_FTM_PTT_TSF_T2R_SEL(x)		((x) & (~BITS_FTM_PTT_TSF_T2R_SEL))
#define BIT_GET_FTM_PTT_TSF_T2R_SEL(x)			(((x) >> BIT_SHIFT_FTM_PTT_TSF_T2R_SEL) & BIT_MASK_FTM_PTT_TSF_T2R_SEL)
#define BIT_SET_FTM_PTT_TSF_T2R_SEL(x, v)		(BIT_CLEAR_FTM_PTT_TSF_T2R_SEL(x) | BIT_FTM_PTT_TSF_T2R_SEL(v))

#define BIT_SHIFT_FTM_PTT_TSF_SEL			16
#define BIT_MASK_FTM_PTT_TSF_SEL			0x7
#define BIT_FTM_PTT_TSF_SEL(x)				(((x) & BIT_MASK_FTM_PTT_TSF_SEL) << BIT_SHIFT_FTM_PTT_TSF_SEL)
#define BITS_FTM_PTT_TSF_SEL				(BIT_MASK_FTM_PTT_TSF_SEL << BIT_SHIFT_FTM_PTT_TSF_SEL)
#define BIT_CLEAR_FTM_PTT_TSF_SEL(x)			((x) & (~BITS_FTM_PTT_TSF_SEL))
#define BIT_GET_FTM_PTT_TSF_SEL(x)			(((x) >> BIT_SHIFT_FTM_PTT_TSF_SEL) & BIT_MASK_FTM_PTT_TSF_SEL)
#define BIT_SET_FTM_PTT_TSF_SEL(x, v)			(BIT_CLEAR_FTM_PTT_TSF_SEL(x) | BIT_FTM_PTT_TSF_SEL(v))

#define BIT_SHIFT_FTM_PTT_VALUE			0
#define BIT_MASK_FTM_PTT_VALUE				0xffff
#define BIT_FTM_PTT_VALUE(x)				(((x) & BIT_MASK_FTM_PTT_VALUE) << BIT_SHIFT_FTM_PTT_VALUE)
#define BITS_FTM_PTT_VALUE				(BIT_MASK_FTM_PTT_VALUE << BIT_SHIFT_FTM_PTT_VALUE)
#define BIT_CLEAR_FTM_PTT_VALUE(x)			((x) & (~BITS_FTM_PTT_VALUE))
#define BIT_GET_FTM_PTT_VALUE(x)			(((x) >> BIT_SHIFT_FTM_PTT_VALUE) & BIT_MASK_FTM_PTT_VALUE)
#define BIT_SET_FTM_PTT_VALUE(x, v)			(BIT_CLEAR_FTM_PTT_VALUE(x) | BIT_FTM_PTT_VALUE(v))

/* 2 REG_FTM_TSF				(Offset 0x054C) */

#define BIT_SHIFT_FTM_T2_TSF				16
#define BIT_MASK_FTM_T2_TSF				0xffff
#define BIT_FTM_T2_TSF(x)				(((x) & BIT_MASK_FTM_T2_TSF) << BIT_SHIFT_FTM_T2_TSF)
#define BITS_FTM_T2_TSF				(BIT_MASK_FTM_T2_TSF << BIT_SHIFT_FTM_T2_TSF)
#define BIT_CLEAR_FTM_T2_TSF(x)			((x) & (~BITS_FTM_T2_TSF))
#define BIT_GET_FTM_T2_TSF(x)				(((x) >> BIT_SHIFT_FTM_T2_TSF) & BIT_MASK_FTM_T2_TSF)
#define BIT_SET_FTM_T2_TSF(x, v)			(BIT_CLEAR_FTM_T2_TSF(x) | BIT_FTM_T2_TSF(v))

#define BIT_SHIFT_FTM_T1_TSF				0
#define BIT_MASK_FTM_T1_TSF				0xffff
#define BIT_FTM_T1_TSF(x)				(((x) & BIT_MASK_FTM_T1_TSF) << BIT_SHIFT_FTM_T1_TSF)
#define BITS_FTM_T1_TSF				(BIT_MASK_FTM_T1_TSF << BIT_SHIFT_FTM_T1_TSF)
#define BIT_CLEAR_FTM_T1_TSF(x)			((x) & (~BITS_FTM_T1_TSF))
#define BIT_GET_FTM_T1_TSF(x)				(((x) >> BIT_SHIFT_FTM_T1_TSF) & BIT_MASK_FTM_T1_TSF)
#define BIT_SET_FTM_T1_TSF(x, v)			(BIT_CLEAR_FTM_T1_TSF(x) | BIT_FTM_T1_TSF(v))

/* 2 REG_BCN_CTRL				(Offset 0x0550) */

#define BIT_DIS_RX_BSSID_FIT				BIT(6)
#define BIT_P0_EN_TXBCN_RPT				BIT(5)
#define BIT_DIS_TSF_UDT				BIT(4)
#define BIT_EN_BCN_FUNCTION				BIT(3)
#define BIT_P0_EN_RXBCN_RPT				BIT(2)
#define BIT_EN_P2P_CTWINDOW				BIT(1)
#define BIT_EN_P2P_BCNQ_AREA				BIT(0)

/* 2 REG_BCN_CTRL_CLINT0			(Offset 0x0551) */

#define BIT_CLI0_DIS_RX_BSSID_FIT			BIT(6)
#define BIT_CLI0_DIS_TSF_UDT				BIT(4)
#define BIT_CLI0_EN_BCN_FUNCTION			BIT(3)
#define BIT_CLI0_EN_RXBCN_RPT				BIT(2)
#define BIT_CLI0_ENP2P_CTWINDOW			BIT(1)
#define BIT_CLI0_ENP2P_BCNQ_AREA			BIT(0)

/* 2 REG_MBID_NUM				(Offset 0x0552) */

#define BIT_EN_PRE_DL_BEACON				BIT(3)

#define BIT_SHIFT_MBID_BCN_NUM				0
#define BIT_MASK_MBID_BCN_NUM				0x7
#define BIT_MBID_BCN_NUM(x)				(((x) & BIT_MASK_MBID_BCN_NUM) << BIT_SHIFT_MBID_BCN_NUM)
#define BITS_MBID_BCN_NUM				(BIT_MASK_MBID_BCN_NUM << BIT_SHIFT_MBID_BCN_NUM)
#define BIT_CLEAR_MBID_BCN_NUM(x)			((x) & (~BITS_MBID_BCN_NUM))
#define BIT_GET_MBID_BCN_NUM(x)			(((x) >> BIT_SHIFT_MBID_BCN_NUM) & BIT_MASK_MBID_BCN_NUM)
#define BIT_SET_MBID_BCN_NUM(x, v)			(BIT_CLEAR_MBID_BCN_NUM(x) | BIT_MBID_BCN_NUM(v))

/* 2 REG_DUAL_TSF_RST			(Offset 0x0553) */

#define BIT_FREECNT_RST				BIT(5)
#define BIT_TSFTR_CLI3_RST				BIT(4)
#define BIT_TSFTR_CLI2_RST				BIT(3)
#define BIT_TSFTR_CLI1_RST				BIT(2)
#define BIT_TSFTR_CLI0_RST				BIT(1)
#define BIT_TSFTR_RST					BIT(0)

/* 2 REG_MBSSID_BCN_SPACE			(Offset 0x0554) */

#define BIT_SHIFT_BCN_TIMER_SEL_FWRD			28
#define BIT_MASK_BCN_TIMER_SEL_FWRD			0x7
#define BIT_BCN_TIMER_SEL_FWRD(x)			(((x) & BIT_MASK_BCN_TIMER_SEL_FWRD) << BIT_SHIFT_BCN_TIMER_SEL_FWRD)
#define BITS_BCN_TIMER_SEL_FWRD			(BIT_MASK_BCN_TIMER_SEL_FWRD << BIT_SHIFT_BCN_TIMER_SEL_FWRD)
#define BIT_CLEAR_BCN_TIMER_SEL_FWRD(x)		((x) & (~BITS_BCN_TIMER_SEL_FWRD))
#define BIT_GET_BCN_TIMER_SEL_FWRD(x)			(((x) >> BIT_SHIFT_BCN_TIMER_SEL_FWRD) & BIT_MASK_BCN_TIMER_SEL_FWRD)
#define BIT_SET_BCN_TIMER_SEL_FWRD(x, v)		(BIT_CLEAR_BCN_TIMER_SEL_FWRD(x) | BIT_BCN_TIMER_SEL_FWRD(v))

#define BIT_SHIFT_BCN_SPACE_CLINT0			16
#define BIT_MASK_BCN_SPACE_CLINT0			0xfff
#define BIT_BCN_SPACE_CLINT0(x)			(((x) & BIT_MASK_BCN_SPACE_CLINT0) << BIT_SHIFT_BCN_SPACE_CLINT0)
#define BITS_BCN_SPACE_CLINT0				(BIT_MASK_BCN_SPACE_CLINT0 << BIT_SHIFT_BCN_SPACE_CLINT0)
#define BIT_CLEAR_BCN_SPACE_CLINT0(x)			((x) & (~BITS_BCN_SPACE_CLINT0))
#define BIT_GET_BCN_SPACE_CLINT0(x)			(((x) >> BIT_SHIFT_BCN_SPACE_CLINT0) & BIT_MASK_BCN_SPACE_CLINT0)
#define BIT_SET_BCN_SPACE_CLINT0(x, v)			(BIT_CLEAR_BCN_SPACE_CLINT0(x) | BIT_BCN_SPACE_CLINT0(v))

#define BIT_SHIFT_BCN_SPACE0				0
#define BIT_MASK_BCN_SPACE0				0xffff
#define BIT_BCN_SPACE0(x)				(((x) & BIT_MASK_BCN_SPACE0) << BIT_SHIFT_BCN_SPACE0)
#define BITS_BCN_SPACE0				(BIT_MASK_BCN_SPACE0 << BIT_SHIFT_BCN_SPACE0)
#define BIT_CLEAR_BCN_SPACE0(x)			((x) & (~BITS_BCN_SPACE0))
#define BIT_GET_BCN_SPACE0(x)				(((x) >> BIT_SHIFT_BCN_SPACE0) & BIT_MASK_BCN_SPACE0)
#define BIT_SET_BCN_SPACE0(x, v)			(BIT_CLEAR_BCN_SPACE0(x) | BIT_BCN_SPACE0(v))

/* 2 REG_DRVERLYINT				(Offset 0x0558) */

#define BIT_SHIFT_DRVERLYITV				0
#define BIT_MASK_DRVERLYITV				0xff
#define BIT_DRVERLYITV(x)				(((x) & BIT_MASK_DRVERLYITV) << BIT_SHIFT_DRVERLYITV)
#define BITS_DRVERLYITV				(BIT_MASK_DRVERLYITV << BIT_SHIFT_DRVERLYITV)
#define BIT_CLEAR_DRVERLYITV(x)			((x) & (~BITS_DRVERLYITV))
#define BIT_GET_DRVERLYITV(x)				(((x) >> BIT_SHIFT_DRVERLYITV) & BIT_MASK_DRVERLYITV)
#define BIT_SET_DRVERLYITV(x, v)			(BIT_CLEAR_DRVERLYITV(x) | BIT_DRVERLYITV(v))

/* 2 REG_BCNDMATIM				(Offset 0x0559) */

#define BIT_SHIFT_BCNDMATIM				0
#define BIT_MASK_BCNDMATIM				0xff
#define BIT_BCNDMATIM(x)				(((x) & BIT_MASK_BCNDMATIM) << BIT_SHIFT_BCNDMATIM)
#define BITS_BCNDMATIM					(BIT_MASK_BCNDMATIM << BIT_SHIFT_BCNDMATIM)
#define BIT_CLEAR_BCNDMATIM(x)				((x) & (~BITS_BCNDMATIM))
#define BIT_GET_BCNDMATIM(x)				(((x) >> BIT_SHIFT_BCNDMATIM) & BIT_MASK_BCNDMATIM)
#define BIT_SET_BCNDMATIM(x, v)			(BIT_CLEAR_BCNDMATIM(x) | BIT_BCNDMATIM(v))

/* 2 REG_ATIMWND				(Offset 0x055A) */

#define BIT_SHIFT_ATIMWND0				0
#define BIT_MASK_ATIMWND0				0xffff
#define BIT_ATIMWND0(x)				(((x) & BIT_MASK_ATIMWND0) << BIT_SHIFT_ATIMWND0)
#define BITS_ATIMWND0					(BIT_MASK_ATIMWND0 << BIT_SHIFT_ATIMWND0)
#define BIT_CLEAR_ATIMWND0(x)				((x) & (~BITS_ATIMWND0))
#define BIT_GET_ATIMWND0(x)				(((x) >> BIT_SHIFT_ATIMWND0) & BIT_MASK_ATIMWND0)
#define BIT_SET_ATIMWND0(x, v)				(BIT_CLEAR_ATIMWND0(x) | BIT_ATIMWND0(v))

/* 2 REG_USTIME_TSF				(Offset 0x055C) */

#define BIT_SHIFT_USTIME_TSF_V1			0
#define BIT_MASK_USTIME_TSF_V1				0xff
#define BIT_USTIME_TSF_V1(x)				(((x) & BIT_MASK_USTIME_TSF_V1) << BIT_SHIFT_USTIME_TSF_V1)
#define BITS_USTIME_TSF_V1				(BIT_MASK_USTIME_TSF_V1 << BIT_SHIFT_USTIME_TSF_V1)
#define BIT_CLEAR_USTIME_TSF_V1(x)			((x) & (~BITS_USTIME_TSF_V1))
#define BIT_GET_USTIME_TSF_V1(x)			(((x) >> BIT_SHIFT_USTIME_TSF_V1) & BIT_MASK_USTIME_TSF_V1)
#define BIT_SET_USTIME_TSF_V1(x, v)			(BIT_CLEAR_USTIME_TSF_V1(x) | BIT_USTIME_TSF_V1(v))

/* 2 REG_BCN_MAX_ERR				(Offset 0x055D) */

#define BIT_SHIFT_BCN_MAX_ERR				0
#define BIT_MASK_BCN_MAX_ERR				0xff
#define BIT_BCN_MAX_ERR(x)				(((x) & BIT_MASK_BCN_MAX_ERR) << BIT_SHIFT_BCN_MAX_ERR)
#define BITS_BCN_MAX_ERR				(BIT_MASK_BCN_MAX_ERR << BIT_SHIFT_BCN_MAX_ERR)
#define BIT_CLEAR_BCN_MAX_ERR(x)			((x) & (~BITS_BCN_MAX_ERR))
#define BIT_GET_BCN_MAX_ERR(x)				(((x) >> BIT_SHIFT_BCN_MAX_ERR) & BIT_MASK_BCN_MAX_ERR)
#define BIT_SET_BCN_MAX_ERR(x, v)			(BIT_CLEAR_BCN_MAX_ERR(x) | BIT_BCN_MAX_ERR(v))

/* 2 REG_RXTSF_OFFSET_CCK			(Offset 0x055E) */

#define BIT_SHIFT_CCK_RXTSF_OFFSET			0
#define BIT_MASK_CCK_RXTSF_OFFSET			0xff
#define BIT_CCK_RXTSF_OFFSET(x)			(((x) & BIT_MASK_CCK_RXTSF_OFFSET) << BIT_SHIFT_CCK_RXTSF_OFFSET)
#define BITS_CCK_RXTSF_OFFSET				(BIT_MASK_CCK_RXTSF_OFFSET << BIT_SHIFT_CCK_RXTSF_OFFSET)
#define BIT_CLEAR_CCK_RXTSF_OFFSET(x)			((x) & (~BITS_CCK_RXTSF_OFFSET))
#define BIT_GET_CCK_RXTSF_OFFSET(x)			(((x) >> BIT_SHIFT_CCK_RXTSF_OFFSET) & BIT_MASK_CCK_RXTSF_OFFSET)
#define BIT_SET_CCK_RXTSF_OFFSET(x, v)			(BIT_CLEAR_CCK_RXTSF_OFFSET(x) | BIT_CCK_RXTSF_OFFSET(v))

/* 2 REG_RXTSF_OFFSET_OFDM			(Offset 0x055F) */

#define BIT_SHIFT_OFDM_RXTSF_OFFSET			0
#define BIT_MASK_OFDM_RXTSF_OFFSET			0xff
#define BIT_OFDM_RXTSF_OFFSET(x)			(((x) & BIT_MASK_OFDM_RXTSF_OFFSET) << BIT_SHIFT_OFDM_RXTSF_OFFSET)
#define BITS_OFDM_RXTSF_OFFSET				(BIT_MASK_OFDM_RXTSF_OFFSET << BIT_SHIFT_OFDM_RXTSF_OFFSET)
#define BIT_CLEAR_OFDM_RXTSF_OFFSET(x)			((x) & (~BITS_OFDM_RXTSF_OFFSET))
#define BIT_GET_OFDM_RXTSF_OFFSET(x)			(((x) >> BIT_SHIFT_OFDM_RXTSF_OFFSET) & BIT_MASK_OFDM_RXTSF_OFFSET)
#define BIT_SET_OFDM_RXTSF_OFFSET(x, v)		(BIT_CLEAR_OFDM_RXTSF_OFFSET(x) | BIT_OFDM_RXTSF_OFFSET(v))

/* 2 REG_TSFTR				(Offset 0x0560) */

#define BIT_SHIFT_TSF_TIMER_V1				0
#define BIT_MASK_TSF_TIMER_V1				0xffffffffL
#define BIT_TSF_TIMER_V1(x)				(((x) & BIT_MASK_TSF_TIMER_V1) << BIT_SHIFT_TSF_TIMER_V1)
#define BITS_TSF_TIMER_V1				(BIT_MASK_TSF_TIMER_V1 << BIT_SHIFT_TSF_TIMER_V1)
#define BIT_CLEAR_TSF_TIMER_V1(x)			((x) & (~BITS_TSF_TIMER_V1))
#define BIT_GET_TSF_TIMER_V1(x)			(((x) >> BIT_SHIFT_TSF_TIMER_V1) & BIT_MASK_TSF_TIMER_V1)
#define BIT_SET_TSF_TIMER_V1(x, v)			(BIT_CLEAR_TSF_TIMER_V1(x) | BIT_TSF_TIMER_V1(v))

/* 2 REG_TSFTR_1				(Offset 0x0564) */

#define BIT_SHIFT_TSF_TIMER_V2				0
#define BIT_MASK_TSF_TIMER_V2				0xffffffffL
#define BIT_TSF_TIMER_V2(x)				(((x) & BIT_MASK_TSF_TIMER_V2) << BIT_SHIFT_TSF_TIMER_V2)
#define BITS_TSF_TIMER_V2				(BIT_MASK_TSF_TIMER_V2 << BIT_SHIFT_TSF_TIMER_V2)
#define BIT_CLEAR_TSF_TIMER_V2(x)			((x) & (~BITS_TSF_TIMER_V2))
#define BIT_GET_TSF_TIMER_V2(x)			(((x) >> BIT_SHIFT_TSF_TIMER_V2) & BIT_MASK_TSF_TIMER_V2)
#define BIT_SET_TSF_TIMER_V2(x, v)			(BIT_CLEAR_TSF_TIMER_V2(x) | BIT_TSF_TIMER_V2(v))

/* 2 REG_FREERUN_CNT				(Offset 0x0568) */

#define BIT_SHIFT_FREERUN_CNT_V1			0
#define BIT_MASK_FREERUN_CNT_V1			0xffffffffL
#define BIT_FREERUN_CNT_V1(x)				(((x) & BIT_MASK_FREERUN_CNT_V1) << BIT_SHIFT_FREERUN_CNT_V1)
#define BITS_FREERUN_CNT_V1				(BIT_MASK_FREERUN_CNT_V1 << BIT_SHIFT_FREERUN_CNT_V1)
#define BIT_CLEAR_FREERUN_CNT_V1(x)			((x) & (~BITS_FREERUN_CNT_V1))
#define BIT_GET_FREERUN_CNT_V1(x)			(((x) >> BIT_SHIFT_FREERUN_CNT_V1) & BIT_MASK_FREERUN_CNT_V1)
#define BIT_SET_FREERUN_CNT_V1(x, v)			(BIT_CLEAR_FREERUN_CNT_V1(x) | BIT_FREERUN_CNT_V1(v))

/* 2 REG_FREERUN_CNT_1			(Offset 0x056C) */

#define BIT_SHIFT_FREERUN_CNT_V2			0
#define BIT_MASK_FREERUN_CNT_V2			0xffffffffL
#define BIT_FREERUN_CNT_V2(x)				(((x) & BIT_MASK_FREERUN_CNT_V2) << BIT_SHIFT_FREERUN_CNT_V2)
#define BITS_FREERUN_CNT_V2				(BIT_MASK_FREERUN_CNT_V2 << BIT_SHIFT_FREERUN_CNT_V2)
#define BIT_CLEAR_FREERUN_CNT_V2(x)			((x) & (~BITS_FREERUN_CNT_V2))
#define BIT_GET_FREERUN_CNT_V2(x)			(((x) >> BIT_SHIFT_FREERUN_CNT_V2) & BIT_MASK_FREERUN_CNT_V2)
#define BIT_SET_FREERUN_CNT_V2(x, v)			(BIT_CLEAR_FREERUN_CNT_V2(x) | BIT_FREERUN_CNT_V2(v))

/* 2 REG_ATIMWND1_V1				(Offset 0x0570) */

#define BIT_SHIFT_ATIMWND1_V1				0
#define BIT_MASK_ATIMWND1_V1				0xff
#define BIT_ATIMWND1_V1(x)				(((x) & BIT_MASK_ATIMWND1_V1) << BIT_SHIFT_ATIMWND1_V1)
#define BITS_ATIMWND1_V1				(BIT_MASK_ATIMWND1_V1 << BIT_SHIFT_ATIMWND1_V1)
#define BIT_CLEAR_ATIMWND1_V1(x)			((x) & (~BITS_ATIMWND1_V1))
#define BIT_GET_ATIMWND1_V1(x)				(((x) >> BIT_SHIFT_ATIMWND1_V1) & BIT_MASK_ATIMWND1_V1)
#define BIT_SET_ATIMWND1_V1(x, v)			(BIT_CLEAR_ATIMWND1_V1(x) | BIT_ATIMWND1_V1(v))

/* 2 REG_TBTT_PROHIBIT_INFRA			(Offset 0x0571) */

#define BIT_SHIFT_TBTT_PROHIBIT_INFRA			0
#define BIT_MASK_TBTT_PROHIBIT_INFRA			0xff
#define BIT_TBTT_PROHIBIT_INFRA(x)			(((x) & BIT_MASK_TBTT_PROHIBIT_INFRA) << BIT_SHIFT_TBTT_PROHIBIT_INFRA)
#define BITS_TBTT_PROHIBIT_INFRA			(BIT_MASK_TBTT_PROHIBIT_INFRA << BIT_SHIFT_TBTT_PROHIBIT_INFRA)
#define BIT_CLEAR_TBTT_PROHIBIT_INFRA(x)		((x) & (~BITS_TBTT_PROHIBIT_INFRA))
#define BIT_GET_TBTT_PROHIBIT_INFRA(x)			(((x) >> BIT_SHIFT_TBTT_PROHIBIT_INFRA) & BIT_MASK_TBTT_PROHIBIT_INFRA)
#define BIT_SET_TBTT_PROHIBIT_INFRA(x, v)		(BIT_CLEAR_TBTT_PROHIBIT_INFRA(x) | BIT_TBTT_PROHIBIT_INFRA(v))

/* 2 REG_CTWND				(Offset 0x0572) */

#define BIT_SHIFT_CTWND				0
#define BIT_MASK_CTWND					0xff
#define BIT_CTWND(x)					(((x) & BIT_MASK_CTWND) << BIT_SHIFT_CTWND)
#define BITS_CTWND					(BIT_MASK_CTWND << BIT_SHIFT_CTWND)
#define BIT_CLEAR_CTWND(x)				((x) & (~BITS_CTWND))
#define BIT_GET_CTWND(x)				(((x) >> BIT_SHIFT_CTWND) & BIT_MASK_CTWND)
#define BIT_SET_CTWND(x, v)				(BIT_CLEAR_CTWND(x) | BIT_CTWND(v))

/* 2 REG_BCNIVLCUNT				(Offset 0x0573) */

#define BIT_SHIFT_BCNIVLCUNT				0
#define BIT_MASK_BCNIVLCUNT				0x7f
#define BIT_BCNIVLCUNT(x)				(((x) & BIT_MASK_BCNIVLCUNT) << BIT_SHIFT_BCNIVLCUNT)
#define BITS_BCNIVLCUNT				(BIT_MASK_BCNIVLCUNT << BIT_SHIFT_BCNIVLCUNT)
#define BIT_CLEAR_BCNIVLCUNT(x)			((x) & (~BITS_BCNIVLCUNT))
#define BIT_GET_BCNIVLCUNT(x)				(((x) >> BIT_SHIFT_BCNIVLCUNT) & BIT_MASK_BCNIVLCUNT)
#define BIT_SET_BCNIVLCUNT(x, v)			(BIT_CLEAR_BCNIVLCUNT(x) | BIT_BCNIVLCUNT(v))

/* 2 REG_BCNDROPCTRL				(Offset 0x0574) */

#define BIT_BEACON_DROP_EN				BIT(7)

#define BIT_SHIFT_BEACON_DROP_IVL			0
#define BIT_MASK_BEACON_DROP_IVL			0x7f
#define BIT_BEACON_DROP_IVL(x)				(((x) & BIT_MASK_BEACON_DROP_IVL) << BIT_SHIFT_BEACON_DROP_IVL)
#define BITS_BEACON_DROP_IVL				(BIT_MASK_BEACON_DROP_IVL << BIT_SHIFT_BEACON_DROP_IVL)
#define BIT_CLEAR_BEACON_DROP_IVL(x)			((x) & (~BITS_BEACON_DROP_IVL))
#define BIT_GET_BEACON_DROP_IVL(x)			(((x) >> BIT_SHIFT_BEACON_DROP_IVL) & BIT_MASK_BEACON_DROP_IVL)
#define BIT_SET_BEACON_DROP_IVL(x, v)			(BIT_CLEAR_BEACON_DROP_IVL(x) | BIT_BEACON_DROP_IVL(v))

/* 2 REG_HGQ_TIMEOUT_PERIOD			(Offset 0x0575) */

#define BIT_SHIFT_HGQ_TIMEOUT_PERIOD			0
#define BIT_MASK_HGQ_TIMEOUT_PERIOD			0xff
#define BIT_HGQ_TIMEOUT_PERIOD(x)			(((x) & BIT_MASK_HGQ_TIMEOUT_PERIOD) << BIT_SHIFT_HGQ_TIMEOUT_PERIOD)
#define BITS_HGQ_TIMEOUT_PERIOD			(BIT_MASK_HGQ_TIMEOUT_PERIOD << BIT_SHIFT_HGQ_TIMEOUT_PERIOD)
#define BIT_CLEAR_HGQ_TIMEOUT_PERIOD(x)		((x) & (~BITS_HGQ_TIMEOUT_PERIOD))
#define BIT_GET_HGQ_TIMEOUT_PERIOD(x)			(((x) >> BIT_SHIFT_HGQ_TIMEOUT_PERIOD) & BIT_MASK_HGQ_TIMEOUT_PERIOD)
#define BIT_SET_HGQ_TIMEOUT_PERIOD(x, v)		(BIT_CLEAR_HGQ_TIMEOUT_PERIOD(x) | BIT_HGQ_TIMEOUT_PERIOD(v))

/* 2 REG_TXCMD_TIMEOUT_PERIOD		(Offset 0x0576) */

#define BIT_SHIFT_TXCMD_TIMEOUT_PERIOD			0
#define BIT_MASK_TXCMD_TIMEOUT_PERIOD			0xff
#define BIT_TXCMD_TIMEOUT_PERIOD(x)			(((x) & BIT_MASK_TXCMD_TIMEOUT_PERIOD) << BIT_SHIFT_TXCMD_TIMEOUT_PERIOD)
#define BITS_TXCMD_TIMEOUT_PERIOD			(BIT_MASK_TXCMD_TIMEOUT_PERIOD << BIT_SHIFT_TXCMD_TIMEOUT_PERIOD)
#define BIT_CLEAR_TXCMD_TIMEOUT_PERIOD(x)		((x) & (~BITS_TXCMD_TIMEOUT_PERIOD))
#define BIT_GET_TXCMD_TIMEOUT_PERIOD(x)		(((x) >> BIT_SHIFT_TXCMD_TIMEOUT_PERIOD) & BIT_MASK_TXCMD_TIMEOUT_PERIOD)
#define BIT_SET_TXCMD_TIMEOUT_PERIOD(x, v)		(BIT_CLEAR_TXCMD_TIMEOUT_PERIOD(x) | BIT_TXCMD_TIMEOUT_PERIOD(v))

/* 2 REG_MISC_CTRL				(Offset 0x0577) */

#define BIT_DIS_MARK_TSF_US_V2				BIT(7)
#define BIT_AUTO_SYNC_BY_TBTT				BIT(6)
#define BIT_DIS_TRX_CAL_BCN				BIT(5)
#define BIT_DIS_TX_CAL_TBTT				BIT(4)
#define BIT_EN_FREECNT					BIT(3)
#define BIT_BCN_AGGRESSION				BIT(2)

#define BIT_SHIFT_DIS_SECONDARY_CCA			0
#define BIT_MASK_DIS_SECONDARY_CCA			0x3
#define BIT_DIS_SECONDARY_CCA(x)			(((x) & BIT_MASK_DIS_SECONDARY_CCA) << BIT_SHIFT_DIS_SECONDARY_CCA)
#define BITS_DIS_SECONDARY_CCA				(BIT_MASK_DIS_SECONDARY_CCA << BIT_SHIFT_DIS_SECONDARY_CCA)
#define BIT_CLEAR_DIS_SECONDARY_CCA(x)			((x) & (~BITS_DIS_SECONDARY_CCA))
#define BIT_GET_DIS_SECONDARY_CCA(x)			(((x) >> BIT_SHIFT_DIS_SECONDARY_CCA) & BIT_MASK_DIS_SECONDARY_CCA)
#define BIT_SET_DIS_SECONDARY_CCA(x, v)		(BIT_CLEAR_DIS_SECONDARY_CCA(x) | BIT_DIS_SECONDARY_CCA(v))

/* 2 REG_BCN_CTRL_CLINT1			(Offset 0x0578) */

#define BIT_CLI1_DIS_RX_BSSID_FIT			BIT(6)
#define BIT_CLI1_DIS_TSF_UDT				BIT(4)
#define BIT_CLI1_EN_BCN_FUNCTION			BIT(3)
#define BIT_CLI1_EN_RXBCN_RPT				BIT(2)
#define BIT_CLI1_ENP2P_CTWINDOW			BIT(1)
#define BIT_CLI1_ENP2P_BCNQ_AREA			BIT(0)

/* 2 REG_BCN_CTRL_CLINT2			(Offset 0x0579) */

#define BIT_CLI2_DIS_RX_BSSID_FIT			BIT(6)
#define BIT_CLI2_DIS_TSF_UDT				BIT(4)
#define BIT_CLI2_EN_BCN_FUNCTION			BIT(3)
#define BIT_CLI2_EN_RXBCN_RPT				BIT(2)
#define BIT_CLI2_ENP2P_CTWINDOW			BIT(1)
#define BIT_CLI2_ENP2P_BCNQ_AREA			BIT(0)

/* 2 REG_BCN_CTRL_CLINT3			(Offset 0x057A) */

#define BIT_CLI3_DIS_RX_BSSID_FIT			BIT(6)
#define BIT_CLI3_DIS_TSF_UDT				BIT(4)
#define BIT_CLI3_EN_BCN_FUNCTION			BIT(3)
#define BIT_CLI3_EN_RXBCN_RPT				BIT(2)
#define BIT_CLI3_ENP2P_CTWINDOW			BIT(1)
#define BIT_CLI3_ENP2P_BCNQ_AREA			BIT(0)

/* 2 REG_EXTEND_CTRL				(Offset 0x057B) */

#define BIT_EN_TSFBIT32_RST_P2P2			BIT(5)
#define BIT_EN_TSFBIT32_RST_P2P1			BIT(4)

#define BIT_SHIFT_PORT_SEL				0
#define BIT_MASK_PORT_SEL				0x7
#define BIT_PORT_SEL(x)				(((x) & BIT_MASK_PORT_SEL) << BIT_SHIFT_PORT_SEL)
#define BITS_PORT_SEL					(BIT_MASK_PORT_SEL << BIT_SHIFT_PORT_SEL)
#define BIT_CLEAR_PORT_SEL(x)				((x) & (~BITS_PORT_SEL))
#define BIT_GET_PORT_SEL(x)				(((x) >> BIT_SHIFT_PORT_SEL) & BIT_MASK_PORT_SEL)
#define BIT_SET_PORT_SEL(x, v)				(BIT_CLEAR_PORT_SEL(x) | BIT_PORT_SEL(v))

/* 2 REG_P2PPS1_SPEC_STATE			(Offset 0x057C) */

#define BIT_P2P1_SPEC_POWER_STATE			BIT(7)
#define BIT_P2P1_SPEC_CTWINDOW_ON			BIT(6)
#define BIT_P2P1_SPEC_BCN_AREA_ON			BIT(5)
#define BIT_P2P1_SPEC_CTWIN_EARLY_DISTX		BIT(4)
#define BIT_P2P1_SPEC_NOA1_OFF_PERIOD			BIT(3)
#define BIT_P2P1_SPEC_FORCE_DOZE1			BIT(2)
#define BIT_P2P1_SPEC_NOA0_OFF_PERIOD			BIT(1)
#define BIT_P2P1_SPEC_FORCE_DOZE0			BIT(0)

/* 2 REG_P2PPS1_STATE			(Offset 0x057D) */

#define BIT_P2P1_POWER_STATE				BIT(7)
#define BIT_P2P1_CTWINDOW_ON				BIT(6)
#define BIT_P2P1_BEACON_AREA_ON			BIT(5)
#define BIT_P2P1_CTWIN_EARLY_DISTX			BIT(4)
#define BIT_P2P1_NOA1_OFF_PERIOD			BIT(3)
#define BIT_P2P1_FORCE_DOZE1				BIT(2)
#define BIT_P2P1_NOA0_OFF_PERIOD			BIT(1)
#define BIT_P2P1_FORCE_DOZE0				BIT(0)

/* 2 REG_P2PPS2_SPEC_STATE			(Offset 0x057E) */

#define BIT_P2P2_SPEC_POWER_STATE			BIT(7)
#define BIT_P2P2_SPEC_CTWINDOW_ON			BIT(6)
#define BIT_P2P2_SPEC_BCN_AREA_ON			BIT(5)
#define BIT_P2P2_SPEC_CTWIN_EARLY_DISTX		BIT(4)
#define BIT_P2P2_SPEC_NOA1_OFF_PERIOD			BIT(3)
#define BIT_P2P2_SPEC_FORCE_DOZE1			BIT(2)
#define BIT_P2P2_SPEC_NOA0_OFF_PERIOD			BIT(1)
#define BIT_P2P2_SPEC_FORCE_DOZE0			BIT(0)

/* 2 REG_P2PPS2_STATE			(Offset 0x057F) */

#define BIT_P2P2_POWER_STATE				BIT(7)
#define BIT_P2P2_CTWINDOW_ON				BIT(6)
#define BIT_P2P2_BEACON_AREA_ON			BIT(5)
#define BIT_P2P2_CTWIN_EARLY_DISTX			BIT(4)
#define BIT_P2P2_NOA1_OFF_PERIOD			BIT(3)
#define BIT_P2P2_FORCE_DOZE1				BIT(2)
#define BIT_P2P2_NOA0_OFF_PERIOD			BIT(1)
#define BIT_P2P2_FORCE_DOZE0				BIT(0)

/* 2 REG_PS_TIMER0				(Offset 0x0580) */

#define BIT_SHIFT_PSTIMER0_INT				5
#define BIT_MASK_PSTIMER0_INT				0x7ffffff
#define BIT_PSTIMER0_INT(x)				(((x) & BIT_MASK_PSTIMER0_INT) << BIT_SHIFT_PSTIMER0_INT)
#define BITS_PSTIMER0_INT				(BIT_MASK_PSTIMER0_INT << BIT_SHIFT_PSTIMER0_INT)
#define BIT_CLEAR_PSTIMER0_INT(x)			((x) & (~BITS_PSTIMER0_INT))
#define BIT_GET_PSTIMER0_INT(x)			(((x) >> BIT_SHIFT_PSTIMER0_INT) & BIT_MASK_PSTIMER0_INT)
#define BIT_SET_PSTIMER0_INT(x, v)			(BIT_CLEAR_PSTIMER0_INT(x) | BIT_PSTIMER0_INT(v))

/* 2 REG_PS_TIMER1				(Offset 0x0584) */

#define BIT_SHIFT_PSTIMER1_INT				5
#define BIT_MASK_PSTIMER1_INT				0x7ffffff
#define BIT_PSTIMER1_INT(x)				(((x) & BIT_MASK_PSTIMER1_INT) << BIT_SHIFT_PSTIMER1_INT)
#define BITS_PSTIMER1_INT				(BIT_MASK_PSTIMER1_INT << BIT_SHIFT_PSTIMER1_INT)
#define BIT_CLEAR_PSTIMER1_INT(x)			((x) & (~BITS_PSTIMER1_INT))
#define BIT_GET_PSTIMER1_INT(x)			(((x) >> BIT_SHIFT_PSTIMER1_INT) & BIT_MASK_PSTIMER1_INT)
#define BIT_SET_PSTIMER1_INT(x, v)			(BIT_CLEAR_PSTIMER1_INT(x) | BIT_PSTIMER1_INT(v))

/* 2 REG_PS_TIMER2				(Offset 0x0588) */

#define BIT_SHIFT_PSTIMER2_INT				5
#define BIT_MASK_PSTIMER2_INT				0x7ffffff
#define BIT_PSTIMER2_INT(x)				(((x) & BIT_MASK_PSTIMER2_INT) << BIT_SHIFT_PSTIMER2_INT)
#define BITS_PSTIMER2_INT				(BIT_MASK_PSTIMER2_INT << BIT_SHIFT_PSTIMER2_INT)
#define BIT_CLEAR_PSTIMER2_INT(x)			((x) & (~BITS_PSTIMER2_INT))
#define BIT_GET_PSTIMER2_INT(x)			(((x) >> BIT_SHIFT_PSTIMER2_INT) & BIT_MASK_PSTIMER2_INT)
#define BIT_SET_PSTIMER2_INT(x, v)			(BIT_CLEAR_PSTIMER2_INT(x) | BIT_PSTIMER2_INT(v))

/* 2 REG_TBTT_CTN_AREA			(Offset 0x058C) */

#define BIT_SHIFT_TBTT_CTN_AREA			0
#define BIT_MASK_TBTT_CTN_AREA				0xff
#define BIT_TBTT_CTN_AREA(x)				(((x) & BIT_MASK_TBTT_CTN_AREA) << BIT_SHIFT_TBTT_CTN_AREA)
#define BITS_TBTT_CTN_AREA				(BIT_MASK_TBTT_CTN_AREA << BIT_SHIFT_TBTT_CTN_AREA)
#define BIT_CLEAR_TBTT_CTN_AREA(x)			((x) & (~BITS_TBTT_CTN_AREA))
#define BIT_GET_TBTT_CTN_AREA(x)			(((x) >> BIT_SHIFT_TBTT_CTN_AREA) & BIT_MASK_TBTT_CTN_AREA)
#define BIT_SET_TBTT_CTN_AREA(x, v)			(BIT_CLEAR_TBTT_CTN_AREA(x) | BIT_TBTT_CTN_AREA(v))

/* 2 REG_FORCE_BCN_IFS			(Offset 0x058E) */

#define BIT_SHIFT_FORCE_BCN_IFS			0
#define BIT_MASK_FORCE_BCN_IFS				0xff
#define BIT_FORCE_BCN_IFS(x)				(((x) & BIT_MASK_FORCE_BCN_IFS) << BIT_SHIFT_FORCE_BCN_IFS)
#define BITS_FORCE_BCN_IFS				(BIT_MASK_FORCE_BCN_IFS << BIT_SHIFT_FORCE_BCN_IFS)
#define BIT_CLEAR_FORCE_BCN_IFS(x)			((x) & (~BITS_FORCE_BCN_IFS))
#define BIT_GET_FORCE_BCN_IFS(x)			(((x) >> BIT_SHIFT_FORCE_BCN_IFS) & BIT_MASK_FORCE_BCN_IFS)
#define BIT_SET_FORCE_BCN_IFS(x, v)			(BIT_CLEAR_FORCE_BCN_IFS(x) | BIT_FORCE_BCN_IFS(v))

/* 2 REG_TXOP_MIN				(Offset 0x0590) */

#define BIT_HIQ_NAV_BREAK_EN				BIT(15)
#define BIT_MGQ_NAV_BREAK_EN				BIT(14)

#define BIT_SHIFT_TXOP_MIN				0
#define BIT_MASK_TXOP_MIN				0x3fff
#define BIT_TXOP_MIN(x)				(((x) & BIT_MASK_TXOP_MIN) << BIT_SHIFT_TXOP_MIN)
#define BITS_TXOP_MIN					(BIT_MASK_TXOP_MIN << BIT_SHIFT_TXOP_MIN)
#define BIT_CLEAR_TXOP_MIN(x)				((x) & (~BITS_TXOP_MIN))
#define BIT_GET_TXOP_MIN(x)				(((x) >> BIT_SHIFT_TXOP_MIN) & BIT_MASK_TXOP_MIN)
#define BIT_SET_TXOP_MIN(x, v)				(BIT_CLEAR_TXOP_MIN(x) | BIT_TXOP_MIN(v))

/* 2 REG_PRE_BKF_TIME			(Offset 0x0592) */

#define BIT_SHIFT_PRE_BKF_TIME				0
#define BIT_MASK_PRE_BKF_TIME				0xff
#define BIT_PRE_BKF_TIME(x)				(((x) & BIT_MASK_PRE_BKF_TIME) << BIT_SHIFT_PRE_BKF_TIME)
#define BITS_PRE_BKF_TIME				(BIT_MASK_PRE_BKF_TIME << BIT_SHIFT_PRE_BKF_TIME)
#define BIT_CLEAR_PRE_BKF_TIME(x)			((x) & (~BITS_PRE_BKF_TIME))
#define BIT_GET_PRE_BKF_TIME(x)			(((x) >> BIT_SHIFT_PRE_BKF_TIME) & BIT_MASK_PRE_BKF_TIME)
#define BIT_SET_PRE_BKF_TIME(x, v)			(BIT_CLEAR_PRE_BKF_TIME(x) | BIT_PRE_BKF_TIME(v))

/* 2 REG_CROSS_TXOP_CTRL			(Offset 0x0593) */

#define BIT_TXFAIL_BREACK_TXOP_EN			BIT(3)
#define BIT_DTIM_BYPASS				BIT(2)
#define BIT_RTS_NAV_TXOP				BIT(1)
#define BIT_NOT_CROSS_TXOP				BIT(0)

/* 2 REG_RX_TBTT_SHIFT_V1			(Offset 0x0598) */

#define BIT_RX_TBTT_SHIFT_RW_FLAG_V1			BIT(31)

#define BIT_SHIFT_RX_TBTT_SHIFT_OFFSET_V1		16
#define BIT_MASK_RX_TBTT_SHIFT_OFFSET_V1		0xfff
#define BIT_RX_TBTT_SHIFT_OFFSET_V1(x)			(((x) & BIT_MASK_RX_TBTT_SHIFT_OFFSET_V1) << BIT_SHIFT_RX_TBTT_SHIFT_OFFSET_V1)
#define BITS_RX_TBTT_SHIFT_OFFSET_V1			(BIT_MASK_RX_TBTT_SHIFT_OFFSET_V1 << BIT_SHIFT_RX_TBTT_SHIFT_OFFSET_V1)
#define BIT_CLEAR_RX_TBTT_SHIFT_OFFSET_V1(x)		((x) & (~BITS_RX_TBTT_SHIFT_OFFSET_V1))
#define BIT_GET_RX_TBTT_SHIFT_OFFSET_V1(x)		(((x) >> BIT_SHIFT_RX_TBTT_SHIFT_OFFSET_V1) & BIT_MASK_RX_TBTT_SHIFT_OFFSET_V1)
#define BIT_SET_RX_TBTT_SHIFT_OFFSET_V1(x, v)		(BIT_CLEAR_RX_TBTT_SHIFT_OFFSET_V1(x) | BIT_RX_TBTT_SHIFT_OFFSET_V1(v))

#define BIT_SHIFT_RX_TBTT_SHIFT_SEL_V1			8
#define BIT_MASK_RX_TBTT_SHIFT_SEL_V1			0x7
#define BIT_RX_TBTT_SHIFT_SEL_V1(x)			(((x) & BIT_MASK_RX_TBTT_SHIFT_SEL_V1) << BIT_SHIFT_RX_TBTT_SHIFT_SEL_V1)
#define BITS_RX_TBTT_SHIFT_SEL_V1			(BIT_MASK_RX_TBTT_SHIFT_SEL_V1 << BIT_SHIFT_RX_TBTT_SHIFT_SEL_V1)
#define BIT_CLEAR_RX_TBTT_SHIFT_SEL_V1(x)		((x) & (~BITS_RX_TBTT_SHIFT_SEL_V1))
#define BIT_GET_RX_TBTT_SHIFT_SEL_V1(x)		(((x) >> BIT_SHIFT_RX_TBTT_SHIFT_SEL_V1) & BIT_MASK_RX_TBTT_SHIFT_SEL_V1)
#define BIT_SET_RX_TBTT_SHIFT_SEL_V1(x, v)		(BIT_CLEAR_RX_TBTT_SHIFT_SEL_V1(x) | BIT_RX_TBTT_SHIFT_SEL_V1(v))

/* 2 REG_ATIMWND2				(Offset 0x05A0) */

#define BIT_SHIFT_ATIMWND2				0
#define BIT_MASK_ATIMWND2				0xff
#define BIT_ATIMWND2(x)				(((x) & BIT_MASK_ATIMWND2) << BIT_SHIFT_ATIMWND2)
#define BITS_ATIMWND2					(BIT_MASK_ATIMWND2 << BIT_SHIFT_ATIMWND2)
#define BIT_CLEAR_ATIMWND2(x)				((x) & (~BITS_ATIMWND2))
#define BIT_GET_ATIMWND2(x)				(((x) >> BIT_SHIFT_ATIMWND2) & BIT_MASK_ATIMWND2)
#define BIT_SET_ATIMWND2(x, v)				(BIT_CLEAR_ATIMWND2(x) | BIT_ATIMWND2(v))

/* 2 REG_ATIMWND3				(Offset 0x05A1) */

#define BIT_SHIFT_ATIMWND3				0
#define BIT_MASK_ATIMWND3				0xff
#define BIT_ATIMWND3(x)				(((x) & BIT_MASK_ATIMWND3) << BIT_SHIFT_ATIMWND3)
#define BITS_ATIMWND3					(BIT_MASK_ATIMWND3 << BIT_SHIFT_ATIMWND3)
#define BIT_CLEAR_ATIMWND3(x)				((x) & (~BITS_ATIMWND3))
#define BIT_GET_ATIMWND3(x)				(((x) >> BIT_SHIFT_ATIMWND3) & BIT_MASK_ATIMWND3)
#define BIT_SET_ATIMWND3(x, v)				(BIT_CLEAR_ATIMWND3(x) | BIT_ATIMWND3(v))

/* 2 REG_ATIMWND4				(Offset 0x05A2) */

#define BIT_SHIFT_ATIMWND4				0
#define BIT_MASK_ATIMWND4				0xff
#define BIT_ATIMWND4(x)				(((x) & BIT_MASK_ATIMWND4) << BIT_SHIFT_ATIMWND4)
#define BITS_ATIMWND4					(BIT_MASK_ATIMWND4 << BIT_SHIFT_ATIMWND4)
#define BIT_CLEAR_ATIMWND4(x)				((x) & (~BITS_ATIMWND4))
#define BIT_GET_ATIMWND4(x)				(((x) >> BIT_SHIFT_ATIMWND4) & BIT_MASK_ATIMWND4)
#define BIT_SET_ATIMWND4(x, v)				(BIT_CLEAR_ATIMWND4(x) | BIT_ATIMWND4(v))

/* 2 REG_ATIMWND5				(Offset 0x05A3) */

#define BIT_SHIFT_ATIMWND5				0
#define BIT_MASK_ATIMWND5				0xff
#define BIT_ATIMWND5(x)				(((x) & BIT_MASK_ATIMWND5) << BIT_SHIFT_ATIMWND5)
#define BITS_ATIMWND5					(BIT_MASK_ATIMWND5 << BIT_SHIFT_ATIMWND5)
#define BIT_CLEAR_ATIMWND5(x)				((x) & (~BITS_ATIMWND5))
#define BIT_GET_ATIMWND5(x)				(((x) >> BIT_SHIFT_ATIMWND5) & BIT_MASK_ATIMWND5)
#define BIT_SET_ATIMWND5(x, v)				(BIT_CLEAR_ATIMWND5(x) | BIT_ATIMWND5(v))

/* 2 REG_ATIMWND6				(Offset 0x05A4) */

#define BIT_SHIFT_ATIMWND6				0
#define BIT_MASK_ATIMWND6				0xff
#define BIT_ATIMWND6(x)				(((x) & BIT_MASK_ATIMWND6) << BIT_SHIFT_ATIMWND6)
#define BITS_ATIMWND6					(BIT_MASK_ATIMWND6 << BIT_SHIFT_ATIMWND6)
#define BIT_CLEAR_ATIMWND6(x)				((x) & (~BITS_ATIMWND6))
#define BIT_GET_ATIMWND6(x)				(((x) >> BIT_SHIFT_ATIMWND6) & BIT_MASK_ATIMWND6)
#define BIT_SET_ATIMWND6(x, v)				(BIT_CLEAR_ATIMWND6(x) | BIT_ATIMWND6(v))

/* 2 REG_ATIMWND7				(Offset 0x05A5) */

#define BIT_SHIFT_ATIMWND7				0
#define BIT_MASK_ATIMWND7				0xff
#define BIT_ATIMWND7(x)				(((x) & BIT_MASK_ATIMWND7) << BIT_SHIFT_ATIMWND7)
#define BITS_ATIMWND7					(BIT_MASK_ATIMWND7 << BIT_SHIFT_ATIMWND7)
#define BIT_CLEAR_ATIMWND7(x)				((x) & (~BITS_ATIMWND7))
#define BIT_GET_ATIMWND7(x)				(((x) >> BIT_SHIFT_ATIMWND7) & BIT_MASK_ATIMWND7)
#define BIT_SET_ATIMWND7(x, v)				(BIT_CLEAR_ATIMWND7(x) | BIT_ATIMWND7(v))

/* 2 REG_ATIMUGT				(Offset 0x05A6) */

#define BIT_SHIFT_ATIM_URGENT				0
#define BIT_MASK_ATIM_URGENT				0xff
#define BIT_ATIM_URGENT(x)				(((x) & BIT_MASK_ATIM_URGENT) << BIT_SHIFT_ATIM_URGENT)
#define BITS_ATIM_URGENT				(BIT_MASK_ATIM_URGENT << BIT_SHIFT_ATIM_URGENT)
#define BIT_CLEAR_ATIM_URGENT(x)			((x) & (~BITS_ATIM_URGENT))
#define BIT_GET_ATIM_URGENT(x)				(((x) >> BIT_SHIFT_ATIM_URGENT) & BIT_MASK_ATIM_URGENT)
#define BIT_SET_ATIM_URGENT(x, v)			(BIT_CLEAR_ATIM_URGENT(x) | BIT_ATIM_URGENT(v))

/* 2 REG_HIQ_NO_LMT_EN			(Offset 0x05A7) */

#define BIT_HIQ_NO_LMT_EN_VAP7				BIT(7)
#define BIT_HIQ_NO_LMT_EN_VAP6				BIT(6)
#define BIT_HIQ_NO_LMT_EN_VAP5				BIT(5)
#define BIT_HIQ_NO_LMT_EN_VAP4				BIT(4)
#define BIT_HIQ_NO_LMT_EN_VAP3				BIT(3)
#define BIT_HIQ_NO_LMT_EN_VAP2				BIT(2)
#define BIT_HIQ_NO_LMT_EN_VAP1				BIT(1)
#define BIT_HIQ_NO_LMT_EN_ROOT				BIT(0)

/* 2 REG_DTIM_COUNTER_ROOT			(Offset 0x05A8) */

#define BIT_SHIFT_DTIM_COUNT_ROOT			0
#define BIT_MASK_DTIM_COUNT_ROOT			0xff
#define BIT_DTIM_COUNT_ROOT(x)				(((x) & BIT_MASK_DTIM_COUNT_ROOT) << BIT_SHIFT_DTIM_COUNT_ROOT)
#define BITS_DTIM_COUNT_ROOT				(BIT_MASK_DTIM_COUNT_ROOT << BIT_SHIFT_DTIM_COUNT_ROOT)
#define BIT_CLEAR_DTIM_COUNT_ROOT(x)			((x) & (~BITS_DTIM_COUNT_ROOT))
#define BIT_GET_DTIM_COUNT_ROOT(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_ROOT) & BIT_MASK_DTIM_COUNT_ROOT)
#define BIT_SET_DTIM_COUNT_ROOT(x, v)			(BIT_CLEAR_DTIM_COUNT_ROOT(x) | BIT_DTIM_COUNT_ROOT(v))

/* 2 REG_DTIM_COUNTER_VAP1			(Offset 0x05A9) */

#define BIT_SHIFT_DTIM_COUNT_VAP1			0
#define BIT_MASK_DTIM_COUNT_VAP1			0xff
#define BIT_DTIM_COUNT_VAP1(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP1) << BIT_SHIFT_DTIM_COUNT_VAP1)
#define BITS_DTIM_COUNT_VAP1				(BIT_MASK_DTIM_COUNT_VAP1 << BIT_SHIFT_DTIM_COUNT_VAP1)
#define BIT_CLEAR_DTIM_COUNT_VAP1(x)			((x) & (~BITS_DTIM_COUNT_VAP1))
#define BIT_GET_DTIM_COUNT_VAP1(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP1) & BIT_MASK_DTIM_COUNT_VAP1)
#define BIT_SET_DTIM_COUNT_VAP1(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP1(x) | BIT_DTIM_COUNT_VAP1(v))

/* 2 REG_DTIM_COUNTER_VAP2			(Offset 0x05AA) */

#define BIT_SHIFT_DTIM_COUNT_VAP2			0
#define BIT_MASK_DTIM_COUNT_VAP2			0xff
#define BIT_DTIM_COUNT_VAP2(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP2) << BIT_SHIFT_DTIM_COUNT_VAP2)
#define BITS_DTIM_COUNT_VAP2				(BIT_MASK_DTIM_COUNT_VAP2 << BIT_SHIFT_DTIM_COUNT_VAP2)
#define BIT_CLEAR_DTIM_COUNT_VAP2(x)			((x) & (~BITS_DTIM_COUNT_VAP2))
#define BIT_GET_DTIM_COUNT_VAP2(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP2) & BIT_MASK_DTIM_COUNT_VAP2)
#define BIT_SET_DTIM_COUNT_VAP2(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP2(x) | BIT_DTIM_COUNT_VAP2(v))

/* 2 REG_DTIM_COUNTER_VAP3			(Offset 0x05AB) */

#define BIT_SHIFT_DTIM_COUNT_VAP3			0
#define BIT_MASK_DTIM_COUNT_VAP3			0xff
#define BIT_DTIM_COUNT_VAP3(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP3) << BIT_SHIFT_DTIM_COUNT_VAP3)
#define BITS_DTIM_COUNT_VAP3				(BIT_MASK_DTIM_COUNT_VAP3 << BIT_SHIFT_DTIM_COUNT_VAP3)
#define BIT_CLEAR_DTIM_COUNT_VAP3(x)			((x) & (~BITS_DTIM_COUNT_VAP3))
#define BIT_GET_DTIM_COUNT_VAP3(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP3) & BIT_MASK_DTIM_COUNT_VAP3)
#define BIT_SET_DTIM_COUNT_VAP3(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP3(x) | BIT_DTIM_COUNT_VAP3(v))

/* 2 REG_DTIM_COUNTER_VAP4			(Offset 0x05AC) */

#define BIT_SHIFT_DTIM_COUNT_VAP4			0
#define BIT_MASK_DTIM_COUNT_VAP4			0xff
#define BIT_DTIM_COUNT_VAP4(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP4) << BIT_SHIFT_DTIM_COUNT_VAP4)
#define BITS_DTIM_COUNT_VAP4				(BIT_MASK_DTIM_COUNT_VAP4 << BIT_SHIFT_DTIM_COUNT_VAP4)
#define BIT_CLEAR_DTIM_COUNT_VAP4(x)			((x) & (~BITS_DTIM_COUNT_VAP4))
#define BIT_GET_DTIM_COUNT_VAP4(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP4) & BIT_MASK_DTIM_COUNT_VAP4)
#define BIT_SET_DTIM_COUNT_VAP4(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP4(x) | BIT_DTIM_COUNT_VAP4(v))

/* 2 REG_DTIM_COUNTER_VAP5			(Offset 0x05AD) */

#define BIT_SHIFT_DTIM_COUNT_VAP5			0
#define BIT_MASK_DTIM_COUNT_VAP5			0xff
#define BIT_DTIM_COUNT_VAP5(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP5) << BIT_SHIFT_DTIM_COUNT_VAP5)
#define BITS_DTIM_COUNT_VAP5				(BIT_MASK_DTIM_COUNT_VAP5 << BIT_SHIFT_DTIM_COUNT_VAP5)
#define BIT_CLEAR_DTIM_COUNT_VAP5(x)			((x) & (~BITS_DTIM_COUNT_VAP5))
#define BIT_GET_DTIM_COUNT_VAP5(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP5) & BIT_MASK_DTIM_COUNT_VAP5)
#define BIT_SET_DTIM_COUNT_VAP5(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP5(x) | BIT_DTIM_COUNT_VAP5(v))

/* 2 REG_DTIM_COUNTER_VAP6			(Offset 0x05AE) */

#define BIT_SHIFT_DTIM_COUNT_VAP6			0
#define BIT_MASK_DTIM_COUNT_VAP6			0xff
#define BIT_DTIM_COUNT_VAP6(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP6) << BIT_SHIFT_DTIM_COUNT_VAP6)
#define BITS_DTIM_COUNT_VAP6				(BIT_MASK_DTIM_COUNT_VAP6 << BIT_SHIFT_DTIM_COUNT_VAP6)
#define BIT_CLEAR_DTIM_COUNT_VAP6(x)			((x) & (~BITS_DTIM_COUNT_VAP6))
#define BIT_GET_DTIM_COUNT_VAP6(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP6) & BIT_MASK_DTIM_COUNT_VAP6)
#define BIT_SET_DTIM_COUNT_VAP6(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP6(x) | BIT_DTIM_COUNT_VAP6(v))

/* 2 REG_DTIM_COUNTER_VAP7			(Offset 0x05AF) */

#define BIT_SHIFT_DTIM_COUNT_VAP7			0
#define BIT_MASK_DTIM_COUNT_VAP7			0xff
#define BIT_DTIM_COUNT_VAP7(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP7) << BIT_SHIFT_DTIM_COUNT_VAP7)
#define BITS_DTIM_COUNT_VAP7				(BIT_MASK_DTIM_COUNT_VAP7 << BIT_SHIFT_DTIM_COUNT_VAP7)
#define BIT_CLEAR_DTIM_COUNT_VAP7(x)			((x) & (~BITS_DTIM_COUNT_VAP7))
#define BIT_GET_DTIM_COUNT_VAP7(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP7) & BIT_MASK_DTIM_COUNT_VAP7)
#define BIT_SET_DTIM_COUNT_VAP7(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP7(x) | BIT_DTIM_COUNT_VAP7(v))

/* 2 REG_DIS_ATIM				(Offset 0x05B0) */

#define BIT_DIS_ATIM_VAP7				BIT(7)
#define BIT_DIS_ATIM_VAP6				BIT(6)
#define BIT_DIS_ATIM_VAP5				BIT(5)
#define BIT_DIS_ATIM_VAP4				BIT(4)
#define BIT_DIS_ATIM_VAP3				BIT(3)
#define BIT_DIS_ATIM_VAP2				BIT(2)
#define BIT_DIS_ATIM_VAP1				BIT(1)
#define BIT_DIS_ATIM_ROOT				BIT(0)

/* 2 REG_EARLY_128US				(Offset 0x05B1) */

#define BIT_SHIFT_TSFT_SEL_TIMER1			3
#define BIT_MASK_TSFT_SEL_TIMER1			0x7
#define BIT_TSFT_SEL_TIMER1(x)				(((x) & BIT_MASK_TSFT_SEL_TIMER1) << BIT_SHIFT_TSFT_SEL_TIMER1)
#define BITS_TSFT_SEL_TIMER1				(BIT_MASK_TSFT_SEL_TIMER1 << BIT_SHIFT_TSFT_SEL_TIMER1)
#define BIT_CLEAR_TSFT_SEL_TIMER1(x)			((x) & (~BITS_TSFT_SEL_TIMER1))
#define BIT_GET_TSFT_SEL_TIMER1(x)			(((x) >> BIT_SHIFT_TSFT_SEL_TIMER1) & BIT_MASK_TSFT_SEL_TIMER1)
#define BIT_SET_TSFT_SEL_TIMER1(x, v)			(BIT_CLEAR_TSFT_SEL_TIMER1(x) | BIT_TSFT_SEL_TIMER1(v))

#define BIT_SHIFT_EARLY_128US				0
#define BIT_MASK_EARLY_128US				0x7
#define BIT_EARLY_128US(x)				(((x) & BIT_MASK_EARLY_128US) << BIT_SHIFT_EARLY_128US)
#define BITS_EARLY_128US				(BIT_MASK_EARLY_128US << BIT_SHIFT_EARLY_128US)
#define BIT_CLEAR_EARLY_128US(x)			((x) & (~BITS_EARLY_128US))
#define BIT_GET_EARLY_128US(x)				(((x) >> BIT_SHIFT_EARLY_128US) & BIT_MASK_EARLY_128US)
#define BIT_SET_EARLY_128US(x, v)			(BIT_CLEAR_EARLY_128US(x) | BIT_EARLY_128US(v))

/* 2 REG_P2PPS1_CTRL				(Offset 0x05B2) */

#define BIT_P2P1_CTW_ALLSTASLEEP			BIT(7)
#define BIT_P2P1_OFF_DISTX_EN				BIT(6)
#define BIT_P2P1_PWR_MGT_EN				BIT(5)
#define BIT_P2P1_NOA1_EN				BIT(2)
#define BIT_P2P1_NOA0_EN				BIT(1)

/* 2 REG_P2PPS2_CTRL				(Offset 0x05B3) */

#define BIT_P2P2_CTW_ALLSTASLEEP			BIT(7)
#define BIT_P2P2_OFF_DISTX_EN				BIT(6)
#define BIT_P2P2_PWR_MGT_EN				BIT(5)
#define BIT_P2P2_NOA1_EN				BIT(2)
#define BIT_P2P2_NOA0_EN				BIT(1)

/* 2 REG_TIMER0_SRC_SEL			(Offset 0x05B4) */

#define BIT_SHIFT_SYNC_CLI_SEL				4
#define BIT_MASK_SYNC_CLI_SEL				0x7
#define BIT_SYNC_CLI_SEL(x)				(((x) & BIT_MASK_SYNC_CLI_SEL) << BIT_SHIFT_SYNC_CLI_SEL)
#define BITS_SYNC_CLI_SEL				(BIT_MASK_SYNC_CLI_SEL << BIT_SHIFT_SYNC_CLI_SEL)
#define BIT_CLEAR_SYNC_CLI_SEL(x)			((x) & (~BITS_SYNC_CLI_SEL))
#define BIT_GET_SYNC_CLI_SEL(x)			(((x) >> BIT_SHIFT_SYNC_CLI_SEL) & BIT_MASK_SYNC_CLI_SEL)
#define BIT_SET_SYNC_CLI_SEL(x, v)			(BIT_CLEAR_SYNC_CLI_SEL(x) | BIT_SYNC_CLI_SEL(v))

#define BIT_SHIFT_TSFT_SEL_TIMER0			0
#define BIT_MASK_TSFT_SEL_TIMER0			0x7
#define BIT_TSFT_SEL_TIMER0(x)				(((x) & BIT_MASK_TSFT_SEL_TIMER0) << BIT_SHIFT_TSFT_SEL_TIMER0)
#define BITS_TSFT_SEL_TIMER0				(BIT_MASK_TSFT_SEL_TIMER0 << BIT_SHIFT_TSFT_SEL_TIMER0)
#define BIT_CLEAR_TSFT_SEL_TIMER0(x)			((x) & (~BITS_TSFT_SEL_TIMER0))
#define BIT_GET_TSFT_SEL_TIMER0(x)			(((x) >> BIT_SHIFT_TSFT_SEL_TIMER0) & BIT_MASK_TSFT_SEL_TIMER0)
#define BIT_SET_TSFT_SEL_TIMER0(x, v)			(BIT_CLEAR_TSFT_SEL_TIMER0(x) | BIT_TSFT_SEL_TIMER0(v))

/* 2 REG_NOA_UNIT_SEL			(Offset 0x05B5) */

#define BIT_SHIFT_NOA_UNIT2_SEL			8
#define BIT_MASK_NOA_UNIT2_SEL				0x7
#define BIT_NOA_UNIT2_SEL(x)				(((x) & BIT_MASK_NOA_UNIT2_SEL) << BIT_SHIFT_NOA_UNIT2_SEL)
#define BITS_NOA_UNIT2_SEL				(BIT_MASK_NOA_UNIT2_SEL << BIT_SHIFT_NOA_UNIT2_SEL)
#define BIT_CLEAR_NOA_UNIT2_SEL(x)			((x) & (~BITS_NOA_UNIT2_SEL))
#define BIT_GET_NOA_UNIT2_SEL(x)			(((x) >> BIT_SHIFT_NOA_UNIT2_SEL) & BIT_MASK_NOA_UNIT2_SEL)
#define BIT_SET_NOA_UNIT2_SEL(x, v)			(BIT_CLEAR_NOA_UNIT2_SEL(x) | BIT_NOA_UNIT2_SEL(v))

#define BIT_SHIFT_NOA_UNIT1_SEL			4
#define BIT_MASK_NOA_UNIT1_SEL				0x7
#define BIT_NOA_UNIT1_SEL(x)				(((x) & BIT_MASK_NOA_UNIT1_SEL) << BIT_SHIFT_NOA_UNIT1_SEL)
#define BITS_NOA_UNIT1_SEL				(BIT_MASK_NOA_UNIT1_SEL << BIT_SHIFT_NOA_UNIT1_SEL)
#define BIT_CLEAR_NOA_UNIT1_SEL(x)			((x) & (~BITS_NOA_UNIT1_SEL))
#define BIT_GET_NOA_UNIT1_SEL(x)			(((x) >> BIT_SHIFT_NOA_UNIT1_SEL) & BIT_MASK_NOA_UNIT1_SEL)
#define BIT_SET_NOA_UNIT1_SEL(x, v)			(BIT_CLEAR_NOA_UNIT1_SEL(x) | BIT_NOA_UNIT1_SEL(v))

#define BIT_SHIFT_NOA_UNIT0_SEL			0
#define BIT_MASK_NOA_UNIT0_SEL				0x7
#define BIT_NOA_UNIT0_SEL(x)				(((x) & BIT_MASK_NOA_UNIT0_SEL) << BIT_SHIFT_NOA_UNIT0_SEL)
#define BITS_NOA_UNIT0_SEL				(BIT_MASK_NOA_UNIT0_SEL << BIT_SHIFT_NOA_UNIT0_SEL)
#define BIT_CLEAR_NOA_UNIT0_SEL(x)			((x) & (~BITS_NOA_UNIT0_SEL))
#define BIT_GET_NOA_UNIT0_SEL(x)			(((x) >> BIT_SHIFT_NOA_UNIT0_SEL) & BIT_MASK_NOA_UNIT0_SEL)
#define BIT_SET_NOA_UNIT0_SEL(x, v)			(BIT_CLEAR_NOA_UNIT0_SEL(x) | BIT_NOA_UNIT0_SEL(v))

/* 2 REG_P2POFF_DIS_TXTIME			(Offset 0x05B7) */

#define BIT_SHIFT_P2POFF_DIS_TXTIME			0
#define BIT_MASK_P2POFF_DIS_TXTIME			0xff
#define BIT_P2POFF_DIS_TXTIME(x)			(((x) & BIT_MASK_P2POFF_DIS_TXTIME) << BIT_SHIFT_P2POFF_DIS_TXTIME)
#define BITS_P2POFF_DIS_TXTIME				(BIT_MASK_P2POFF_DIS_TXTIME << BIT_SHIFT_P2POFF_DIS_TXTIME)
#define BIT_CLEAR_P2POFF_DIS_TXTIME(x)			((x) & (~BITS_P2POFF_DIS_TXTIME))
#define BIT_GET_P2POFF_DIS_TXTIME(x)			(((x) >> BIT_SHIFT_P2POFF_DIS_TXTIME) & BIT_MASK_P2POFF_DIS_TXTIME)
#define BIT_SET_P2POFF_DIS_TXTIME(x, v)		(BIT_CLEAR_P2POFF_DIS_TXTIME(x) | BIT_P2POFF_DIS_TXTIME(v))

/* 2 REG_MBSSID_BCN_SPACE2			(Offset 0x05B8) */

#define BIT_SHIFT_BCN_SPACE_CLINT2			16
#define BIT_MASK_BCN_SPACE_CLINT2			0xfff
#define BIT_BCN_SPACE_CLINT2(x)			(((x) & BIT_MASK_BCN_SPACE_CLINT2) << BIT_SHIFT_BCN_SPACE_CLINT2)
#define BITS_BCN_SPACE_CLINT2				(BIT_MASK_BCN_SPACE_CLINT2 << BIT_SHIFT_BCN_SPACE_CLINT2)
#define BIT_CLEAR_BCN_SPACE_CLINT2(x)			((x) & (~BITS_BCN_SPACE_CLINT2))
#define BIT_GET_BCN_SPACE_CLINT2(x)			(((x) >> BIT_SHIFT_BCN_SPACE_CLINT2) & BIT_MASK_BCN_SPACE_CLINT2)
#define BIT_SET_BCN_SPACE_CLINT2(x, v)			(BIT_CLEAR_BCN_SPACE_CLINT2(x) | BIT_BCN_SPACE_CLINT2(v))

#define BIT_SHIFT_BCN_SPACE_CLINT1			0
#define BIT_MASK_BCN_SPACE_CLINT1			0xfff
#define BIT_BCN_SPACE_CLINT1(x)			(((x) & BIT_MASK_BCN_SPACE_CLINT1) << BIT_SHIFT_BCN_SPACE_CLINT1)
#define BITS_BCN_SPACE_CLINT1				(BIT_MASK_BCN_SPACE_CLINT1 << BIT_SHIFT_BCN_SPACE_CLINT1)
#define BIT_CLEAR_BCN_SPACE_CLINT1(x)			((x) & (~BITS_BCN_SPACE_CLINT1))
#define BIT_GET_BCN_SPACE_CLINT1(x)			(((x) >> BIT_SHIFT_BCN_SPACE_CLINT1) & BIT_MASK_BCN_SPACE_CLINT1)
#define BIT_SET_BCN_SPACE_CLINT1(x, v)			(BIT_CLEAR_BCN_SPACE_CLINT1(x) | BIT_BCN_SPACE_CLINT1(v))

/* 2 REG_MBSSID_BCN_SPACE3			(Offset 0x05BC) */

#define BIT_SHIFT_SUB_BCN_SPACE			16
#define BIT_MASK_SUB_BCN_SPACE				0xff
#define BIT_SUB_BCN_SPACE(x)				(((x) & BIT_MASK_SUB_BCN_SPACE) << BIT_SHIFT_SUB_BCN_SPACE)
#define BITS_SUB_BCN_SPACE				(BIT_MASK_SUB_BCN_SPACE << BIT_SHIFT_SUB_BCN_SPACE)
#define BIT_CLEAR_SUB_BCN_SPACE(x)			((x) & (~BITS_SUB_BCN_SPACE))
#define BIT_GET_SUB_BCN_SPACE(x)			(((x) >> BIT_SHIFT_SUB_BCN_SPACE) & BIT_MASK_SUB_BCN_SPACE)
#define BIT_SET_SUB_BCN_SPACE(x, v)			(BIT_CLEAR_SUB_BCN_SPACE(x) | BIT_SUB_BCN_SPACE(v))

#define BIT_SHIFT_BCN_SPACE_CLINT3			0
#define BIT_MASK_BCN_SPACE_CLINT3			0xfff
#define BIT_BCN_SPACE_CLINT3(x)			(((x) & BIT_MASK_BCN_SPACE_CLINT3) << BIT_SHIFT_BCN_SPACE_CLINT3)
#define BITS_BCN_SPACE_CLINT3				(BIT_MASK_BCN_SPACE_CLINT3 << BIT_SHIFT_BCN_SPACE_CLINT3)
#define BIT_CLEAR_BCN_SPACE_CLINT3(x)			((x) & (~BITS_BCN_SPACE_CLINT3))
#define BIT_GET_BCN_SPACE_CLINT3(x)			(((x) >> BIT_SHIFT_BCN_SPACE_CLINT3) & BIT_MASK_BCN_SPACE_CLINT3)
#define BIT_SET_BCN_SPACE_CLINT3(x, v)			(BIT_CLEAR_BCN_SPACE_CLINT3(x) | BIT_BCN_SPACE_CLINT3(v))

/* 2 REG_ACMHWCTRL				(Offset 0x05C0) */

#define BIT_BEQ_ACM_STATUS				BIT(7)
#define BIT_VIQ_ACM_STATUS				BIT(6)
#define BIT_VOQ_ACM_STATUS				BIT(5)
#define BIT_BEQ_ACM_EN					BIT(3)
#define BIT_VIQ_ACM_EN					BIT(2)
#define BIT_VOQ_ACM_EN					BIT(1)
#define BIT_ACMHWEN					BIT(0)

/* 2 REG_ACMRSTCTRL				(Offset 0x05C1) */

#define BIT_BE_ACM_RESET_USED_TIME			BIT(2)
#define BIT_VI_ACM_RESET_USED_TIME			BIT(1)
#define BIT_VO_ACM_RESET_USED_TIME			BIT(0)

/* 2 REG_ACMAVG				(Offset 0x05C2) */

#define BIT_SHIFT_AVGPERIOD				0
#define BIT_MASK_AVGPERIOD				0xffff
#define BIT_AVGPERIOD(x)				(((x) & BIT_MASK_AVGPERIOD) << BIT_SHIFT_AVGPERIOD)
#define BITS_AVGPERIOD					(BIT_MASK_AVGPERIOD << BIT_SHIFT_AVGPERIOD)
#define BIT_CLEAR_AVGPERIOD(x)				((x) & (~BITS_AVGPERIOD))
#define BIT_GET_AVGPERIOD(x)				(((x) >> BIT_SHIFT_AVGPERIOD) & BIT_MASK_AVGPERIOD)
#define BIT_SET_AVGPERIOD(x, v)			(BIT_CLEAR_AVGPERIOD(x) | BIT_AVGPERIOD(v))

/* 2 REG_VO_ADMTIME				(Offset 0x05C4) */

#define BIT_SHIFT_VO_ADMITTED_TIME			0
#define BIT_MASK_VO_ADMITTED_TIME			0xffff
#define BIT_VO_ADMITTED_TIME(x)			(((x) & BIT_MASK_VO_ADMITTED_TIME) << BIT_SHIFT_VO_ADMITTED_TIME)
#define BITS_VO_ADMITTED_TIME				(BIT_MASK_VO_ADMITTED_TIME << BIT_SHIFT_VO_ADMITTED_TIME)
#define BIT_CLEAR_VO_ADMITTED_TIME(x)			((x) & (~BITS_VO_ADMITTED_TIME))
#define BIT_GET_VO_ADMITTED_TIME(x)			(((x) >> BIT_SHIFT_VO_ADMITTED_TIME) & BIT_MASK_VO_ADMITTED_TIME)
#define BIT_SET_VO_ADMITTED_TIME(x, v)			(BIT_CLEAR_VO_ADMITTED_TIME(x) | BIT_VO_ADMITTED_TIME(v))

/* 2 REG_VI_ADMTIME				(Offset 0x05C6) */

#define BIT_SHIFT_VI_ADMITTED_TIME			0
#define BIT_MASK_VI_ADMITTED_TIME			0xffff
#define BIT_VI_ADMITTED_TIME(x)			(((x) & BIT_MASK_VI_ADMITTED_TIME) << BIT_SHIFT_VI_ADMITTED_TIME)
#define BITS_VI_ADMITTED_TIME				(BIT_MASK_VI_ADMITTED_TIME << BIT_SHIFT_VI_ADMITTED_TIME)
#define BIT_CLEAR_VI_ADMITTED_TIME(x)			((x) & (~BITS_VI_ADMITTED_TIME))
#define BIT_GET_VI_ADMITTED_TIME(x)			(((x) >> BIT_SHIFT_VI_ADMITTED_TIME) & BIT_MASK_VI_ADMITTED_TIME)
#define BIT_SET_VI_ADMITTED_TIME(x, v)			(BIT_CLEAR_VI_ADMITTED_TIME(x) | BIT_VI_ADMITTED_TIME(v))

/* 2 REG_BE_ADMTIME				(Offset 0x05C8) */

#define BIT_SHIFT_BE_ADMITTED_TIME			0
#define BIT_MASK_BE_ADMITTED_TIME			0xffff
#define BIT_BE_ADMITTED_TIME(x)			(((x) & BIT_MASK_BE_ADMITTED_TIME) << BIT_SHIFT_BE_ADMITTED_TIME)
#define BITS_BE_ADMITTED_TIME				(BIT_MASK_BE_ADMITTED_TIME << BIT_SHIFT_BE_ADMITTED_TIME)
#define BIT_CLEAR_BE_ADMITTED_TIME(x)			((x) & (~BITS_BE_ADMITTED_TIME))
#define BIT_GET_BE_ADMITTED_TIME(x)			(((x) >> BIT_SHIFT_BE_ADMITTED_TIME) & BIT_MASK_BE_ADMITTED_TIME)
#define BIT_SET_BE_ADMITTED_TIME(x, v)			(BIT_CLEAR_BE_ADMITTED_TIME(x) | BIT_BE_ADMITTED_TIME(v))

/* 2 REG_MAC_HEADER_NAV_OFFSET		(Offset 0x05CA) */

#define BIT_SHIFT_MAC_HEADER_NAV_OFFSET		0
#define BIT_MASK_MAC_HEADER_NAV_OFFSET			0xff
#define BIT_MAC_HEADER_NAV_OFFSET(x)			(((x) & BIT_MASK_MAC_HEADER_NAV_OFFSET) << BIT_SHIFT_MAC_HEADER_NAV_OFFSET)
#define BITS_MAC_HEADER_NAV_OFFSET			(BIT_MASK_MAC_HEADER_NAV_OFFSET << BIT_SHIFT_MAC_HEADER_NAV_OFFSET)
#define BIT_CLEAR_MAC_HEADER_NAV_OFFSET(x)		((x) & (~BITS_MAC_HEADER_NAV_OFFSET))
#define BIT_GET_MAC_HEADER_NAV_OFFSET(x)		(((x) >> BIT_SHIFT_MAC_HEADER_NAV_OFFSET) & BIT_MASK_MAC_HEADER_NAV_OFFSET)
#define BIT_SET_MAC_HEADER_NAV_OFFSET(x, v)		(BIT_CLEAR_MAC_HEADER_NAV_OFFSET(x) | BIT_MAC_HEADER_NAV_OFFSET(v))

/* 2 REG_DIS_NDPA_NAV_CHECK			(Offset 0x05CB) */

#define BIT_CHG_POWER_BCN_AREA_V1			BIT(1)
#define BIT_DIS_NDPA_NAV_CHECK				BIT(0)

/* 2 REG_EDCA_RANDOM_GEN			(Offset 0x05CC) */

#define BIT_SHIFT_RANDOM_GEN				0
#define BIT_MASK_RANDOM_GEN				0xffffff
#define BIT_RANDOM_GEN(x)				(((x) & BIT_MASK_RANDOM_GEN) << BIT_SHIFT_RANDOM_GEN)
#define BITS_RANDOM_GEN				(BIT_MASK_RANDOM_GEN << BIT_SHIFT_RANDOM_GEN)
#define BIT_CLEAR_RANDOM_GEN(x)			((x) & (~BITS_RANDOM_GEN))
#define BIT_GET_RANDOM_GEN(x)				(((x) >> BIT_SHIFT_RANDOM_GEN) & BIT_MASK_RANDOM_GEN)
#define BIT_SET_RANDOM_GEN(x, v)			(BIT_CLEAR_RANDOM_GEN(x) | BIT_RANDOM_GEN(v))

/* 2 REG_TXCMD_NOA_SEL			(Offset 0x05CF) */

#define BIT_SHIFT_NOA_SEL_V2				4
#define BIT_MASK_NOA_SEL_V2				0x7
#define BIT_NOA_SEL_V2(x)				(((x) & BIT_MASK_NOA_SEL_V2) << BIT_SHIFT_NOA_SEL_V2)
#define BITS_NOA_SEL_V2				(BIT_MASK_NOA_SEL_V2 << BIT_SHIFT_NOA_SEL_V2)
#define BIT_CLEAR_NOA_SEL_V2(x)			((x) & (~BITS_NOA_SEL_V2))
#define BIT_GET_NOA_SEL_V2(x)				(((x) >> BIT_SHIFT_NOA_SEL_V2) & BIT_MASK_NOA_SEL_V2)
#define BIT_SET_NOA_SEL_V2(x, v)			(BIT_CLEAR_NOA_SEL_V2(x) | BIT_NOA_SEL_V2(v))

#define BIT_SHIFT_TXCMD_SEG_SEL			0
#define BIT_MASK_TXCMD_SEG_SEL				0xf
#define BIT_TXCMD_SEG_SEL(x)				(((x) & BIT_MASK_TXCMD_SEG_SEL) << BIT_SHIFT_TXCMD_SEG_SEL)
#define BITS_TXCMD_SEG_SEL				(BIT_MASK_TXCMD_SEG_SEL << BIT_SHIFT_TXCMD_SEG_SEL)
#define BIT_CLEAR_TXCMD_SEG_SEL(x)			((x) & (~BITS_TXCMD_SEG_SEL))
#define BIT_GET_TXCMD_SEG_SEL(x)			(((x) >> BIT_SHIFT_TXCMD_SEG_SEL) & BIT_MASK_TXCMD_SEG_SEL)
#define BIT_SET_TXCMD_SEG_SEL(x, v)			(BIT_CLEAR_TXCMD_SEG_SEL(x) | BIT_TXCMD_SEG_SEL(v))

/* 2 REG_32K_CLK_SEL_V1			(Offset 0x05D0) */

#define BIT_R_BCNERR_CNT_EN				BIT(20)

#define BIT_SHIFT_R_BCNERR_PORT_SEL			16
#define BIT_MASK_R_BCNERR_PORT_SEL			0x7
#define BIT_R_BCNERR_PORT_SEL(x)			(((x) & BIT_MASK_R_BCNERR_PORT_SEL) << BIT_SHIFT_R_BCNERR_PORT_SEL)
#define BITS_R_BCNERR_PORT_SEL				(BIT_MASK_R_BCNERR_PORT_SEL << BIT_SHIFT_R_BCNERR_PORT_SEL)
#define BIT_CLEAR_R_BCNERR_PORT_SEL(x)			((x) & (~BITS_R_BCNERR_PORT_SEL))
#define BIT_GET_R_BCNERR_PORT_SEL(x)			(((x) >> BIT_SHIFT_R_BCNERR_PORT_SEL) & BIT_MASK_R_BCNERR_PORT_SEL)
#define BIT_SET_R_BCNERR_PORT_SEL(x, v)		(BIT_CLEAR_R_BCNERR_PORT_SEL(x) | BIT_R_BCNERR_PORT_SEL(v))

#define BIT_SHIFT_R_TXPAUSE1				8
#define BIT_MASK_R_TXPAUSE1				0xff
#define BIT_R_TXPAUSE1(x)				(((x) & BIT_MASK_R_TXPAUSE1) << BIT_SHIFT_R_TXPAUSE1)
#define BITS_R_TXPAUSE1				(BIT_MASK_R_TXPAUSE1 << BIT_SHIFT_R_TXPAUSE1)
#define BIT_CLEAR_R_TXPAUSE1(x)			((x) & (~BITS_R_TXPAUSE1))
#define BIT_GET_R_TXPAUSE1(x)				(((x) >> BIT_SHIFT_R_TXPAUSE1) & BIT_MASK_R_TXPAUSE1)
#define BIT_SET_R_TXPAUSE1(x, v)			(BIT_CLEAR_R_TXPAUSE1(x) | BIT_R_TXPAUSE1(v))

#define BIT_SLEEP_32K_EN_V1				BIT(2)

#define BIT_SHIFT_BW_CFG				0
#define BIT_MASK_BW_CFG				0x3
#define BIT_BW_CFG(x)					(((x) & BIT_MASK_BW_CFG) << BIT_SHIFT_BW_CFG)
#define BITS_BW_CFG					(BIT_MASK_BW_CFG << BIT_SHIFT_BW_CFG)
#define BIT_CLEAR_BW_CFG(x)				((x) & (~BITS_BW_CFG))
#define BIT_GET_BW_CFG(x)				(((x) >> BIT_SHIFT_BW_CFG) & BIT_MASK_BW_CFG)
#define BIT_SET_BW_CFG(x, v)				(BIT_CLEAR_BW_CFG(x) | BIT_BW_CFG(v))

/* 2 REG_EARLYINT_ADJUST			(Offset 0x05D4) */

#define BIT_SHIFT_RXBCN_TIMER				16
#define BIT_MASK_RXBCN_TIMER				0xffff
#define BIT_RXBCN_TIMER(x)				(((x) & BIT_MASK_RXBCN_TIMER) << BIT_SHIFT_RXBCN_TIMER)
#define BITS_RXBCN_TIMER				(BIT_MASK_RXBCN_TIMER << BIT_SHIFT_RXBCN_TIMER)
#define BIT_CLEAR_RXBCN_TIMER(x)			((x) & (~BITS_RXBCN_TIMER))
#define BIT_GET_RXBCN_TIMER(x)				(((x) >> BIT_SHIFT_RXBCN_TIMER) & BIT_MASK_RXBCN_TIMER)
#define BIT_SET_RXBCN_TIMER(x, v)			(BIT_CLEAR_RXBCN_TIMER(x) | BIT_RXBCN_TIMER(v))

#define BIT_SHIFT_R_ERLYINTADJ				0
#define BIT_MASK_R_ERLYINTADJ				0xffff
#define BIT_R_ERLYINTADJ(x)				(((x) & BIT_MASK_R_ERLYINTADJ) << BIT_SHIFT_R_ERLYINTADJ)
#define BITS_R_ERLYINTADJ				(BIT_MASK_R_ERLYINTADJ << BIT_SHIFT_R_ERLYINTADJ)
#define BIT_CLEAR_R_ERLYINTADJ(x)			((x) & (~BITS_R_ERLYINTADJ))
#define BIT_GET_R_ERLYINTADJ(x)			(((x) >> BIT_SHIFT_R_ERLYINTADJ) & BIT_MASK_R_ERLYINTADJ)
#define BIT_SET_R_ERLYINTADJ(x, v)			(BIT_CLEAR_R_ERLYINTADJ(x) | BIT_R_ERLYINTADJ(v))

/* 2 REG_BCNERR_CNT				(Offset 0x05D8) */

#define BIT_SHIFT_BCNERR_CNT_OTHERS			24
#define BIT_MASK_BCNERR_CNT_OTHERS			0xff
#define BIT_BCNERR_CNT_OTHERS(x)			(((x) & BIT_MASK_BCNERR_CNT_OTHERS) << BIT_SHIFT_BCNERR_CNT_OTHERS)
#define BITS_BCNERR_CNT_OTHERS				(BIT_MASK_BCNERR_CNT_OTHERS << BIT_SHIFT_BCNERR_CNT_OTHERS)
#define BIT_CLEAR_BCNERR_CNT_OTHERS(x)			((x) & (~BITS_BCNERR_CNT_OTHERS))
#define BIT_GET_BCNERR_CNT_OTHERS(x)			(((x) >> BIT_SHIFT_BCNERR_CNT_OTHERS) & BIT_MASK_BCNERR_CNT_OTHERS)
#define BIT_SET_BCNERR_CNT_OTHERS(x, v)		(BIT_CLEAR_BCNERR_CNT_OTHERS(x) | BIT_BCNERR_CNT_OTHERS(v))

#define BIT_SHIFT_BCNERR_CNT_INVALID			16
#define BIT_MASK_BCNERR_CNT_INVALID			0xff
#define BIT_BCNERR_CNT_INVALID(x)			(((x) & BIT_MASK_BCNERR_CNT_INVALID) << BIT_SHIFT_BCNERR_CNT_INVALID)
#define BITS_BCNERR_CNT_INVALID			(BIT_MASK_BCNERR_CNT_INVALID << BIT_SHIFT_BCNERR_CNT_INVALID)
#define BIT_CLEAR_BCNERR_CNT_INVALID(x)		((x) & (~BITS_BCNERR_CNT_INVALID))
#define BIT_GET_BCNERR_CNT_INVALID(x)			(((x) >> BIT_SHIFT_BCNERR_CNT_INVALID) & BIT_MASK_BCNERR_CNT_INVALID)
#define BIT_SET_BCNERR_CNT_INVALID(x, v)		(BIT_CLEAR_BCNERR_CNT_INVALID(x) | BIT_BCNERR_CNT_INVALID(v))

#define BIT_SHIFT_BCNERR_CNT_MAC			8
#define BIT_MASK_BCNERR_CNT_MAC			0xff
#define BIT_BCNERR_CNT_MAC(x)				(((x) & BIT_MASK_BCNERR_CNT_MAC) << BIT_SHIFT_BCNERR_CNT_MAC)
#define BITS_BCNERR_CNT_MAC				(BIT_MASK_BCNERR_CNT_MAC << BIT_SHIFT_BCNERR_CNT_MAC)
#define BIT_CLEAR_BCNERR_CNT_MAC(x)			((x) & (~BITS_BCNERR_CNT_MAC))
#define BIT_GET_BCNERR_CNT_MAC(x)			(((x) >> BIT_SHIFT_BCNERR_CNT_MAC) & BIT_MASK_BCNERR_CNT_MAC)
#define BIT_SET_BCNERR_CNT_MAC(x, v)			(BIT_CLEAR_BCNERR_CNT_MAC(x) | BIT_BCNERR_CNT_MAC(v))

#define BIT_SHIFT_BCNERR_CNT_CCA			0
#define BIT_MASK_BCNERR_CNT_CCA			0xff
#define BIT_BCNERR_CNT_CCA(x)				(((x) & BIT_MASK_BCNERR_CNT_CCA) << BIT_SHIFT_BCNERR_CNT_CCA)
#define BITS_BCNERR_CNT_CCA				(BIT_MASK_BCNERR_CNT_CCA << BIT_SHIFT_BCNERR_CNT_CCA)
#define BIT_CLEAR_BCNERR_CNT_CCA(x)			((x) & (~BITS_BCNERR_CNT_CCA))
#define BIT_GET_BCNERR_CNT_CCA(x)			(((x) >> BIT_SHIFT_BCNERR_CNT_CCA) & BIT_MASK_BCNERR_CNT_CCA)
#define BIT_SET_BCNERR_CNT_CCA(x, v)			(BIT_CLEAR_BCNERR_CNT_CCA(x) | BIT_BCNERR_CNT_CCA(v))

/* 2 REG_BCNERR_CNT_2			(Offset 0x05DC) */

#define BIT_SHIFT_BCNERR_CNT_EDCCA			0
#define BIT_MASK_BCNERR_CNT_EDCCA			0xff
#define BIT_BCNERR_CNT_EDCCA(x)			(((x) & BIT_MASK_BCNERR_CNT_EDCCA) << BIT_SHIFT_BCNERR_CNT_EDCCA)
#define BITS_BCNERR_CNT_EDCCA				(BIT_MASK_BCNERR_CNT_EDCCA << BIT_SHIFT_BCNERR_CNT_EDCCA)
#define BIT_CLEAR_BCNERR_CNT_EDCCA(x)			((x) & (~BITS_BCNERR_CNT_EDCCA))
#define BIT_GET_BCNERR_CNT_EDCCA(x)			(((x) >> BIT_SHIFT_BCNERR_CNT_EDCCA) & BIT_MASK_BCNERR_CNT_EDCCA)
#define BIT_SET_BCNERR_CNT_EDCCA(x, v)			(BIT_CLEAR_BCNERR_CNT_EDCCA(x) | BIT_BCNERR_CNT_EDCCA(v))

/* 2 REG_NOA_PARAM				(Offset 0x05E0) */

#define BIT_SHIFT_NOA_DURATION_V1			0
#define BIT_MASK_NOA_DURATION_V1			0xffffffffL
#define BIT_NOA_DURATION_V1(x)				(((x) & BIT_MASK_NOA_DURATION_V1) << BIT_SHIFT_NOA_DURATION_V1)
#define BITS_NOA_DURATION_V1				(BIT_MASK_NOA_DURATION_V1 << BIT_SHIFT_NOA_DURATION_V1)
#define BIT_CLEAR_NOA_DURATION_V1(x)			((x) & (~BITS_NOA_DURATION_V1))
#define BIT_GET_NOA_DURATION_V1(x)			(((x) >> BIT_SHIFT_NOA_DURATION_V1) & BIT_MASK_NOA_DURATION_V1)
#define BIT_SET_NOA_DURATION_V1(x, v)			(BIT_CLEAR_NOA_DURATION_V1(x) | BIT_NOA_DURATION_V1(v))

/* 2 REG_NOA_PARAM_1				(Offset 0x05E4) */

#define BIT_SHIFT_NOA_INTERVAL_V1			0
#define BIT_MASK_NOA_INTERVAL_V1			0xffffffffL
#define BIT_NOA_INTERVAL_V1(x)				(((x) & BIT_MASK_NOA_INTERVAL_V1) << BIT_SHIFT_NOA_INTERVAL_V1)
#define BITS_NOA_INTERVAL_V1				(BIT_MASK_NOA_INTERVAL_V1 << BIT_SHIFT_NOA_INTERVAL_V1)
#define BIT_CLEAR_NOA_INTERVAL_V1(x)			((x) & (~BITS_NOA_INTERVAL_V1))
#define BIT_GET_NOA_INTERVAL_V1(x)			(((x) >> BIT_SHIFT_NOA_INTERVAL_V1) & BIT_MASK_NOA_INTERVAL_V1)
#define BIT_SET_NOA_INTERVAL_V1(x, v)			(BIT_CLEAR_NOA_INTERVAL_V1(x) | BIT_NOA_INTERVAL_V1(v))

/* 2 REG_NOA_PARAM_2				(Offset 0x05E8) */

#define BIT_SHIFT_NOA_START_TIME_V1			0
#define BIT_MASK_NOA_START_TIME_V1			0xffffffffL
#define BIT_NOA_START_TIME_V1(x)			(((x) & BIT_MASK_NOA_START_TIME_V1) << BIT_SHIFT_NOA_START_TIME_V1)
#define BITS_NOA_START_TIME_V1				(BIT_MASK_NOA_START_TIME_V1 << BIT_SHIFT_NOA_START_TIME_V1)
#define BIT_CLEAR_NOA_START_TIME_V1(x)			((x) & (~BITS_NOA_START_TIME_V1))
#define BIT_GET_NOA_START_TIME_V1(x)			(((x) >> BIT_SHIFT_NOA_START_TIME_V1) & BIT_MASK_NOA_START_TIME_V1)
#define BIT_SET_NOA_START_TIME_V1(x, v)		(BIT_CLEAR_NOA_START_TIME_V1(x) | BIT_NOA_START_TIME_V1(v))

/* 2 REG_NOA_PARAM_3				(Offset 0x05EC) */

#define BIT_SHIFT_NOA_COUNT_V1				0
#define BIT_MASK_NOA_COUNT_V1				0xffffffffL
#define BIT_NOA_COUNT_V1(x)				(((x) & BIT_MASK_NOA_COUNT_V1) << BIT_SHIFT_NOA_COUNT_V1)
#define BITS_NOA_COUNT_V1				(BIT_MASK_NOA_COUNT_V1 << BIT_SHIFT_NOA_COUNT_V1)
#define BIT_CLEAR_NOA_COUNT_V1(x)			((x) & (~BITS_NOA_COUNT_V1))
#define BIT_GET_NOA_COUNT_V1(x)			(((x) >> BIT_SHIFT_NOA_COUNT_V1) & BIT_MASK_NOA_COUNT_V1)
#define BIT_SET_NOA_COUNT_V1(x, v)			(BIT_CLEAR_NOA_COUNT_V1(x) | BIT_NOA_COUNT_V1(v))

/* 2 REG_P2P_RST				(Offset 0x05F0) */

#define BIT_P2P2_PWR_RST1				BIT(5)
#define BIT_P2P2_PWR_RST0				BIT(4)
#define BIT_P2P1_PWR_RST1				BIT(3)
#define BIT_P2P1_PWR_RST0				BIT(2)
#define BIT_P2P_PWR_RST1_V1				BIT(1)
#define BIT_P2P_PWR_RST0_V1				BIT(0)

/* 2 REG_SCHEDULER_RST			(Offset 0x05F1) */

#define BIT_SYNC_CLI_ONCE_RIGHT_NOW			BIT(2)
#define BIT_SYNC_CLI_ONCE_BY_TBTT			BIT(1)
#define BIT_SCHEDULER_RST_V1				BIT(0)

/* 2 REG_SCH_DBG_VALUE			(Offset 0x05F4) */

#define BIT_SHIFT_SCH_DBG_VALUE			0
#define BIT_MASK_SCH_DBG_VALUE				0xffffffffL
#define BIT_SCH_DBG_VALUE(x)				(((x) & BIT_MASK_SCH_DBG_VALUE) << BIT_SHIFT_SCH_DBG_VALUE)
#define BITS_SCH_DBG_VALUE				(BIT_MASK_SCH_DBG_VALUE << BIT_SHIFT_SCH_DBG_VALUE)
#define BIT_CLEAR_SCH_DBG_VALUE(x)			((x) & (~BITS_SCH_DBG_VALUE))
#define BIT_GET_SCH_DBG_VALUE(x)			(((x) >> BIT_SHIFT_SCH_DBG_VALUE) & BIT_MASK_SCH_DBG_VALUE)
#define BIT_SET_SCH_DBG_VALUE(x, v)			(BIT_CLEAR_SCH_DBG_VALUE(x) | BIT_SCH_DBG_VALUE(v))

/* 2 REG_SCH_TXCMD				(Offset 0x05F8) */

#define BIT_SHIFT_SCH_TXCMD				0
#define BIT_MASK_SCH_TXCMD				0xffffffffL
#define BIT_SCH_TXCMD(x)				(((x) & BIT_MASK_SCH_TXCMD) << BIT_SHIFT_SCH_TXCMD)
#define BITS_SCH_TXCMD					(BIT_MASK_SCH_TXCMD << BIT_SHIFT_SCH_TXCMD)
#define BIT_CLEAR_SCH_TXCMD(x)				((x) & (~BITS_SCH_TXCMD))
#define BIT_GET_SCH_TXCMD(x)				(((x) >> BIT_SHIFT_SCH_TXCMD) & BIT_MASK_SCH_TXCMD)
#define BIT_SET_SCH_TXCMD(x, v)			(BIT_CLEAR_SCH_TXCMD(x) | BIT_SCH_TXCMD(v))

/* 2 REG_WMAC_CR				(Offset 0x0600) */

#define BIT_IC_MACPHY_M				BIT(0)

/* 2 REG_WMAC_FWPKT_CR			(Offset 0x0601) */

#define BIT_FWEN					BIT(7)
#define BIT_PHYSTS_PKT_CTRL				BIT(6)
#define BIT_APPHDR_MIDSRCH_FAIL			BIT(4)
#define BIT_FWPARSING_EN				BIT(3)

#define BIT_SHIFT_APPEND_MHDR_LEN			0
#define BIT_MASK_APPEND_MHDR_LEN			0x7
#define BIT_APPEND_MHDR_LEN(x)				(((x) & BIT_MASK_APPEND_MHDR_LEN) << BIT_SHIFT_APPEND_MHDR_LEN)
#define BITS_APPEND_MHDR_LEN				(BIT_MASK_APPEND_MHDR_LEN << BIT_SHIFT_APPEND_MHDR_LEN)
#define BIT_CLEAR_APPEND_MHDR_LEN(x)			((x) & (~BITS_APPEND_MHDR_LEN))
#define BIT_GET_APPEND_MHDR_LEN(x)			(((x) >> BIT_SHIFT_APPEND_MHDR_LEN) & BIT_MASK_APPEND_MHDR_LEN)
#define BIT_SET_APPEND_MHDR_LEN(x, v)			(BIT_CLEAR_APPEND_MHDR_LEN(x) | BIT_APPEND_MHDR_LEN(v))

/* 2 REG_FW_STS_FILTER			(Offset 0x0602) */

#define BIT_DATA_FW_STS_FILTER				BIT(2)
#define BIT_CTRL_FW_STS_FILTER				BIT(1)
#define BIT_MGNT_FW_STS_FILTER				BIT(0)

/* 2 REG_TCR					(Offset 0x0604) */

#define BIT_WMAC_EN_RTS_ADDR				BIT(31)
#define BIT_WMAC_DISABLE_CCK				BIT(30)
#define BIT_WMAC_RAW_LEN				BIT(29)
#define BIT_WMAC_NOTX_IN_RXNDP				BIT(28)
#define BIT_WMAC_EN_EOF				BIT(27)
#define BIT_WMAC_BF_SEL				BIT(26)
#define BIT_WMAC_ANTMODE_SEL				BIT(25)
#define BIT_WMAC_TCRPWRMGT_HWCTL			BIT(24)
#define BIT_WMAC_SMOOTH_VAL				BIT(23)
#define BIT_WMAC_EN_SCRAM_INC				BIT(22)
#define BIT_UNDERFLOWEN_CMPLEN_SEL			BIT(21)
#define BIT_FETCH_MPDU_AFTER_WSEC_RDY			BIT(20)
#define BIT_WMAC_TCR_EN_20MST				BIT(19)
#define BIT_WMAC_DIS_SIGTA				BIT(18)
#define BIT_WMAC_DIS_A2B0				BIT(17)
#define BIT_WMAC_MSK_SIGBCRC				BIT(16)
#define BIT_WMAC_TCR_ERRSTEN_3				BIT(15)
#define BIT_WMAC_TCR_ERRSTEN_2				BIT(14)
#define BIT_WMAC_TCR_ERRSTEN_1				BIT(13)
#define BIT_WMAC_TCR_ERRSTEN_0				BIT(12)
#define BIT_WMAC_TCR_TXSK_PERPKT			BIT(11)
#define BIT_ICV					BIT(10)
#define BIT_CFEND_FORMAT				BIT(9)
#define BIT_CRC					BIT(8)
#define BIT_WMAC_TCRPWRMGT_HWDATA_EN			BIT(7)
#define BIT_PWR_ST					BIT(6)
#define BIT_WMAC_TCR_UPD_TIMIE				BIT(5)
#define BIT_WMAC_TCR_UPD_HGQMD				BIT(4)
#define BIT_VHTSIGA1_TXPS				BIT(3)
#define BIT_PAD_SEL					BIT(2)
#define BIT_DIS_GCLK					BIT(1)
#define BIT_WMAC_TCRPWRMGT_HWACT_EN			BIT(0)

/* 2 REG_RCR					(Offset 0x0608) */

#define BIT_APP_FCS					BIT(31)
#define BIT_APP_MIC					BIT(30)
#define BIT_APP_ICV					BIT(29)
#define BIT_APP_PHYSTS					BIT(28)
#define BIT_APP_BASSN					BIT(27)
#define BIT_VHT_DACK					BIT(26)
#define BIT_TCPOFLD_EN					BIT(25)
#define BIT_ENMBID					BIT(24)
#define BIT_LSIGEN					BIT(23)
#define BIT_MFBEN					BIT(22)
#define BIT_DISCHKPPDLLEN				BIT(21)
#define BIT_PKTCTL_DLEN				BIT(20)
#define BIT_DISGCLK					BIT(19)
#define BIT_TIM_PARSER_EN				BIT(18)
#define BIT_BC_MD_EN					BIT(17)
#define BIT_UC_MD_EN					BIT(16)
#define BIT_RXSK_PERPKT				BIT(15)
#define BIT_HTC_LOC_CTRL				BIT(14)
#define BIT_ACK_WITH_CBSSID_DATA_OPTION		BIT(13)
#define BIT_RPFM_CAM_ENABLE				BIT(12)
#define BIT_TA_BCN					BIT(11)
#define BIT_DISDECMYPKT				BIT(10)
#define BIT_AICV					BIT(9)
#define BIT_ACRC32					BIT(8)
#define BIT_CBSSID_BCN					BIT(7)
#define BIT_CBSSID_DATA				BIT(6)
#define BIT_APWRMGT					BIT(5)
#define BIT_ADD3					BIT(4)
#define BIT_AB						BIT(3)
#define BIT_AM						BIT(2)
#define BIT_APM					BIT(1)
#define BIT_AAP					BIT(0)

/* 2 REG_RX_PKT_LIMIT			(Offset 0x060C) */

#define BIT_SHIFT_RXPKTLMT				0
#define BIT_MASK_RXPKTLMT				0x3f
#define BIT_RXPKTLMT(x)				(((x) & BIT_MASK_RXPKTLMT) << BIT_SHIFT_RXPKTLMT)
#define BITS_RXPKTLMT					(BIT_MASK_RXPKTLMT << BIT_SHIFT_RXPKTLMT)
#define BIT_CLEAR_RXPKTLMT(x)				((x) & (~BITS_RXPKTLMT))
#define BIT_GET_RXPKTLMT(x)				(((x) >> BIT_SHIFT_RXPKTLMT) & BIT_MASK_RXPKTLMT)
#define BIT_SET_RXPKTLMT(x, v)				(BIT_CLEAR_RXPKTLMT(x) | BIT_RXPKTLMT(v))

/* 2 REG_RX_DLK_TIME				(Offset 0x060D) */

#define BIT_SHIFT_RX_DLK_TIME				0
#define BIT_MASK_RX_DLK_TIME				0xff
#define BIT_RX_DLK_TIME(x)				(((x) & BIT_MASK_RX_DLK_TIME) << BIT_SHIFT_RX_DLK_TIME)
#define BITS_RX_DLK_TIME				(BIT_MASK_RX_DLK_TIME << BIT_SHIFT_RX_DLK_TIME)
#define BIT_CLEAR_RX_DLK_TIME(x)			((x) & (~BITS_RX_DLK_TIME))
#define BIT_GET_RX_DLK_TIME(x)				(((x) >> BIT_SHIFT_RX_DLK_TIME) & BIT_MASK_RX_DLK_TIME)
#define BIT_SET_RX_DLK_TIME(x, v)			(BIT_CLEAR_RX_DLK_TIME(x) | BIT_RX_DLK_TIME(v))

/* 2 REG_RX_DRVINFO_SZ			(Offset 0x060F) */

#define BIT_PHYSTS_PER_PKT_MODE			BIT(7)

#define BIT_SHIFT_DRVINFO_SZ_V1			0
#define BIT_MASK_DRVINFO_SZ_V1				0xf
#define BIT_DRVINFO_SZ_V1(x)				(((x) & BIT_MASK_DRVINFO_SZ_V1) << BIT_SHIFT_DRVINFO_SZ_V1)
#define BITS_DRVINFO_SZ_V1				(BIT_MASK_DRVINFO_SZ_V1 << BIT_SHIFT_DRVINFO_SZ_V1)
#define BIT_CLEAR_DRVINFO_SZ_V1(x)			((x) & (~BITS_DRVINFO_SZ_V1))
#define BIT_GET_DRVINFO_SZ_V1(x)			(((x) >> BIT_SHIFT_DRVINFO_SZ_V1) & BIT_MASK_DRVINFO_SZ_V1)
#define BIT_SET_DRVINFO_SZ_V1(x, v)			(BIT_CLEAR_DRVINFO_SZ_V1(x) | BIT_DRVINFO_SZ_V1(v))

/* 2 REG_MACID				(Offset 0x0610) */

#define BIT_SHIFT_MACID_V1				0
#define BIT_MASK_MACID_V1				0xffffffffL
#define BIT_MACID_V1(x)				(((x) & BIT_MASK_MACID_V1) << BIT_SHIFT_MACID_V1)
#define BITS_MACID_V1					(BIT_MASK_MACID_V1 << BIT_SHIFT_MACID_V1)
#define BIT_CLEAR_MACID_V1(x)				((x) & (~BITS_MACID_V1))
#define BIT_GET_MACID_V1(x)				(((x) >> BIT_SHIFT_MACID_V1) & BIT_MASK_MACID_V1)
#define BIT_SET_MACID_V1(x, v)				(BIT_CLEAR_MACID_V1(x) | BIT_MACID_V1(v))

/* 2 REG_MACID_H				(Offset 0x0614) */

#define BIT_SHIFT_MACID_H_V1				0
#define BIT_MASK_MACID_H_V1				0xffff
#define BIT_MACID_H_V1(x)				(((x) & BIT_MASK_MACID_H_V1) << BIT_SHIFT_MACID_H_V1)
#define BITS_MACID_H_V1				(BIT_MASK_MACID_H_V1 << BIT_SHIFT_MACID_H_V1)
#define BIT_CLEAR_MACID_H_V1(x)			((x) & (~BITS_MACID_H_V1))
#define BIT_GET_MACID_H_V1(x)				(((x) >> BIT_SHIFT_MACID_H_V1) & BIT_MASK_MACID_H_V1)
#define BIT_SET_MACID_H_V1(x, v)			(BIT_CLEAR_MACID_H_V1(x) | BIT_MACID_H_V1(v))

/* 2 REG_BSSID				(Offset 0x0618) */

#define BIT_SHIFT_BSSID_V1				0
#define BIT_MASK_BSSID_V1				0xffffffffL
#define BIT_BSSID_V1(x)				(((x) & BIT_MASK_BSSID_V1) << BIT_SHIFT_BSSID_V1)
#define BITS_BSSID_V1					(BIT_MASK_BSSID_V1 << BIT_SHIFT_BSSID_V1)
#define BIT_CLEAR_BSSID_V1(x)				((x) & (~BITS_BSSID_V1))
#define BIT_GET_BSSID_V1(x)				(((x) >> BIT_SHIFT_BSSID_V1) & BIT_MASK_BSSID_V1)
#define BIT_SET_BSSID_V1(x, v)				(BIT_CLEAR_BSSID_V1(x) | BIT_BSSID_V1(v))

#define BIT_SHIFT_BSSID_H_V1				0
#define BIT_MASK_BSSID_H_V1				0xffff
#define BIT_BSSID_H_V1(x)				(((x) & BIT_MASK_BSSID_H_V1) << BIT_SHIFT_BSSID_H_V1)
#define BITS_BSSID_H_V1				(BIT_MASK_BSSID_H_V1 << BIT_SHIFT_BSSID_H_V1)
#define BIT_CLEAR_BSSID_H_V1(x)			((x) & (~BITS_BSSID_H_V1))
#define BIT_GET_BSSID_H_V1(x)				(((x) >> BIT_SHIFT_BSSID_H_V1) & BIT_MASK_BSSID_H_V1)
#define BIT_SET_BSSID_H_V1(x, v)			(BIT_CLEAR_BSSID_H_V1(x) | BIT_BSSID_H_V1(v))

/* 2 REG_MAR					(Offset 0x0620) */

#define BIT_SHIFT_MAR_V1				0
#define BIT_MASK_MAR_V1				0xffffffffL
#define BIT_MAR_V1(x)					(((x) & BIT_MASK_MAR_V1) << BIT_SHIFT_MAR_V1)
#define BITS_MAR_V1					(BIT_MASK_MAR_V1 << BIT_SHIFT_MAR_V1)
#define BIT_CLEAR_MAR_V1(x)				((x) & (~BITS_MAR_V1))
#define BIT_GET_MAR_V1(x)				(((x) >> BIT_SHIFT_MAR_V1) & BIT_MASK_MAR_V1)
#define BIT_SET_MAR_V1(x, v)				(BIT_CLEAR_MAR_V1(x) | BIT_MAR_V1(v))

/* 2 REG_MAR_H				(Offset 0x0624) */

#define BIT_SHIFT_MAR_H_V1				0
#define BIT_MASK_MAR_H_V1				0xffffffffL
#define BIT_MAR_H_V1(x)				(((x) & BIT_MASK_MAR_H_V1) << BIT_SHIFT_MAR_H_V1)
#define BITS_MAR_H_V1					(BIT_MASK_MAR_H_V1 << BIT_SHIFT_MAR_H_V1)
#define BIT_CLEAR_MAR_H_V1(x)				((x) & (~BITS_MAR_H_V1))
#define BIT_GET_MAR_H_V1(x)				(((x) >> BIT_SHIFT_MAR_H_V1) & BIT_MASK_MAR_H_V1)
#define BIT_SET_MAR_H_V1(x, v)				(BIT_CLEAR_MAR_H_V1(x) | BIT_MAR_H_V1(v))

/* 2 REG_MBIDCAMCFG_1			(Offset 0x0628) */

#define BIT_SHIFT_MBIDCAM_RWDATA_L			0
#define BIT_MASK_MBIDCAM_RWDATA_L			0xffffffffL
#define BIT_MBIDCAM_RWDATA_L(x)			(((x) & BIT_MASK_MBIDCAM_RWDATA_L) << BIT_SHIFT_MBIDCAM_RWDATA_L)
#define BITS_MBIDCAM_RWDATA_L				(BIT_MASK_MBIDCAM_RWDATA_L << BIT_SHIFT_MBIDCAM_RWDATA_L)
#define BIT_CLEAR_MBIDCAM_RWDATA_L(x)			((x) & (~BITS_MBIDCAM_RWDATA_L))
#define BIT_GET_MBIDCAM_RWDATA_L(x)			(((x) >> BIT_SHIFT_MBIDCAM_RWDATA_L) & BIT_MASK_MBIDCAM_RWDATA_L)
#define BIT_SET_MBIDCAM_RWDATA_L(x, v)			(BIT_CLEAR_MBIDCAM_RWDATA_L(x) | BIT_MBIDCAM_RWDATA_L(v))

/* 2 REG_MBIDCAMCFG_2			(Offset 0x062C) */

#define BIT_MBIDCAM_POLL				BIT(31)
#define BIT_MBIDCAM_WT_EN				BIT(30)

#define BIT_SHIFT_MBIDCAM_ADDR_V1			24
#define BIT_MASK_MBIDCAM_ADDR_V1			0x3f
#define BIT_MBIDCAM_ADDR_V1(x)				(((x) & BIT_MASK_MBIDCAM_ADDR_V1) << BIT_SHIFT_MBIDCAM_ADDR_V1)
#define BITS_MBIDCAM_ADDR_V1				(BIT_MASK_MBIDCAM_ADDR_V1 << BIT_SHIFT_MBIDCAM_ADDR_V1)
#define BIT_CLEAR_MBIDCAM_ADDR_V1(x)			((x) & (~BITS_MBIDCAM_ADDR_V1))
#define BIT_GET_MBIDCAM_ADDR_V1(x)			(((x) >> BIT_SHIFT_MBIDCAM_ADDR_V1) & BIT_MASK_MBIDCAM_ADDR_V1)
#define BIT_SET_MBIDCAM_ADDR_V1(x, v)			(BIT_CLEAR_MBIDCAM_ADDR_V1(x) | BIT_MBIDCAM_ADDR_V1(v))

#define BIT_MBIDCAM_VALID				BIT(23)
#define BIT_LSIC_TXOP_EN				BIT(17)
#define BIT_CTS_EN					BIT(16)

#define BIT_SHIFT_MBIDCAM_RWDATA_H			0
#define BIT_MASK_MBIDCAM_RWDATA_H			0xffff
#define BIT_MBIDCAM_RWDATA_H(x)			(((x) & BIT_MASK_MBIDCAM_RWDATA_H) << BIT_SHIFT_MBIDCAM_RWDATA_H)
#define BITS_MBIDCAM_RWDATA_H				(BIT_MASK_MBIDCAM_RWDATA_H << BIT_SHIFT_MBIDCAM_RWDATA_H)
#define BIT_CLEAR_MBIDCAM_RWDATA_H(x)			((x) & (~BITS_MBIDCAM_RWDATA_H))
#define BIT_GET_MBIDCAM_RWDATA_H(x)			(((x) >> BIT_SHIFT_MBIDCAM_RWDATA_H) & BIT_MASK_MBIDCAM_RWDATA_H)
#define BIT_SET_MBIDCAM_RWDATA_H(x, v)			(BIT_CLEAR_MBIDCAM_RWDATA_H(x) | BIT_MBIDCAM_RWDATA_H(v))

/* 2 REG_WMAC_TCR_TSFT_OFS			(Offset 0x0630) */

#define BIT_SHIFT_WMAC_TCR_TSFT_OFS			0
#define BIT_MASK_WMAC_TCR_TSFT_OFS			0xffff
#define BIT_WMAC_TCR_TSFT_OFS(x)			(((x) & BIT_MASK_WMAC_TCR_TSFT_OFS) << BIT_SHIFT_WMAC_TCR_TSFT_OFS)
#define BITS_WMAC_TCR_TSFT_OFS				(BIT_MASK_WMAC_TCR_TSFT_OFS << BIT_SHIFT_WMAC_TCR_TSFT_OFS)
#define BIT_CLEAR_WMAC_TCR_TSFT_OFS(x)			((x) & (~BITS_WMAC_TCR_TSFT_OFS))
#define BIT_GET_WMAC_TCR_TSFT_OFS(x)			(((x) >> BIT_SHIFT_WMAC_TCR_TSFT_OFS) & BIT_MASK_WMAC_TCR_TSFT_OFS)
#define BIT_SET_WMAC_TCR_TSFT_OFS(x, v)		(BIT_CLEAR_WMAC_TCR_TSFT_OFS(x) | BIT_WMAC_TCR_TSFT_OFS(v))

/* 2 REG_UDF_THSD				(Offset 0x0632) */

#define BIT_UDF_THSD_V1				BIT(7)

#define BIT_SHIFT_UDF_THSD_VALUE			0
#define BIT_MASK_UDF_THSD_VALUE			0x7f
#define BIT_UDF_THSD_VALUE(x)				(((x) & BIT_MASK_UDF_THSD_VALUE) << BIT_SHIFT_UDF_THSD_VALUE)
#define BITS_UDF_THSD_VALUE				(BIT_MASK_UDF_THSD_VALUE << BIT_SHIFT_UDF_THSD_VALUE)
#define BIT_CLEAR_UDF_THSD_VALUE(x)			((x) & (~BITS_UDF_THSD_VALUE))
#define BIT_GET_UDF_THSD_VALUE(x)			(((x) >> BIT_SHIFT_UDF_THSD_VALUE) & BIT_MASK_UDF_THSD_VALUE)
#define BIT_SET_UDF_THSD_VALUE(x, v)			(BIT_CLEAR_UDF_THSD_VALUE(x) | BIT_UDF_THSD_VALUE(v))

/* 2 REG_ZLD_NUM				(Offset 0x0633) */

#define BIT_SHIFT_ZLD_NUM				0
#define BIT_MASK_ZLD_NUM				0xff
#define BIT_ZLD_NUM(x)					(((x) & BIT_MASK_ZLD_NUM) << BIT_SHIFT_ZLD_NUM)
#define BITS_ZLD_NUM					(BIT_MASK_ZLD_NUM << BIT_SHIFT_ZLD_NUM)
#define BIT_CLEAR_ZLD_NUM(x)				((x) & (~BITS_ZLD_NUM))
#define BIT_GET_ZLD_NUM(x)				(((x) >> BIT_SHIFT_ZLD_NUM) & BIT_MASK_ZLD_NUM)
#define BIT_SET_ZLD_NUM(x, v)				(BIT_CLEAR_ZLD_NUM(x) | BIT_ZLD_NUM(v))

/* 2 REG_STMP_THSD				(Offset 0x0634) */

#define BIT_SHIFT_STMP_THSD				0
#define BIT_MASK_STMP_THSD				0xff
#define BIT_STMP_THSD(x)				(((x) & BIT_MASK_STMP_THSD) << BIT_SHIFT_STMP_THSD)
#define BITS_STMP_THSD					(BIT_MASK_STMP_THSD << BIT_SHIFT_STMP_THSD)
#define BIT_CLEAR_STMP_THSD(x)				((x) & (~BITS_STMP_THSD))
#define BIT_GET_STMP_THSD(x)				(((x) >> BIT_SHIFT_STMP_THSD) & BIT_MASK_STMP_THSD)
#define BIT_SET_STMP_THSD(x, v)			(BIT_CLEAR_STMP_THSD(x) | BIT_STMP_THSD(v))

/* 2 REG_WMAC_TXTIMEOUT			(Offset 0x0635) */

#define BIT_SHIFT_WMAC_TXTIMEOUT			0
#define BIT_MASK_WMAC_TXTIMEOUT			0xff
#define BIT_WMAC_TXTIMEOUT(x)				(((x) & BIT_MASK_WMAC_TXTIMEOUT) << BIT_SHIFT_WMAC_TXTIMEOUT)
#define BITS_WMAC_TXTIMEOUT				(BIT_MASK_WMAC_TXTIMEOUT << BIT_SHIFT_WMAC_TXTIMEOUT)
#define BIT_CLEAR_WMAC_TXTIMEOUT(x)			((x) & (~BITS_WMAC_TXTIMEOUT))
#define BIT_GET_WMAC_TXTIMEOUT(x)			(((x) >> BIT_SHIFT_WMAC_TXTIMEOUT) & BIT_MASK_WMAC_TXTIMEOUT)
#define BIT_SET_WMAC_TXTIMEOUT(x, v)			(BIT_CLEAR_WMAC_TXTIMEOUT(x) | BIT_WMAC_TXTIMEOUT(v))

/* 2 REG_USTIME_EDCA				(Offset 0x0638) */

#define BIT_SHIFT_USTIME_EDCA				0
#define BIT_MASK_USTIME_EDCA				0xff
#define BIT_USTIME_EDCA(x)				(((x) & BIT_MASK_USTIME_EDCA) << BIT_SHIFT_USTIME_EDCA)
#define BITS_USTIME_EDCA				(BIT_MASK_USTIME_EDCA << BIT_SHIFT_USTIME_EDCA)
#define BIT_CLEAR_USTIME_EDCA(x)			((x) & (~BITS_USTIME_EDCA))
#define BIT_GET_USTIME_EDCA(x)				(((x) >> BIT_SHIFT_USTIME_EDCA) & BIT_MASK_USTIME_EDCA)
#define BIT_SET_USTIME_EDCA(x, v)			(BIT_CLEAR_USTIME_EDCA(x) | BIT_USTIME_EDCA(v))

/* 2 REG_ACKTO_CCK				(Offset 0x0639) */

#define BIT_SHIFT_ACKTO_CCK				0
#define BIT_MASK_ACKTO_CCK				0xff
#define BIT_ACKTO_CCK(x)				(((x) & BIT_MASK_ACKTO_CCK) << BIT_SHIFT_ACKTO_CCK)
#define BITS_ACKTO_CCK					(BIT_MASK_ACKTO_CCK << BIT_SHIFT_ACKTO_CCK)
#define BIT_CLEAR_ACKTO_CCK(x)				((x) & (~BITS_ACKTO_CCK))
#define BIT_GET_ACKTO_CCK(x)				(((x) >> BIT_SHIFT_ACKTO_CCK) & BIT_MASK_ACKTO_CCK)
#define BIT_SET_ACKTO_CCK(x, v)			(BIT_CLEAR_ACKTO_CCK(x) | BIT_ACKTO_CCK(v))

/* 2 REG_MAC_SPEC_SIFS			(Offset 0x063A) */

#define BIT_SHIFT_SPEC_SIFS_OFDM			8
#define BIT_MASK_SPEC_SIFS_OFDM			0xff
#define BIT_SPEC_SIFS_OFDM(x)				(((x) & BIT_MASK_SPEC_SIFS_OFDM) << BIT_SHIFT_SPEC_SIFS_OFDM)
#define BITS_SPEC_SIFS_OFDM				(BIT_MASK_SPEC_SIFS_OFDM << BIT_SHIFT_SPEC_SIFS_OFDM)
#define BIT_CLEAR_SPEC_SIFS_OFDM(x)			((x) & (~BITS_SPEC_SIFS_OFDM))
#define BIT_GET_SPEC_SIFS_OFDM(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_OFDM) & BIT_MASK_SPEC_SIFS_OFDM)
#define BIT_SET_SPEC_SIFS_OFDM(x, v)			(BIT_CLEAR_SPEC_SIFS_OFDM(x) | BIT_SPEC_SIFS_OFDM(v))

#define BIT_SHIFT_SPEC_SIFS_CCK			0
#define BIT_MASK_SPEC_SIFS_CCK				0xff
#define BIT_SPEC_SIFS_CCK(x)				(((x) & BIT_MASK_SPEC_SIFS_CCK) << BIT_SHIFT_SPEC_SIFS_CCK)
#define BITS_SPEC_SIFS_CCK				(BIT_MASK_SPEC_SIFS_CCK << BIT_SHIFT_SPEC_SIFS_CCK)
#define BIT_CLEAR_SPEC_SIFS_CCK(x)			((x) & (~BITS_SPEC_SIFS_CCK))
#define BIT_GET_SPEC_SIFS_CCK(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_CCK) & BIT_MASK_SPEC_SIFS_CCK)
#define BIT_SET_SPEC_SIFS_CCK(x, v)			(BIT_CLEAR_SPEC_SIFS_CCK(x) | BIT_SPEC_SIFS_CCK(v))

/* 2 REG_RESP_SIFS_CCK			(Offset 0x063C) */

#define BIT_SHIFT_SIFS_R2T_CCK				8
#define BIT_MASK_SIFS_R2T_CCK				0xff
#define BIT_SIFS_R2T_CCK(x)				(((x) & BIT_MASK_SIFS_R2T_CCK) << BIT_SHIFT_SIFS_R2T_CCK)
#define BITS_SIFS_R2T_CCK				(BIT_MASK_SIFS_R2T_CCK << BIT_SHIFT_SIFS_R2T_CCK)
#define BIT_CLEAR_SIFS_R2T_CCK(x)			((x) & (~BITS_SIFS_R2T_CCK))
#define BIT_GET_SIFS_R2T_CCK(x)			(((x) >> BIT_SHIFT_SIFS_R2T_CCK) & BIT_MASK_SIFS_R2T_CCK)
#define BIT_SET_SIFS_R2T_CCK(x, v)			(BIT_CLEAR_SIFS_R2T_CCK(x) | BIT_SIFS_R2T_CCK(v))

#define BIT_SHIFT_SIFS_T2T_CCK				0
#define BIT_MASK_SIFS_T2T_CCK				0xff
#define BIT_SIFS_T2T_CCK(x)				(((x) & BIT_MASK_SIFS_T2T_CCK) << BIT_SHIFT_SIFS_T2T_CCK)
#define BITS_SIFS_T2T_CCK				(BIT_MASK_SIFS_T2T_CCK << BIT_SHIFT_SIFS_T2T_CCK)
#define BIT_CLEAR_SIFS_T2T_CCK(x)			((x) & (~BITS_SIFS_T2T_CCK))
#define BIT_GET_SIFS_T2T_CCK(x)			(((x) >> BIT_SHIFT_SIFS_T2T_CCK) & BIT_MASK_SIFS_T2T_CCK)
#define BIT_SET_SIFS_T2T_CCK(x, v)			(BIT_CLEAR_SIFS_T2T_CCK(x) | BIT_SIFS_T2T_CCK(v))

/* 2 REG_RESP_SIFS_OFDM			(Offset 0x063E) */

#define BIT_SHIFT_SIFS_R2T_OFDM			8
#define BIT_MASK_SIFS_R2T_OFDM				0xff
#define BIT_SIFS_R2T_OFDM(x)				(((x) & BIT_MASK_SIFS_R2T_OFDM) << BIT_SHIFT_SIFS_R2T_OFDM)
#define BITS_SIFS_R2T_OFDM				(BIT_MASK_SIFS_R2T_OFDM << BIT_SHIFT_SIFS_R2T_OFDM)
#define BIT_CLEAR_SIFS_R2T_OFDM(x)			((x) & (~BITS_SIFS_R2T_OFDM))
#define BIT_GET_SIFS_R2T_OFDM(x)			(((x) >> BIT_SHIFT_SIFS_R2T_OFDM) & BIT_MASK_SIFS_R2T_OFDM)
#define BIT_SET_SIFS_R2T_OFDM(x, v)			(BIT_CLEAR_SIFS_R2T_OFDM(x) | BIT_SIFS_R2T_OFDM(v))

#define BIT_SHIFT_SIFS_T2T_OFDM			0
#define BIT_MASK_SIFS_T2T_OFDM				0xff
#define BIT_SIFS_T2T_OFDM(x)				(((x) & BIT_MASK_SIFS_T2T_OFDM) << BIT_SHIFT_SIFS_T2T_OFDM)
#define BITS_SIFS_T2T_OFDM				(BIT_MASK_SIFS_T2T_OFDM << BIT_SHIFT_SIFS_T2T_OFDM)
#define BIT_CLEAR_SIFS_T2T_OFDM(x)			((x) & (~BITS_SIFS_T2T_OFDM))
#define BIT_GET_SIFS_T2T_OFDM(x)			(((x) >> BIT_SHIFT_SIFS_T2T_OFDM) & BIT_MASK_SIFS_T2T_OFDM)
#define BIT_SET_SIFS_T2T_OFDM(x, v)			(BIT_CLEAR_SIFS_T2T_OFDM(x) | BIT_SIFS_T2T_OFDM(v))

/* 2 REG_ACKTO				(Offset 0x0640) */

#define BIT_SHIFT_ACKTO				0
#define BIT_MASK_ACKTO					0xff
#define BIT_ACKTO(x)					(((x) & BIT_MASK_ACKTO) << BIT_SHIFT_ACKTO)
#define BITS_ACKTO					(BIT_MASK_ACKTO << BIT_SHIFT_ACKTO)
#define BIT_CLEAR_ACKTO(x)				((x) & (~BITS_ACKTO))
#define BIT_GET_ACKTO(x)				(((x) >> BIT_SHIFT_ACKTO) & BIT_MASK_ACKTO)
#define BIT_SET_ACKTO(x, v)				(BIT_CLEAR_ACKTO(x) | BIT_ACKTO(v))

/* 2 REG_CTS2TO				(Offset 0x0641) */

#define BIT_SHIFT_CTS2TO				0
#define BIT_MASK_CTS2TO				0xff
#define BIT_CTS2TO(x)					(((x) & BIT_MASK_CTS2TO) << BIT_SHIFT_CTS2TO)
#define BITS_CTS2TO					(BIT_MASK_CTS2TO << BIT_SHIFT_CTS2TO)
#define BIT_CLEAR_CTS2TO(x)				((x) & (~BITS_CTS2TO))
#define BIT_GET_CTS2TO(x)				(((x) >> BIT_SHIFT_CTS2TO) & BIT_MASK_CTS2TO)
#define BIT_SET_CTS2TO(x, v)				(BIT_CLEAR_CTS2TO(x) | BIT_CTS2TO(v))

/* 2 REG_EIFS				(Offset 0x0642) */

#define BIT_SHIFT_EIFS					0
#define BIT_MASK_EIFS					0xffff
#define BIT_EIFS(x)					(((x) & BIT_MASK_EIFS) << BIT_SHIFT_EIFS)
#define BITS_EIFS					(BIT_MASK_EIFS << BIT_SHIFT_EIFS)
#define BIT_CLEAR_EIFS(x)				((x) & (~BITS_EIFS))
#define BIT_GET_EIFS(x)				(((x) >> BIT_SHIFT_EIFS) & BIT_MASK_EIFS)
#define BIT_SET_EIFS(x, v)				(BIT_CLEAR_EIFS(x) | BIT_EIFS(v))

/* 2 REG_RPFM_MAP0				(Offset 0x0644) */

#define BIT_MGT_RPFM15EN				BIT(15)
#define BIT_MGT_RPFM14EN				BIT(14)
#define BIT_MGT_RPFM13EN				BIT(13)
#define BIT_MGT_RPFM12EN				BIT(12)
#define BIT_MGT_RPFM11EN				BIT(11)
#define BIT_MGT_RPFM10EN				BIT(10)
#define BIT_MGT_RPFM9EN				BIT(9)
#define BIT_MGT_RPFM8EN				BIT(8)
#define BIT_MGT_RPFM7EN				BIT(7)
#define BIT_MGT_RPFM6EN				BIT(6)
#define BIT_MGT_RPFM5EN				BIT(5)
#define BIT_MGT_RPFM4EN				BIT(4)
#define BIT_MGT_RPFM3EN				BIT(3)
#define BIT_MGT_RPFM2EN				BIT(2)
#define BIT_MGT_RPFM1EN				BIT(1)
#define BIT_MGT_RPFM0EN				BIT(0)

/* 2 REG_RPFM_MAP1_V1			(Offset 0x0646) */

#define BIT_DATA_RPFM15EN				BIT(15)
#define BIT_DATA_RPFM14EN				BIT(14)
#define BIT_DATA_RPFM13EN				BIT(13)
#define BIT_DATA_RPFM12EN				BIT(12)
#define BIT_DATA_RPFM11EN				BIT(11)
#define BIT_DATA_RPFM10EN				BIT(10)
#define BIT_DATA_RPFM9EN				BIT(9)
#define BIT_DATA_RPFM8EN				BIT(8)
#define BIT_DATA_RPFM7EN				BIT(7)
#define BIT_DATA_RPFM6EN				BIT(6)
#define BIT_DATA_RPFM5EN				BIT(5)
#define BIT_DATA_RPFM4EN				BIT(4)
#define BIT_DATA_RPFM3EN				BIT(3)
#define BIT_DATA_RPFM2EN				BIT(2)
#define BIT_DATA_RPFM1EN				BIT(1)
#define BIT_DATA_RPFM0EN				BIT(0)

/* 2 REG_RPFM_CAM_CMD			(Offset 0x0648) */

#define BIT_RPFM_CAM_POLLING				BIT(31)
#define BIT_RPFM_CAM_CLR				BIT(30)
#define BIT_RPFM_CAM_WE				BIT(16)

#define BIT_SHIFT_RPFM_CAM_ADDR			0
#define BIT_MASK_RPFM_CAM_ADDR				0x7f
#define BIT_RPFM_CAM_ADDR(x)				(((x) & BIT_MASK_RPFM_CAM_ADDR) << BIT_SHIFT_RPFM_CAM_ADDR)
#define BITS_RPFM_CAM_ADDR				(BIT_MASK_RPFM_CAM_ADDR << BIT_SHIFT_RPFM_CAM_ADDR)
#define BIT_CLEAR_RPFM_CAM_ADDR(x)			((x) & (~BITS_RPFM_CAM_ADDR))
#define BIT_GET_RPFM_CAM_ADDR(x)			(((x) >> BIT_SHIFT_RPFM_CAM_ADDR) & BIT_MASK_RPFM_CAM_ADDR)
#define BIT_SET_RPFM_CAM_ADDR(x, v)			(BIT_CLEAR_RPFM_CAM_ADDR(x) | BIT_RPFM_CAM_ADDR(v))

/* 2 REG_RPFM_CAM_RWD			(Offset 0x064C) */

#define BIT_SHIFT_RPFM_CAM_RWD				0
#define BIT_MASK_RPFM_CAM_RWD				0xffffffffL
#define BIT_RPFM_CAM_RWD(x)				(((x) & BIT_MASK_RPFM_CAM_RWD) << BIT_SHIFT_RPFM_CAM_RWD)
#define BITS_RPFM_CAM_RWD				(BIT_MASK_RPFM_CAM_RWD << BIT_SHIFT_RPFM_CAM_RWD)
#define BIT_CLEAR_RPFM_CAM_RWD(x)			((x) & (~BITS_RPFM_CAM_RWD))
#define BIT_GET_RPFM_CAM_RWD(x)			(((x) >> BIT_SHIFT_RPFM_CAM_RWD) & BIT_MASK_RPFM_CAM_RWD)
#define BIT_SET_RPFM_CAM_RWD(x, v)			(BIT_CLEAR_RPFM_CAM_RWD(x) | BIT_RPFM_CAM_RWD(v))

/* 2 REG_NAV_CTRL				(Offset 0x0650) */

#define BIT_SHIFT_NAV_UPPER				16
#define BIT_MASK_NAV_UPPER				0xff
#define BIT_NAV_UPPER(x)				(((x) & BIT_MASK_NAV_UPPER) << BIT_SHIFT_NAV_UPPER)
#define BITS_NAV_UPPER					(BIT_MASK_NAV_UPPER << BIT_SHIFT_NAV_UPPER)
#define BIT_CLEAR_NAV_UPPER(x)				((x) & (~BITS_NAV_UPPER))
#define BIT_GET_NAV_UPPER(x)				(((x) >> BIT_SHIFT_NAV_UPPER) & BIT_MASK_NAV_UPPER)
#define BIT_SET_NAV_UPPER(x, v)			(BIT_CLEAR_NAV_UPPER(x) | BIT_NAV_UPPER(v))

#define BIT_SHIFT_RXMYRTS_NAV				8
#define BIT_MASK_RXMYRTS_NAV				0xf
#define BIT_RXMYRTS_NAV(x)				(((x) & BIT_MASK_RXMYRTS_NAV) << BIT_SHIFT_RXMYRTS_NAV)
#define BITS_RXMYRTS_NAV				(BIT_MASK_RXMYRTS_NAV << BIT_SHIFT_RXMYRTS_NAV)
#define BIT_CLEAR_RXMYRTS_NAV(x)			((x) & (~BITS_RXMYRTS_NAV))
#define BIT_GET_RXMYRTS_NAV(x)				(((x) >> BIT_SHIFT_RXMYRTS_NAV) & BIT_MASK_RXMYRTS_NAV)
#define BIT_SET_RXMYRTS_NAV(x, v)			(BIT_CLEAR_RXMYRTS_NAV(x) | BIT_RXMYRTS_NAV(v))

#define BIT_SHIFT_RTSRST				0
#define BIT_MASK_RTSRST				0xff
#define BIT_RTSRST(x)					(((x) & BIT_MASK_RTSRST) << BIT_SHIFT_RTSRST)
#define BITS_RTSRST					(BIT_MASK_RTSRST << BIT_SHIFT_RTSRST)
#define BIT_CLEAR_RTSRST(x)				((x) & (~BITS_RTSRST))
#define BIT_GET_RTSRST(x)				(((x) >> BIT_SHIFT_RTSRST) & BIT_MASK_RTSRST)
#define BIT_SET_RTSRST(x, v)				(BIT_CLEAR_RTSRST(x) | BIT_RTSRST(v))

/* 2 REG_BACAMCMD				(Offset 0x0654) */

#define BIT_BACAM_POLL					BIT(31)
#define BIT_BACAM_RST					BIT(17)
#define BIT_BACAM_RW					BIT(16)

#define BIT_SHIFT_TXSBM				14
#define BIT_MASK_TXSBM					0x3
#define BIT_TXSBM(x)					(((x) & BIT_MASK_TXSBM) << BIT_SHIFT_TXSBM)
#define BITS_TXSBM					(BIT_MASK_TXSBM << BIT_SHIFT_TXSBM)
#define BIT_CLEAR_TXSBM(x)				((x) & (~BITS_TXSBM))
#define BIT_GET_TXSBM(x)				(((x) >> BIT_SHIFT_TXSBM) & BIT_MASK_TXSBM)
#define BIT_SET_TXSBM(x, v)				(BIT_CLEAR_TXSBM(x) | BIT_TXSBM(v))

#define BIT_SHIFT_BACAM_ADDR				0
#define BIT_MASK_BACAM_ADDR				0x3f
#define BIT_BACAM_ADDR(x)				(((x) & BIT_MASK_BACAM_ADDR) << BIT_SHIFT_BACAM_ADDR)
#define BITS_BACAM_ADDR				(BIT_MASK_BACAM_ADDR << BIT_SHIFT_BACAM_ADDR)
#define BIT_CLEAR_BACAM_ADDR(x)			((x) & (~BITS_BACAM_ADDR))
#define BIT_GET_BACAM_ADDR(x)				(((x) >> BIT_SHIFT_BACAM_ADDR) & BIT_MASK_BACAM_ADDR)
#define BIT_SET_BACAM_ADDR(x, v)			(BIT_CLEAR_BACAM_ADDR(x) | BIT_BACAM_ADDR(v))

/* 2 REG_BACAMCONTENT			(Offset 0x0658) */

#define BIT_SHIFT_BA_CONTENT_L				0
#define BIT_MASK_BA_CONTENT_L				0xffffffffL
#define BIT_BA_CONTENT_L(x)				(((x) & BIT_MASK_BA_CONTENT_L) << BIT_SHIFT_BA_CONTENT_L)
#define BITS_BA_CONTENT_L				(BIT_MASK_BA_CONTENT_L << BIT_SHIFT_BA_CONTENT_L)
#define BIT_CLEAR_BA_CONTENT_L(x)			((x) & (~BITS_BA_CONTENT_L))
#define BIT_GET_BA_CONTENT_L(x)			(((x) >> BIT_SHIFT_BA_CONTENT_L) & BIT_MASK_BA_CONTENT_L)
#define BIT_SET_BA_CONTENT_L(x, v)			(BIT_CLEAR_BA_CONTENT_L(x) | BIT_BA_CONTENT_L(v))

/* 2 REG_BACAMCONTENT_H			(Offset 0x065C) */

#define BIT_SHIFT_BA_CONTENT_H				0
#define BIT_MASK_BA_CONTENT_H				0xffffffffL
#define BIT_BA_CONTENT_H(x)				(((x) & BIT_MASK_BA_CONTENT_H) << BIT_SHIFT_BA_CONTENT_H)
#define BITS_BA_CONTENT_H				(BIT_MASK_BA_CONTENT_H << BIT_SHIFT_BA_CONTENT_H)
#define BIT_CLEAR_BA_CONTENT_H(x)			((x) & (~BITS_BA_CONTENT_H))
#define BIT_GET_BA_CONTENT_H(x)			(((x) >> BIT_SHIFT_BA_CONTENT_H) & BIT_MASK_BA_CONTENT_H)
#define BIT_SET_BA_CONTENT_H(x, v)			(BIT_CLEAR_BA_CONTENT_H(x) | BIT_BA_CONTENT_H(v))

/* 2 REG_LBDLY				(Offset 0x0660) */

#define BIT_SHIFT_LBDLY				0
#define BIT_MASK_LBDLY					0x1f
#define BIT_LBDLY(x)					(((x) & BIT_MASK_LBDLY) << BIT_SHIFT_LBDLY)
#define BITS_LBDLY					(BIT_MASK_LBDLY << BIT_SHIFT_LBDLY)
#define BIT_CLEAR_LBDLY(x)				((x) & (~BITS_LBDLY))
#define BIT_GET_LBDLY(x)				(((x) >> BIT_SHIFT_LBDLY) & BIT_MASK_LBDLY)
#define BIT_SET_LBDLY(x, v)				(BIT_CLEAR_LBDLY(x) | BIT_LBDLY(v))

/* 2 REG_WMAC_BACAM_RPMEN			(Offset 0x0661) */

#define BIT_SHIFT_BITMAP_SSNBK_COUNTER			2
#define BIT_MASK_BITMAP_SSNBK_COUNTER			0x3f
#define BIT_BITMAP_SSNBK_COUNTER(x)			(((x) & BIT_MASK_BITMAP_SSNBK_COUNTER) << BIT_SHIFT_BITMAP_SSNBK_COUNTER)
#define BITS_BITMAP_SSNBK_COUNTER			(BIT_MASK_BITMAP_SSNBK_COUNTER << BIT_SHIFT_BITMAP_SSNBK_COUNTER)
#define BIT_CLEAR_BITMAP_SSNBK_COUNTER(x)		((x) & (~BITS_BITMAP_SSNBK_COUNTER))
#define BIT_GET_BITMAP_SSNBK_COUNTER(x)		(((x) >> BIT_SHIFT_BITMAP_SSNBK_COUNTER) & BIT_MASK_BITMAP_SSNBK_COUNTER)
#define BIT_SET_BITMAP_SSNBK_COUNTER(x, v)		(BIT_CLEAR_BITMAP_SSNBK_COUNTER(x) | BIT_BITMAP_SSNBK_COUNTER(v))

#define BIT_BITMAP_EN					BIT(1)
#define BIT_WMAC_BACAM_RPMEN				BIT(0)

/* 2 REG_TX_RX				(Offset 0x0662) */

#define BIT_SHIFT_RXPKT_TYPE				2
#define BIT_MASK_RXPKT_TYPE				0x3f
#define BIT_RXPKT_TYPE(x)				(((x) & BIT_MASK_RXPKT_TYPE) << BIT_SHIFT_RXPKT_TYPE)
#define BITS_RXPKT_TYPE				(BIT_MASK_RXPKT_TYPE << BIT_SHIFT_RXPKT_TYPE)
#define BIT_CLEAR_RXPKT_TYPE(x)			((x) & (~BITS_RXPKT_TYPE))
#define BIT_GET_RXPKT_TYPE(x)				(((x) >> BIT_SHIFT_RXPKT_TYPE) & BIT_MASK_RXPKT_TYPE)
#define BIT_SET_RXPKT_TYPE(x, v)			(BIT_CLEAR_RXPKT_TYPE(x) | BIT_RXPKT_TYPE(v))

#define BIT_TXACT_IND					BIT(1)
#define BIT_RXACT_IND					BIT(0)

/* 2 REG_WMAC_BITMAP_CTL			(Offset 0x0663) */

#define BIT_BITMAP_VO					BIT(7)
#define BIT_BITMAP_VI					BIT(6)
#define BIT_BITMAP_BE					BIT(5)
#define BIT_BITMAP_BK					BIT(4)

#define BIT_SHIFT_BITMAP_CONDITION			2
#define BIT_MASK_BITMAP_CONDITION			0x3
#define BIT_BITMAP_CONDITION(x)			(((x) & BIT_MASK_BITMAP_CONDITION) << BIT_SHIFT_BITMAP_CONDITION)
#define BITS_BITMAP_CONDITION				(BIT_MASK_BITMAP_CONDITION << BIT_SHIFT_BITMAP_CONDITION)
#define BIT_CLEAR_BITMAP_CONDITION(x)			((x) & (~BITS_BITMAP_CONDITION))
#define BIT_GET_BITMAP_CONDITION(x)			(((x) >> BIT_SHIFT_BITMAP_CONDITION) & BIT_MASK_BITMAP_CONDITION)
#define BIT_SET_BITMAP_CONDITION(x, v)			(BIT_CLEAR_BITMAP_CONDITION(x) | BIT_BITMAP_CONDITION(v))

#define BIT_BITMAP_SSNBK_COUNTER_CLR			BIT(1)
#define BIT_BITMAP_FORCE				BIT(0)

/* 2 REG_RXERR_RPT				(Offset 0x0664) */

#define BIT_SHIFT_RXERR_RPT_SEL_V1_3_0			28
#define BIT_MASK_RXERR_RPT_SEL_V1_3_0			0xf
#define BIT_RXERR_RPT_SEL_V1_3_0(x)			(((x) & BIT_MASK_RXERR_RPT_SEL_V1_3_0) << BIT_SHIFT_RXERR_RPT_SEL_V1_3_0)
#define BITS_RXERR_RPT_SEL_V1_3_0			(BIT_MASK_RXERR_RPT_SEL_V1_3_0 << BIT_SHIFT_RXERR_RPT_SEL_V1_3_0)
#define BIT_CLEAR_RXERR_RPT_SEL_V1_3_0(x)		((x) & (~BITS_RXERR_RPT_SEL_V1_3_0))
#define BIT_GET_RXERR_RPT_SEL_V1_3_0(x)		(((x) >> BIT_SHIFT_RXERR_RPT_SEL_V1_3_0) & BIT_MASK_RXERR_RPT_SEL_V1_3_0)
#define BIT_SET_RXERR_RPT_SEL_V1_3_0(x, v)		(BIT_CLEAR_RXERR_RPT_SEL_V1_3_0(x) | BIT_RXERR_RPT_SEL_V1_3_0(v))

#define BIT_RXERR_RPT_RST				BIT(27)
#define BIT_RXERR_RPT_SEL_V1_4				BIT(26)

#define BIT_SHIFT_UD_SELECT_BSSID_2_1			24
#define BIT_MASK_UD_SELECT_BSSID_2_1			0x3
#define BIT_UD_SELECT_BSSID_2_1(x)			(((x) & BIT_MASK_UD_SELECT_BSSID_2_1) << BIT_SHIFT_UD_SELECT_BSSID_2_1)
#define BITS_UD_SELECT_BSSID_2_1			(BIT_MASK_UD_SELECT_BSSID_2_1 << BIT_SHIFT_UD_SELECT_BSSID_2_1)
#define BIT_CLEAR_UD_SELECT_BSSID_2_1(x)		((x) & (~BITS_UD_SELECT_BSSID_2_1))
#define BIT_GET_UD_SELECT_BSSID_2_1(x)			(((x) >> BIT_SHIFT_UD_SELECT_BSSID_2_1) & BIT_MASK_UD_SELECT_BSSID_2_1)
#define BIT_SET_UD_SELECT_BSSID_2_1(x, v)		(BIT_CLEAR_UD_SELECT_BSSID_2_1(x) | BIT_UD_SELECT_BSSID_2_1(v))

#define BIT_W1S					BIT(23)
#define BIT_UD_SELECT_BSSID_0				BIT(22)

#define BIT_SHIFT_UD_SUB_TYPE				18
#define BIT_MASK_UD_SUB_TYPE				0xf
#define BIT_UD_SUB_TYPE(x)				(((x) & BIT_MASK_UD_SUB_TYPE) << BIT_SHIFT_UD_SUB_TYPE)
#define BITS_UD_SUB_TYPE				(BIT_MASK_UD_SUB_TYPE << BIT_SHIFT_UD_SUB_TYPE)
#define BIT_CLEAR_UD_SUB_TYPE(x)			((x) & (~BITS_UD_SUB_TYPE))
#define BIT_GET_UD_SUB_TYPE(x)				(((x) >> BIT_SHIFT_UD_SUB_TYPE) & BIT_MASK_UD_SUB_TYPE)
#define BIT_SET_UD_SUB_TYPE(x, v)			(BIT_CLEAR_UD_SUB_TYPE(x) | BIT_UD_SUB_TYPE(v))

#define BIT_SHIFT_UD_TYPE				16
#define BIT_MASK_UD_TYPE				0x3
#define BIT_UD_TYPE(x)					(((x) & BIT_MASK_UD_TYPE) << BIT_SHIFT_UD_TYPE)
#define BITS_UD_TYPE					(BIT_MASK_UD_TYPE << BIT_SHIFT_UD_TYPE)
#define BIT_CLEAR_UD_TYPE(x)				((x) & (~BITS_UD_TYPE))
#define BIT_GET_UD_TYPE(x)				(((x) >> BIT_SHIFT_UD_TYPE) & BIT_MASK_UD_TYPE)
#define BIT_SET_UD_TYPE(x, v)				(BIT_CLEAR_UD_TYPE(x) | BIT_UD_TYPE(v))

#define BIT_SHIFT_RPT_COUNTER				0
#define BIT_MASK_RPT_COUNTER				0xffff
#define BIT_RPT_COUNTER(x)				(((x) & BIT_MASK_RPT_COUNTER) << BIT_SHIFT_RPT_COUNTER)
#define BITS_RPT_COUNTER				(BIT_MASK_RPT_COUNTER << BIT_SHIFT_RPT_COUNTER)
#define BIT_CLEAR_RPT_COUNTER(x)			((x) & (~BITS_RPT_COUNTER))
#define BIT_GET_RPT_COUNTER(x)				(((x) >> BIT_SHIFT_RPT_COUNTER) & BIT_MASK_RPT_COUNTER)
#define BIT_SET_RPT_COUNTER(x, v)			(BIT_CLEAR_RPT_COUNTER(x) | BIT_RPT_COUNTER(v))

/* 2 REG_WMAC_TRXPTCL_CTL			(Offset 0x0668) */

#define BIT_ACKTO_BLOCK_SCH_EN				BIT(27)
#define BIT_EIFS_BLOCK_SCH_EN				BIT(26)
#define BIT_PLCPCHK_RST_EIFS				BIT(25)
#define BIT_CCA_RST_EIFS				BIT(24)
#define BIT_DIS_UPD_MYRXPKTNAV				BIT(23)
#define BIT_EARLY_TXBA					BIT(22)

#define BIT_SHIFT_RESP_CHNBUSY				20
#define BIT_MASK_RESP_CHNBUSY				0x3
#define BIT_RESP_CHNBUSY(x)				(((x) & BIT_MASK_RESP_CHNBUSY) << BIT_SHIFT_RESP_CHNBUSY)
#define BITS_RESP_CHNBUSY				(BIT_MASK_RESP_CHNBUSY << BIT_SHIFT_RESP_CHNBUSY)
#define BIT_CLEAR_RESP_CHNBUSY(x)			((x) & (~BITS_RESP_CHNBUSY))
#define BIT_GET_RESP_CHNBUSY(x)			(((x) >> BIT_SHIFT_RESP_CHNBUSY) & BIT_MASK_RESP_CHNBUSY)
#define BIT_SET_RESP_CHNBUSY(x, v)			(BIT_CLEAR_RESP_CHNBUSY(x) | BIT_RESP_CHNBUSY(v))

#define BIT_RESP_DCTS_EN				BIT(19)
#define BIT_RESP_DCFE_EN				BIT(18)
#define BIT_RESP_SPLCPEN				BIT(17)
#define BIT_RESP_SGIEN					BIT(16)
#define BIT_RESP_LDPC_EN				BIT(15)
#define BIT_DIS_RESP_ACKINCCA				BIT(14)
#define BIT_DIS_RESP_CTSINCCA				BIT(13)

#define BIT_SHIFT_R_WMAC_SECOND_CCA_TIMER		10
#define BIT_MASK_R_WMAC_SECOND_CCA_TIMER		0x7
#define BIT_R_WMAC_SECOND_CCA_TIMER(x)			(((x) & BIT_MASK_R_WMAC_SECOND_CCA_TIMER) << BIT_SHIFT_R_WMAC_SECOND_CCA_TIMER)
#define BITS_R_WMAC_SECOND_CCA_TIMER			(BIT_MASK_R_WMAC_SECOND_CCA_TIMER << BIT_SHIFT_R_WMAC_SECOND_CCA_TIMER)
#define BIT_CLEAR_R_WMAC_SECOND_CCA_TIMER(x)		((x) & (~BITS_R_WMAC_SECOND_CCA_TIMER))
#define BIT_GET_R_WMAC_SECOND_CCA_TIMER(x)		(((x) >> BIT_SHIFT_R_WMAC_SECOND_CCA_TIMER) & BIT_MASK_R_WMAC_SECOND_CCA_TIMER)
#define BIT_SET_R_WMAC_SECOND_CCA_TIMER(x, v)		(BIT_CLEAR_R_WMAC_SECOND_CCA_TIMER(x) | BIT_R_WMAC_SECOND_CCA_TIMER(v))

#define BIT_SHIFT_RFMOD				7
#define BIT_MASK_RFMOD					0x3
#define BIT_RFMOD(x)					(((x) & BIT_MASK_RFMOD) << BIT_SHIFT_RFMOD)
#define BITS_RFMOD					(BIT_MASK_RFMOD << BIT_SHIFT_RFMOD)
#define BIT_CLEAR_RFMOD(x)				((x) & (~BITS_RFMOD))
#define BIT_GET_RFMOD(x)				(((x) >> BIT_SHIFT_RFMOD) & BIT_MASK_RFMOD)
#define BIT_SET_RFMOD(x, v)				(BIT_CLEAR_RFMOD(x) | BIT_RFMOD(v))

#define BIT_SHIFT_RESP_CTS_DYNBW_SEL			5
#define BIT_MASK_RESP_CTS_DYNBW_SEL			0x3
#define BIT_RESP_CTS_DYNBW_SEL(x)			(((x) & BIT_MASK_RESP_CTS_DYNBW_SEL) << BIT_SHIFT_RESP_CTS_DYNBW_SEL)
#define BITS_RESP_CTS_DYNBW_SEL			(BIT_MASK_RESP_CTS_DYNBW_SEL << BIT_SHIFT_RESP_CTS_DYNBW_SEL)
#define BIT_CLEAR_RESP_CTS_DYNBW_SEL(x)		((x) & (~BITS_RESP_CTS_DYNBW_SEL))
#define BIT_GET_RESP_CTS_DYNBW_SEL(x)			(((x) >> BIT_SHIFT_RESP_CTS_DYNBW_SEL) & BIT_MASK_RESP_CTS_DYNBW_SEL)
#define BIT_SET_RESP_CTS_DYNBW_SEL(x, v)		(BIT_CLEAR_RESP_CTS_DYNBW_SEL(x) | BIT_RESP_CTS_DYNBW_SEL(v))

#define BIT_DLY_TX_WAIT_RXANTSEL			BIT(4)
#define BIT_TXRESP_BY_RXANTSEL				BIT(3)

#define BIT_SHIFT_ORIG_DCTS_CHK			0
#define BIT_MASK_ORIG_DCTS_CHK				0x3
#define BIT_ORIG_DCTS_CHK(x)				(((x) & BIT_MASK_ORIG_DCTS_CHK) << BIT_SHIFT_ORIG_DCTS_CHK)
#define BITS_ORIG_DCTS_CHK				(BIT_MASK_ORIG_DCTS_CHK << BIT_SHIFT_ORIG_DCTS_CHK)
#define BIT_CLEAR_ORIG_DCTS_CHK(x)			((x) & (~BITS_ORIG_DCTS_CHK))
#define BIT_GET_ORIG_DCTS_CHK(x)			(((x) >> BIT_SHIFT_ORIG_DCTS_CHK) & BIT_MASK_ORIG_DCTS_CHK)
#define BIT_SET_ORIG_DCTS_CHK(x, v)			(BIT_CLEAR_ORIG_DCTS_CHK(x) | BIT_ORIG_DCTS_CHK(v))

/* 2 REG_WMAC_TRXPTCL_CTL_H			(Offset 0x066C) */

#define BIT_SHIFT_ACKBA_TYPSEL				28
#define BIT_MASK_ACKBA_TYPSEL				0xf
#define BIT_ACKBA_TYPSEL(x)				(((x) & BIT_MASK_ACKBA_TYPSEL) << BIT_SHIFT_ACKBA_TYPSEL)
#define BITS_ACKBA_TYPSEL				(BIT_MASK_ACKBA_TYPSEL << BIT_SHIFT_ACKBA_TYPSEL)
#define BIT_CLEAR_ACKBA_TYPSEL(x)			((x) & (~BITS_ACKBA_TYPSEL))
#define BIT_GET_ACKBA_TYPSEL(x)			(((x) >> BIT_SHIFT_ACKBA_TYPSEL) & BIT_MASK_ACKBA_TYPSEL)
#define BIT_SET_ACKBA_TYPSEL(x, v)			(BIT_CLEAR_ACKBA_TYPSEL(x) | BIT_ACKBA_TYPSEL(v))

#define BIT_SHIFT_ACKBA_ACKPCHK			24
#define BIT_MASK_ACKBA_ACKPCHK				0xf
#define BIT_ACKBA_ACKPCHK(x)				(((x) & BIT_MASK_ACKBA_ACKPCHK) << BIT_SHIFT_ACKBA_ACKPCHK)
#define BITS_ACKBA_ACKPCHK				(BIT_MASK_ACKBA_ACKPCHK << BIT_SHIFT_ACKBA_ACKPCHK)
#define BIT_CLEAR_ACKBA_ACKPCHK(x)			((x) & (~BITS_ACKBA_ACKPCHK))
#define BIT_GET_ACKBA_ACKPCHK(x)			(((x) >> BIT_SHIFT_ACKBA_ACKPCHK) & BIT_MASK_ACKBA_ACKPCHK)
#define BIT_SET_ACKBA_ACKPCHK(x, v)			(BIT_CLEAR_ACKBA_ACKPCHK(x) | BIT_ACKBA_ACKPCHK(v))

#define BIT_SHIFT_ACKBAR_TYPESEL			16
#define BIT_MASK_ACKBAR_TYPESEL			0xff
#define BIT_ACKBAR_TYPESEL(x)				(((x) & BIT_MASK_ACKBAR_TYPESEL) << BIT_SHIFT_ACKBAR_TYPESEL)
#define BITS_ACKBAR_TYPESEL				(BIT_MASK_ACKBAR_TYPESEL << BIT_SHIFT_ACKBAR_TYPESEL)
#define BIT_CLEAR_ACKBAR_TYPESEL(x)			((x) & (~BITS_ACKBAR_TYPESEL))
#define BIT_GET_ACKBAR_TYPESEL(x)			(((x) >> BIT_SHIFT_ACKBAR_TYPESEL) & BIT_MASK_ACKBAR_TYPESEL)
#define BIT_SET_ACKBAR_TYPESEL(x, v)			(BIT_CLEAR_ACKBAR_TYPESEL(x) | BIT_ACKBAR_TYPESEL(v))

#define BIT_SHIFT_ACKBAR_ACKPCHK			12
#define BIT_MASK_ACKBAR_ACKPCHK			0xf
#define BIT_ACKBAR_ACKPCHK(x)				(((x) & BIT_MASK_ACKBAR_ACKPCHK) << BIT_SHIFT_ACKBAR_ACKPCHK)
#define BITS_ACKBAR_ACKPCHK				(BIT_MASK_ACKBAR_ACKPCHK << BIT_SHIFT_ACKBAR_ACKPCHK)
#define BIT_CLEAR_ACKBAR_ACKPCHK(x)			((x) & (~BITS_ACKBAR_ACKPCHK))
#define BIT_GET_ACKBAR_ACKPCHK(x)			(((x) >> BIT_SHIFT_ACKBAR_ACKPCHK) & BIT_MASK_ACKBAR_ACKPCHK)
#define BIT_SET_ACKBAR_ACKPCHK(x, v)			(BIT_CLEAR_ACKBAR_ACKPCHK(x) | BIT_ACKBAR_ACKPCHK(v))

#define BIT_RXBA_IGNOREA2_V1				BIT(10)
#define BIT_EN_SAVE_ALL_TXOPADDR_V1			BIT(9)
#define BIT_EN_TXCTS_TO_TXOPOWNER_INRXNAV_V1		BIT(8)
#define BIT_DIS_TXBA_AMPDUFCSERR_V1			BIT(7)
#define BIT_DIS_TXBA_RXBARINFULL_V1			BIT(6)
#define BIT_DIS_TXCFE_INFULL_V1			BIT(5)
#define BIT_DIS_TXCTS_INFULL_V1			BIT(4)
#define BIT_EN_TXACKBA_IN_TX_RDG_V1			BIT(3)
#define BIT_EN_TXACKBA_IN_TXOP_V1			BIT(2)
#define BIT_EN_TXCTS_IN_RXNAV_V1			BIT(1)
#define BIT_EN_TXCTS_INTXOP_V1				BIT(0)

/* 2 REG_CAMCMD				(Offset 0x0670) */

#define BIT_SECCAM_POLLING				BIT(31)
#define BIT_SECCAM_CLR					BIT(30)
#define BIT_SECCAM_WE					BIT(16)

#define BIT_SHIFT_SECCAM_ADDR_V2			0
#define BIT_MASK_SECCAM_ADDR_V2			0x3ff
#define BIT_SECCAM_ADDR_V2(x)				(((x) & BIT_MASK_SECCAM_ADDR_V2) << BIT_SHIFT_SECCAM_ADDR_V2)
#define BITS_SECCAM_ADDR_V2				(BIT_MASK_SECCAM_ADDR_V2 << BIT_SHIFT_SECCAM_ADDR_V2)
#define BIT_CLEAR_SECCAM_ADDR_V2(x)			((x) & (~BITS_SECCAM_ADDR_V2))
#define BIT_GET_SECCAM_ADDR_V2(x)			(((x) >> BIT_SHIFT_SECCAM_ADDR_V2) & BIT_MASK_SECCAM_ADDR_V2)
#define BIT_SET_SECCAM_ADDR_V2(x, v)			(BIT_CLEAR_SECCAM_ADDR_V2(x) | BIT_SECCAM_ADDR_V2(v))

/* 2 REG_CAMWRITE				(Offset 0x0674) */

#define BIT_SHIFT_CAMW_DATA				0
#define BIT_MASK_CAMW_DATA				0xffffffffL
#define BIT_CAMW_DATA(x)				(((x) & BIT_MASK_CAMW_DATA) << BIT_SHIFT_CAMW_DATA)
#define BITS_CAMW_DATA					(BIT_MASK_CAMW_DATA << BIT_SHIFT_CAMW_DATA)
#define BIT_CLEAR_CAMW_DATA(x)				((x) & (~BITS_CAMW_DATA))
#define BIT_GET_CAMW_DATA(x)				(((x) >> BIT_SHIFT_CAMW_DATA) & BIT_MASK_CAMW_DATA)
#define BIT_SET_CAMW_DATA(x, v)			(BIT_CLEAR_CAMW_DATA(x) | BIT_CAMW_DATA(v))

/* 2 REG_CAMREAD				(Offset 0x0678) */

#define BIT_SHIFT_CAMR_DATA				0
#define BIT_MASK_CAMR_DATA				0xffffffffL
#define BIT_CAMR_DATA(x)				(((x) & BIT_MASK_CAMR_DATA) << BIT_SHIFT_CAMR_DATA)
#define BITS_CAMR_DATA					(BIT_MASK_CAMR_DATA << BIT_SHIFT_CAMR_DATA)
#define BIT_CLEAR_CAMR_DATA(x)				((x) & (~BITS_CAMR_DATA))
#define BIT_GET_CAMR_DATA(x)				(((x) >> BIT_SHIFT_CAMR_DATA) & BIT_MASK_CAMR_DATA)
#define BIT_SET_CAMR_DATA(x, v)			(BIT_CLEAR_CAMR_DATA(x) | BIT_CAMR_DATA(v))

/* 2 REG_CAMDBG				(Offset 0x067C) */

#define BIT_SECCAM_INFO				BIT(31)
#define BIT_SEC_KEYFOUND				BIT(15)

#define BIT_SHIFT_CAMDBG_SEC_TYPE			12
#define BIT_MASK_CAMDBG_SEC_TYPE			0x7
#define BIT_CAMDBG_SEC_TYPE(x)				(((x) & BIT_MASK_CAMDBG_SEC_TYPE) << BIT_SHIFT_CAMDBG_SEC_TYPE)
#define BITS_CAMDBG_SEC_TYPE				(BIT_MASK_CAMDBG_SEC_TYPE << BIT_SHIFT_CAMDBG_SEC_TYPE)
#define BIT_CLEAR_CAMDBG_SEC_TYPE(x)			((x) & (~BITS_CAMDBG_SEC_TYPE))
#define BIT_GET_CAMDBG_SEC_TYPE(x)			(((x) >> BIT_SHIFT_CAMDBG_SEC_TYPE) & BIT_MASK_CAMDBG_SEC_TYPE)
#define BIT_SET_CAMDBG_SEC_TYPE(x, v)			(BIT_CLEAR_CAMDBG_SEC_TYPE(x) | BIT_CAMDBG_SEC_TYPE(v))

#define BIT_CAMDBG_EXT_SECTYPE				BIT(11)

#define BIT_SHIFT_CAMDBG_MIC_KEY_IDX			5
#define BIT_MASK_CAMDBG_MIC_KEY_IDX			0x1f
#define BIT_CAMDBG_MIC_KEY_IDX(x)			(((x) & BIT_MASK_CAMDBG_MIC_KEY_IDX) << BIT_SHIFT_CAMDBG_MIC_KEY_IDX)
#define BITS_CAMDBG_MIC_KEY_IDX			(BIT_MASK_CAMDBG_MIC_KEY_IDX << BIT_SHIFT_CAMDBG_MIC_KEY_IDX)
#define BIT_CLEAR_CAMDBG_MIC_KEY_IDX(x)		((x) & (~BITS_CAMDBG_MIC_KEY_IDX))
#define BIT_GET_CAMDBG_MIC_KEY_IDX(x)			(((x) >> BIT_SHIFT_CAMDBG_MIC_KEY_IDX) & BIT_MASK_CAMDBG_MIC_KEY_IDX)
#define BIT_SET_CAMDBG_MIC_KEY_IDX(x, v)		(BIT_CLEAR_CAMDBG_MIC_KEY_IDX(x) | BIT_CAMDBG_MIC_KEY_IDX(v))

#define BIT_SHIFT_CAMDBG_SEC_KEY_IDX			0
#define BIT_MASK_CAMDBG_SEC_KEY_IDX			0x1f
#define BIT_CAMDBG_SEC_KEY_IDX(x)			(((x) & BIT_MASK_CAMDBG_SEC_KEY_IDX) << BIT_SHIFT_CAMDBG_SEC_KEY_IDX)
#define BITS_CAMDBG_SEC_KEY_IDX			(BIT_MASK_CAMDBG_SEC_KEY_IDX << BIT_SHIFT_CAMDBG_SEC_KEY_IDX)
#define BIT_CLEAR_CAMDBG_SEC_KEY_IDX(x)		((x) & (~BITS_CAMDBG_SEC_KEY_IDX))
#define BIT_GET_CAMDBG_SEC_KEY_IDX(x)			(((x) >> BIT_SHIFT_CAMDBG_SEC_KEY_IDX) & BIT_MASK_CAMDBG_SEC_KEY_IDX)
#define BIT_SET_CAMDBG_SEC_KEY_IDX(x, v)		(BIT_CLEAR_CAMDBG_SEC_KEY_IDX(x) | BIT_CAMDBG_SEC_KEY_IDX(v))

/* 2 REG_SECCFG				(Offset 0x0680) */

#define BIT_DIS_GCLK_WAPI				BIT(15)
#define BIT_DIS_GCLK_AES				BIT(14)
#define BIT_DIS_GCLK_TKIP				BIT(13)
#define BIT_AES_SEL_QC_1				BIT(12)
#define BIT_AES_SEL_QC_0				BIT(11)
#define BIT_CHK_BMC					BIT(9)
#define BIT_CHK_KEYID					BIT(8)
#define BIT_RXBCUSEDK					BIT(7)
#define BIT_TXBCUSEDK					BIT(6)
#define BIT_NOSKMC					BIT(5)
#define BIT_SKBYA2					BIT(4)
#define BIT_RXDEC					BIT(3)
#define BIT_TXENC					BIT(2)
#define BIT_RXUHUSEDK					BIT(1)
#define BIT_TXUHUSEDK					BIT(0)

/* 2 REG_RXFILTER_CATEGORY_1			(Offset 0x0682) */

#define BIT_SHIFT_RXFILTER_CATEGORY_1			0
#define BIT_MASK_RXFILTER_CATEGORY_1			0xff
#define BIT_RXFILTER_CATEGORY_1(x)			(((x) & BIT_MASK_RXFILTER_CATEGORY_1) << BIT_SHIFT_RXFILTER_CATEGORY_1)
#define BITS_RXFILTER_CATEGORY_1			(BIT_MASK_RXFILTER_CATEGORY_1 << BIT_SHIFT_RXFILTER_CATEGORY_1)
#define BIT_CLEAR_RXFILTER_CATEGORY_1(x)		((x) & (~BITS_RXFILTER_CATEGORY_1))
#define BIT_GET_RXFILTER_CATEGORY_1(x)			(((x) >> BIT_SHIFT_RXFILTER_CATEGORY_1) & BIT_MASK_RXFILTER_CATEGORY_1)
#define BIT_SET_RXFILTER_CATEGORY_1(x, v)		(BIT_CLEAR_RXFILTER_CATEGORY_1(x) | BIT_RXFILTER_CATEGORY_1(v))

/* 2 REG_RXFILTER_ACTION_1			(Offset 0x0683) */

#define BIT_SHIFT_RXFILTER_ACTION_1			0
#define BIT_MASK_RXFILTER_ACTION_1			0xff
#define BIT_RXFILTER_ACTION_1(x)			(((x) & BIT_MASK_RXFILTER_ACTION_1) << BIT_SHIFT_RXFILTER_ACTION_1)
#define BITS_RXFILTER_ACTION_1				(BIT_MASK_RXFILTER_ACTION_1 << BIT_SHIFT_RXFILTER_ACTION_1)
#define BIT_CLEAR_RXFILTER_ACTION_1(x)			((x) & (~BITS_RXFILTER_ACTION_1))
#define BIT_GET_RXFILTER_ACTION_1(x)			(((x) >> BIT_SHIFT_RXFILTER_ACTION_1) & BIT_MASK_RXFILTER_ACTION_1)
#define BIT_SET_RXFILTER_ACTION_1(x, v)		(BIT_CLEAR_RXFILTER_ACTION_1(x) | BIT_RXFILTER_ACTION_1(v))

/* 2 REG_RXFILTER_CATEGORY_2			(Offset 0x0684) */

#define BIT_SHIFT_RXFILTER_CATEGORY_2			0
#define BIT_MASK_RXFILTER_CATEGORY_2			0xff
#define BIT_RXFILTER_CATEGORY_2(x)			(((x) & BIT_MASK_RXFILTER_CATEGORY_2) << BIT_SHIFT_RXFILTER_CATEGORY_2)
#define BITS_RXFILTER_CATEGORY_2			(BIT_MASK_RXFILTER_CATEGORY_2 << BIT_SHIFT_RXFILTER_CATEGORY_2)
#define BIT_CLEAR_RXFILTER_CATEGORY_2(x)		((x) & (~BITS_RXFILTER_CATEGORY_2))
#define BIT_GET_RXFILTER_CATEGORY_2(x)			(((x) >> BIT_SHIFT_RXFILTER_CATEGORY_2) & BIT_MASK_RXFILTER_CATEGORY_2)
#define BIT_SET_RXFILTER_CATEGORY_2(x, v)		(BIT_CLEAR_RXFILTER_CATEGORY_2(x) | BIT_RXFILTER_CATEGORY_2(v))

/* 2 REG_RXFILTER_ACTION_2			(Offset 0x0685) */

#define BIT_SHIFT_RXFILTER_ACTION_2			0
#define BIT_MASK_RXFILTER_ACTION_2			0xff
#define BIT_RXFILTER_ACTION_2(x)			(((x) & BIT_MASK_RXFILTER_ACTION_2) << BIT_SHIFT_RXFILTER_ACTION_2)
#define BITS_RXFILTER_ACTION_2				(BIT_MASK_RXFILTER_ACTION_2 << BIT_SHIFT_RXFILTER_ACTION_2)
#define BIT_CLEAR_RXFILTER_ACTION_2(x)			((x) & (~BITS_RXFILTER_ACTION_2))
#define BIT_GET_RXFILTER_ACTION_2(x)			(((x) >> BIT_SHIFT_RXFILTER_ACTION_2) & BIT_MASK_RXFILTER_ACTION_2)
#define BIT_SET_RXFILTER_ACTION_2(x, v)		(BIT_CLEAR_RXFILTER_ACTION_2(x) | BIT_RXFILTER_ACTION_2(v))

/* 2 REG_RXFILTER_CATEGORY_3			(Offset 0x0686) */

#define BIT_SHIFT_RXFILTER_CATEGORY_3			0
#define BIT_MASK_RXFILTER_CATEGORY_3			0xff
#define BIT_RXFILTER_CATEGORY_3(x)			(((x) & BIT_MASK_RXFILTER_CATEGORY_3) << BIT_SHIFT_RXFILTER_CATEGORY_3)
#define BITS_RXFILTER_CATEGORY_3			(BIT_MASK_RXFILTER_CATEGORY_3 << BIT_SHIFT_RXFILTER_CATEGORY_3)
#define BIT_CLEAR_RXFILTER_CATEGORY_3(x)		((x) & (~BITS_RXFILTER_CATEGORY_3))
#define BIT_GET_RXFILTER_CATEGORY_3(x)			(((x) >> BIT_SHIFT_RXFILTER_CATEGORY_3) & BIT_MASK_RXFILTER_CATEGORY_3)
#define BIT_SET_RXFILTER_CATEGORY_3(x, v)		(BIT_CLEAR_RXFILTER_CATEGORY_3(x) | BIT_RXFILTER_CATEGORY_3(v))

/* 2 REG_RXFILTER_ACTION_3			(Offset 0x0687) */

#define BIT_SHIFT_RXFILTER_ACTION_3			0
#define BIT_MASK_RXFILTER_ACTION_3			0xff
#define BIT_RXFILTER_ACTION_3(x)			(((x) & BIT_MASK_RXFILTER_ACTION_3) << BIT_SHIFT_RXFILTER_ACTION_3)
#define BITS_RXFILTER_ACTION_3				(BIT_MASK_RXFILTER_ACTION_3 << BIT_SHIFT_RXFILTER_ACTION_3)
#define BIT_CLEAR_RXFILTER_ACTION_3(x)			((x) & (~BITS_RXFILTER_ACTION_3))
#define BIT_GET_RXFILTER_ACTION_3(x)			(((x) >> BIT_SHIFT_RXFILTER_ACTION_3) & BIT_MASK_RXFILTER_ACTION_3)
#define BIT_SET_RXFILTER_ACTION_3(x, v)		(BIT_CLEAR_RXFILTER_ACTION_3(x) | BIT_RXFILTER_ACTION_3(v))

/* 2 REG_RXFLTMAP3				(Offset 0x0688) */

#define BIT_MGTFLT15EN_FW				BIT(15)
#define BIT_MGTFLT14EN_FW				BIT(14)
#define BIT_MGTFLT13EN_FW				BIT(13)
#define BIT_MGTFLT12EN_FW				BIT(12)
#define BIT_MGTFLT11EN_FW				BIT(11)
#define BIT_MGTFLT10EN_FW				BIT(10)
#define BIT_MGTFLT9EN_FW				BIT(9)
#define BIT_MGTFLT8EN_FW				BIT(8)
#define BIT_MGTFLT7EN_FW				BIT(7)
#define BIT_MGTFLT6EN_FW				BIT(6)
#define BIT_MGTFLT5EN_FW				BIT(5)
#define BIT_MGTFLT4EN_FW				BIT(4)
#define BIT_MGTFLT3EN_FW				BIT(3)
#define BIT_MGTFLT2EN_FW				BIT(2)
#define BIT_MGTFLT1EN_FW				BIT(1)
#define BIT_MGTFLT0EN_FW				BIT(0)

/* 2 REG_RXFLTMAP4				(Offset 0x068A) */

#define BIT_CTRLFLT15EN_FW				BIT(15)
#define BIT_CTRLFLT14EN_FW				BIT(14)
#define BIT_CTRLFLT13EN_FW				BIT(13)
#define BIT_CTRLFLT12EN_FW				BIT(12)
#define BIT_CTRLFLT11EN_FW				BIT(11)
#define BIT_CTRLFLT10EN_FW				BIT(10)
#define BIT_CTRLFLT9EN_FW				BIT(9)
#define BIT_CTRLFLT8EN_FW				BIT(8)
#define BIT_CTRLFLT7EN_FW				BIT(7)
#define BIT_CTRLFLT6EN_FW				BIT(6)
#define BIT_CTRLFLT5EN_FW				BIT(5)
#define BIT_CTRLFLT4EN_FW				BIT(4)
#define BIT_CTRLFLT3EN_FW				BIT(3)
#define BIT_CTRLFLT2EN_FW				BIT(2)
#define BIT_CTRLFLT1EN_FW				BIT(1)
#define BIT_CTRLFLT0EN_FW				BIT(0)

/* 2 REG_RXFLTMAP5				(Offset 0x068C) */

#define BIT_DATAFLT15EN_FW				BIT(15)
#define BIT_DATAFLT14EN_FW				BIT(14)
#define BIT_DATAFLT13EN_FW				BIT(13)
#define BIT_DATAFLT12EN_FW				BIT(12)
#define BIT_DATAFLT11EN_FW				BIT(11)
#define BIT_DATAFLT10EN_FW				BIT(10)
#define BIT_DATAFLT9EN_FW				BIT(9)
#define BIT_DATAFLT8EN_FW				BIT(8)
#define BIT_DATAFLT7EN_FW				BIT(7)
#define BIT_DATAFLT6EN_FW				BIT(6)
#define BIT_DATAFLT5EN_FW				BIT(5)
#define BIT_DATAFLT4EN_FW				BIT(4)
#define BIT_DATAFLT3EN_FW				BIT(3)
#define BIT_DATAFLT2EN_FW				BIT(2)
#define BIT_DATAFLT1EN_FW				BIT(1)
#define BIT_DATAFLT0EN_FW				BIT(0)

/* 2 REG_RXFLTMAP6				(Offset 0x068E) */

#define BIT_ACTIONFLT15EN_FW				BIT(15)
#define BIT_ACTIONFLT14EN_FW				BIT(14)
#define BIT_ACTIONFLT13EN_FW				BIT(13)
#define BIT_ACTIONFLT12EN_FW				BIT(12)
#define BIT_ACTIONFLT11EN_FW				BIT(11)
#define BIT_ACTIONFLT10EN_FW				BIT(10)
#define BIT_ACTIONFLT9EN_FW				BIT(9)
#define BIT_ACTIONFLT8EN_FW				BIT(8)
#define BIT_ACTIONFLT7EN_FW				BIT(7)
#define BIT_ACTIONFLT6EN_FW				BIT(6)
#define BIT_ACTIONFLT5EN_FW				BIT(5)
#define BIT_ACTIONFLT4EN_FW				BIT(4)
#define BIT_ACTIONFLT3EN_FW				BIT(3)
#define BIT_ACTIONFLT2EN_FW				BIT(2)
#define BIT_ACTIONFLT1EN_FW				BIT(1)
#define BIT_ACTIONFLT0EN_FW				BIT(0)

/* 2 REG_WOW_CTRL				(Offset 0x0690) */

#define BIT_SHIFT_PSF_BSSIDSEL_B2B1			6
#define BIT_MASK_PSF_BSSIDSEL_B2B1			0x3
#define BIT_PSF_BSSIDSEL_B2B1(x)			(((x) & BIT_MASK_PSF_BSSIDSEL_B2B1) << BIT_SHIFT_PSF_BSSIDSEL_B2B1)
#define BITS_PSF_BSSIDSEL_B2B1				(BIT_MASK_PSF_BSSIDSEL_B2B1 << BIT_SHIFT_PSF_BSSIDSEL_B2B1)
#define BIT_CLEAR_PSF_BSSIDSEL_B2B1(x)			((x) & (~BITS_PSF_BSSIDSEL_B2B1))
#define BIT_GET_PSF_BSSIDSEL_B2B1(x)			(((x) >> BIT_SHIFT_PSF_BSSIDSEL_B2B1) & BIT_MASK_PSF_BSSIDSEL_B2B1)
#define BIT_SET_PSF_BSSIDSEL_B2B1(x, v)		(BIT_CLEAR_PSF_BSSIDSEL_B2B1(x) | BIT_PSF_BSSIDSEL_B2B1(v))

#define BIT_WOWHCI					BIT(5)
#define BIT_PSF_BSSIDSEL_B0				BIT(4)
#define BIT_UWF					BIT(3)
#define BIT_MAGIC					BIT(2)
#define BIT_WOWEN					BIT(1)
#define BIT_FORCE_WAKEUP				BIT(0)

/* 2 REG_NAN_RX_TSF_FILTER			(Offset 0x0691) */

#define BIT_CHK_TSF_TA					BIT(2)
#define BIT_CHK_TSF_CBSSID				BIT(1)
#define BIT_CHK_TSF_EN					BIT(0)

/* 2 REG_PS_RX_INFO				(Offset 0x0692) */

#define BIT_SHIFT_PORTSEL__PS_RX_INFO			5
#define BIT_MASK_PORTSEL__PS_RX_INFO			0x7
#define BIT_PORTSEL__PS_RX_INFO(x)			(((x) & BIT_MASK_PORTSEL__PS_RX_INFO) << BIT_SHIFT_PORTSEL__PS_RX_INFO)
#define BITS_PORTSEL__PS_RX_INFO			(BIT_MASK_PORTSEL__PS_RX_INFO << BIT_SHIFT_PORTSEL__PS_RX_INFO)
#define BIT_CLEAR_PORTSEL__PS_RX_INFO(x)		((x) & (~BITS_PORTSEL__PS_RX_INFO))
#define BIT_GET_PORTSEL__PS_RX_INFO(x)			(((x) >> BIT_SHIFT_PORTSEL__PS_RX_INFO) & BIT_MASK_PORTSEL__PS_RX_INFO)
#define BIT_SET_PORTSEL__PS_RX_INFO(x, v)		(BIT_CLEAR_PORTSEL__PS_RX_INFO(x) | BIT_PORTSEL__PS_RX_INFO(v))

#define BIT_RXCTRLIN0					BIT(4)
#define BIT_RXMGTIN0					BIT(3)
#define BIT_RXDATAIN2					BIT(2)
#define BIT_RXDATAIN1					BIT(1)
#define BIT_RXDATAIN0					BIT(0)

/* 2 REG_WMMPS_UAPSD_TID			(Offset 0x0693) */

#define BIT_WMMPS_UAPSD_TID7				BIT(7)
#define BIT_WMMPS_UAPSD_TID6				BIT(6)
#define BIT_WMMPS_UAPSD_TID5				BIT(5)
#define BIT_WMMPS_UAPSD_TID4				BIT(4)
#define BIT_WMMPS_UAPSD_TID3				BIT(3)
#define BIT_WMMPS_UAPSD_TID2				BIT(2)
#define BIT_WMMPS_UAPSD_TID1				BIT(1)
#define BIT_WMMPS_UAPSD_TID0				BIT(0)

/* 2 REG_WKFMCAM_CMD				(Offset 0x0698) */

#define BIT_WKFCAM_POLLING_V1				BIT(31)
#define BIT_WKFCAM_CLR_V1				BIT(30)
#define BIT_WKFCAM_WE					BIT(16)

#define BIT_SHIFT_WKFCAM_ADDR_V2			8
#define BIT_MASK_WKFCAM_ADDR_V2			0xff
#define BIT_WKFCAM_ADDR_V2(x)				(((x) & BIT_MASK_WKFCAM_ADDR_V2) << BIT_SHIFT_WKFCAM_ADDR_V2)
#define BITS_WKFCAM_ADDR_V2				(BIT_MASK_WKFCAM_ADDR_V2 << BIT_SHIFT_WKFCAM_ADDR_V2)
#define BIT_CLEAR_WKFCAM_ADDR_V2(x)			((x) & (~BITS_WKFCAM_ADDR_V2))
#define BIT_GET_WKFCAM_ADDR_V2(x)			(((x) >> BIT_SHIFT_WKFCAM_ADDR_V2) & BIT_MASK_WKFCAM_ADDR_V2)
#define BIT_SET_WKFCAM_ADDR_V2(x, v)			(BIT_CLEAR_WKFCAM_ADDR_V2(x) | BIT_WKFCAM_ADDR_V2(v))

#define BIT_SHIFT_WKFCAM_CAM_NUM_V1			0
#define BIT_MASK_WKFCAM_CAM_NUM_V1			0xff
#define BIT_WKFCAM_CAM_NUM_V1(x)			(((x) & BIT_MASK_WKFCAM_CAM_NUM_V1) << BIT_SHIFT_WKFCAM_CAM_NUM_V1)
#define BITS_WKFCAM_CAM_NUM_V1				(BIT_MASK_WKFCAM_CAM_NUM_V1 << BIT_SHIFT_WKFCAM_CAM_NUM_V1)
#define BIT_CLEAR_WKFCAM_CAM_NUM_V1(x)			((x) & (~BITS_WKFCAM_CAM_NUM_V1))
#define BIT_GET_WKFCAM_CAM_NUM_V1(x)			(((x) >> BIT_SHIFT_WKFCAM_CAM_NUM_V1) & BIT_MASK_WKFCAM_CAM_NUM_V1)
#define BIT_SET_WKFCAM_CAM_NUM_V1(x, v)		(BIT_CLEAR_WKFCAM_CAM_NUM_V1(x) | BIT_WKFCAM_CAM_NUM_V1(v))

/* 2 REG_WKFMCAM_RWD				(Offset 0x069C) */

#define BIT_SHIFT_WKFMCAM_RWD				0
#define BIT_MASK_WKFMCAM_RWD				0xffffffffL
#define BIT_WKFMCAM_RWD(x)				(((x) & BIT_MASK_WKFMCAM_RWD) << BIT_SHIFT_WKFMCAM_RWD)
#define BITS_WKFMCAM_RWD				(BIT_MASK_WKFMCAM_RWD << BIT_SHIFT_WKFMCAM_RWD)
#define BIT_CLEAR_WKFMCAM_RWD(x)			((x) & (~BITS_WKFMCAM_RWD))
#define BIT_GET_WKFMCAM_RWD(x)				(((x) >> BIT_SHIFT_WKFMCAM_RWD) & BIT_MASK_WKFMCAM_RWD)
#define BIT_SET_WKFMCAM_RWD(x, v)			(BIT_CLEAR_WKFMCAM_RWD(x) | BIT_WKFMCAM_RWD(v))

/* 2 REG_RXFLTMAP0				(Offset 0x06A0) */

#define BIT_MGTFLT15EN					BIT(15)
#define BIT_MGTFLT14EN					BIT(14)
#define BIT_MGTFLT13EN					BIT(13)
#define BIT_MGTFLT12EN					BIT(12)
#define BIT_MGTFLT11EN					BIT(11)
#define BIT_MGTFLT10EN					BIT(10)
#define BIT_MGTFLT9EN					BIT(9)
#define BIT_MGTFLT8EN					BIT(8)
#define BIT_MGTFLT7EN					BIT(7)
#define BIT_MGTFLT6EN					BIT(6)
#define BIT_MGTFLT5EN					BIT(5)
#define BIT_MGTFLT4EN					BIT(4)
#define BIT_MGTFLT3EN					BIT(3)
#define BIT_MGTFLT2EN					BIT(2)
#define BIT_MGTFLT1EN					BIT(1)
#define BIT_MGTFLT0EN					BIT(0)

/* 2 REG_RXFLTMAP1				(Offset 0x06A2) */

#define BIT_CTRLFLT15EN				BIT(15)
#define BIT_CTRLFLT14EN				BIT(14)
#define BIT_CTRLFLT13EN				BIT(13)
#define BIT_CTRLFLT12EN				BIT(12)
#define BIT_CTRLFLT11EN				BIT(11)
#define BIT_CTRLFLT10EN				BIT(10)
#define BIT_CTRLFLT9EN					BIT(9)
#define BIT_CTRLFLT8EN					BIT(8)
#define BIT_CTRLFLT7EN					BIT(7)
#define BIT_CTRLFLT6EN					BIT(6)
#define BIT_CTRLFLT5EN					BIT(5)
#define BIT_CTRLFLT4EN					BIT(4)
#define BIT_CTRLFLT3EN					BIT(3)
#define BIT_CTRLFLT2EN					BIT(2)
#define BIT_CTRLFLT1EN					BIT(1)
#define BIT_CTRLFLT0EN					BIT(0)

/* 2 REG_RXFLTMAP2				(Offset 0x06A4) */

#define BIT_DATAFLT15EN				BIT(15)
#define BIT_DATAFLT14EN				BIT(14)
#define BIT_DATAFLT13EN				BIT(13)
#define BIT_DATAFLT12EN				BIT(12)
#define BIT_DATAFLT11EN				BIT(11)
#define BIT_DATAFLT10EN				BIT(10)
#define BIT_DATAFLT9EN					BIT(9)
#define BIT_DATAFLT8EN					BIT(8)
#define BIT_DATAFLT7EN					BIT(7)
#define BIT_DATAFLT6EN					BIT(6)
#define BIT_DATAFLT5EN					BIT(5)
#define BIT_DATAFLT4EN					BIT(4)
#define BIT_DATAFLT3EN					BIT(3)
#define BIT_DATAFLT2EN					BIT(2)
#define BIT_DATAFLT1EN					BIT(1)
#define BIT_DATAFLT0EN					BIT(0)

/* 2 REG_BCN_PSR_RPT				(Offset 0x06A8) */

#define BIT_SHIFT_DTIM_CNT				24
#define BIT_MASK_DTIM_CNT				0xff
#define BIT_DTIM_CNT(x)				(((x) & BIT_MASK_DTIM_CNT) << BIT_SHIFT_DTIM_CNT)
#define BITS_DTIM_CNT					(BIT_MASK_DTIM_CNT << BIT_SHIFT_DTIM_CNT)
#define BIT_CLEAR_DTIM_CNT(x)				((x) & (~BITS_DTIM_CNT))
#define BIT_GET_DTIM_CNT(x)				(((x) >> BIT_SHIFT_DTIM_CNT) & BIT_MASK_DTIM_CNT)
#define BIT_SET_DTIM_CNT(x, v)				(BIT_CLEAR_DTIM_CNT(x) | BIT_DTIM_CNT(v))

#define BIT_SHIFT_DTIM_PERIOD				16
#define BIT_MASK_DTIM_PERIOD				0xff
#define BIT_DTIM_PERIOD(x)				(((x) & BIT_MASK_DTIM_PERIOD) << BIT_SHIFT_DTIM_PERIOD)
#define BITS_DTIM_PERIOD				(BIT_MASK_DTIM_PERIOD << BIT_SHIFT_DTIM_PERIOD)
#define BIT_CLEAR_DTIM_PERIOD(x)			((x) & (~BITS_DTIM_PERIOD))
#define BIT_GET_DTIM_PERIOD(x)				(((x) >> BIT_SHIFT_DTIM_PERIOD) & BIT_MASK_DTIM_PERIOD)
#define BIT_SET_DTIM_PERIOD(x, v)			(BIT_CLEAR_DTIM_PERIOD(x) | BIT_DTIM_PERIOD(v))

#define BIT_DTIM					BIT(15)
#define BIT_TIM					BIT(14)
#define BIT_RPT_VALID					BIT(13)

#define BIT_SHIFT_PS_AID_0				0
#define BIT_MASK_PS_AID_0				0x7ff
#define BIT_PS_AID_0(x)				(((x) & BIT_MASK_PS_AID_0) << BIT_SHIFT_PS_AID_0)
#define BITS_PS_AID_0					(BIT_MASK_PS_AID_0 << BIT_SHIFT_PS_AID_0)
#define BIT_CLEAR_PS_AID_0(x)				((x) & (~BITS_PS_AID_0))
#define BIT_GET_PS_AID_0(x)				(((x) >> BIT_SHIFT_PS_AID_0) & BIT_MASK_PS_AID_0)
#define BIT_SET_PS_AID_0(x, v)				(BIT_CLEAR_PS_AID_0(x) | BIT_PS_AID_0(v))

/* 2 REG_FLC_RPC				(Offset 0x06AC) */

#define BIT_SHIFT_FLC_RPC				0
#define BIT_MASK_FLC_RPC				0xff
#define BIT_FLC_RPC(x)					(((x) & BIT_MASK_FLC_RPC) << BIT_SHIFT_FLC_RPC)
#define BITS_FLC_RPC					(BIT_MASK_FLC_RPC << BIT_SHIFT_FLC_RPC)
#define BIT_CLEAR_FLC_RPC(x)				((x) & (~BITS_FLC_RPC))
#define BIT_GET_FLC_RPC(x)				(((x) >> BIT_SHIFT_FLC_RPC) & BIT_MASK_FLC_RPC)
#define BIT_SET_FLC_RPC(x, v)				(BIT_CLEAR_FLC_RPC(x) | BIT_FLC_RPC(v))

/* 2 REG_FLC_RPCT				(Offset 0x06AD) */

#define BIT_SHIFT_FLC_RPCT				0
#define BIT_MASK_FLC_RPCT				0xff
#define BIT_FLC_RPCT(x)				(((x) & BIT_MASK_FLC_RPCT) << BIT_SHIFT_FLC_RPCT)
#define BITS_FLC_RPCT					(BIT_MASK_FLC_RPCT << BIT_SHIFT_FLC_RPCT)
#define BIT_CLEAR_FLC_RPCT(x)				((x) & (~BITS_FLC_RPCT))
#define BIT_GET_FLC_RPCT(x)				(((x) >> BIT_SHIFT_FLC_RPCT) & BIT_MASK_FLC_RPCT)
#define BIT_SET_FLC_RPCT(x, v)				(BIT_CLEAR_FLC_RPCT(x) | BIT_FLC_RPCT(v))

/* 2 REG_FLC_PTS				(Offset 0x06AE) */

#define BIT_CMF					BIT(2)
#define BIT_CCF					BIT(1)
#define BIT_CDF					BIT(0)

/* 2 REG_FLC_TRPC				(Offset 0x06AF) */

#define BIT_FLC_RPCT_V1				BIT(7)
#define BIT_MODE					BIT(6)

#define BIT_SHIFT_TRPCD				0
#define BIT_MASK_TRPCD					0x3f
#define BIT_TRPCD(x)					(((x) & BIT_MASK_TRPCD) << BIT_SHIFT_TRPCD)
#define BITS_TRPCD					(BIT_MASK_TRPCD << BIT_SHIFT_TRPCD)
#define BIT_CLEAR_TRPCD(x)				((x) & (~BITS_TRPCD))
#define BIT_GET_TRPCD(x)				(((x) >> BIT_SHIFT_TRPCD) & BIT_MASK_TRPCD)
#define BIT_SET_TRPCD(x, v)				(BIT_CLEAR_TRPCD(x) | BIT_TRPCD(v))

/* 2 REG_RXPKTMON_CTRL			(Offset 0x06B0) */

#define BIT_SHIFT_RXBKQPKT_SEQ				20
#define BIT_MASK_RXBKQPKT_SEQ				0xf
#define BIT_RXBKQPKT_SEQ(x)				(((x) & BIT_MASK_RXBKQPKT_SEQ) << BIT_SHIFT_RXBKQPKT_SEQ)
#define BITS_RXBKQPKT_SEQ				(BIT_MASK_RXBKQPKT_SEQ << BIT_SHIFT_RXBKQPKT_SEQ)
#define BIT_CLEAR_RXBKQPKT_SEQ(x)			((x) & (~BITS_RXBKQPKT_SEQ))
#define BIT_GET_RXBKQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXBKQPKT_SEQ) & BIT_MASK_RXBKQPKT_SEQ)
#define BIT_SET_RXBKQPKT_SEQ(x, v)			(BIT_CLEAR_RXBKQPKT_SEQ(x) | BIT_RXBKQPKT_SEQ(v))

#define BIT_SHIFT_RXBEQPKT_SEQ				16
#define BIT_MASK_RXBEQPKT_SEQ				0xf
#define BIT_RXBEQPKT_SEQ(x)				(((x) & BIT_MASK_RXBEQPKT_SEQ) << BIT_SHIFT_RXBEQPKT_SEQ)
#define BITS_RXBEQPKT_SEQ				(BIT_MASK_RXBEQPKT_SEQ << BIT_SHIFT_RXBEQPKT_SEQ)
#define BIT_CLEAR_RXBEQPKT_SEQ(x)			((x) & (~BITS_RXBEQPKT_SEQ))
#define BIT_GET_RXBEQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXBEQPKT_SEQ) & BIT_MASK_RXBEQPKT_SEQ)
#define BIT_SET_RXBEQPKT_SEQ(x, v)			(BIT_CLEAR_RXBEQPKT_SEQ(x) | BIT_RXBEQPKT_SEQ(v))

#define BIT_SHIFT_RXVIQPKT_SEQ				12
#define BIT_MASK_RXVIQPKT_SEQ				0xf
#define BIT_RXVIQPKT_SEQ(x)				(((x) & BIT_MASK_RXVIQPKT_SEQ) << BIT_SHIFT_RXVIQPKT_SEQ)
#define BITS_RXVIQPKT_SEQ				(BIT_MASK_RXVIQPKT_SEQ << BIT_SHIFT_RXVIQPKT_SEQ)
#define BIT_CLEAR_RXVIQPKT_SEQ(x)			((x) & (~BITS_RXVIQPKT_SEQ))
#define BIT_GET_RXVIQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXVIQPKT_SEQ) & BIT_MASK_RXVIQPKT_SEQ)
#define BIT_SET_RXVIQPKT_SEQ(x, v)			(BIT_CLEAR_RXVIQPKT_SEQ(x) | BIT_RXVIQPKT_SEQ(v))

#define BIT_SHIFT_RXVOQPKT_SEQ				8
#define BIT_MASK_RXVOQPKT_SEQ				0xf
#define BIT_RXVOQPKT_SEQ(x)				(((x) & BIT_MASK_RXVOQPKT_SEQ) << BIT_SHIFT_RXVOQPKT_SEQ)
#define BITS_RXVOQPKT_SEQ				(BIT_MASK_RXVOQPKT_SEQ << BIT_SHIFT_RXVOQPKT_SEQ)
#define BIT_CLEAR_RXVOQPKT_SEQ(x)			((x) & (~BITS_RXVOQPKT_SEQ))
#define BIT_GET_RXVOQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXVOQPKT_SEQ) & BIT_MASK_RXVOQPKT_SEQ)
#define BIT_SET_RXVOQPKT_SEQ(x, v)			(BIT_CLEAR_RXVOQPKT_SEQ(x) | BIT_RXVOQPKT_SEQ(v))

#define BIT_RXBKQPKT_ERR				BIT(7)
#define BIT_RXBEQPKT_ERR				BIT(6)
#define BIT_RXVIQPKT_ERR				BIT(5)
#define BIT_RXVOQPKT_ERR				BIT(4)
#define BIT_RXDMA_MON_EN				BIT(2)
#define BIT_RXPKT_MON_RST				BIT(1)
#define BIT_RXPKT_MON_EN				BIT(0)

/* 2 REG_STATE_MON				(Offset 0x06B4) */

#define BIT_SHIFT_STATE_SEL				24
#define BIT_MASK_STATE_SEL				0x1f
#define BIT_STATE_SEL(x)				(((x) & BIT_MASK_STATE_SEL) << BIT_SHIFT_STATE_SEL)
#define BITS_STATE_SEL					(BIT_MASK_STATE_SEL << BIT_SHIFT_STATE_SEL)
#define BIT_CLEAR_STATE_SEL(x)				((x) & (~BITS_STATE_SEL))
#define BIT_GET_STATE_SEL(x)				(((x) >> BIT_SHIFT_STATE_SEL) & BIT_MASK_STATE_SEL)
#define BIT_SET_STATE_SEL(x, v)			(BIT_CLEAR_STATE_SEL(x) | BIT_STATE_SEL(v))

#define BIT_SHIFT_STATE_INFO				8
#define BIT_MASK_STATE_INFO				0xff
#define BIT_STATE_INFO(x)				(((x) & BIT_MASK_STATE_INFO) << BIT_SHIFT_STATE_INFO)
#define BITS_STATE_INFO				(BIT_MASK_STATE_INFO << BIT_SHIFT_STATE_INFO)
#define BIT_CLEAR_STATE_INFO(x)			((x) & (~BITS_STATE_INFO))
#define BIT_GET_STATE_INFO(x)				(((x) >> BIT_SHIFT_STATE_INFO) & BIT_MASK_STATE_INFO)
#define BIT_SET_STATE_INFO(x, v)			(BIT_CLEAR_STATE_INFO(x) | BIT_STATE_INFO(v))

#define BIT_UPD_NXT_STATE				BIT(7)

#define BIT_SHIFT_CUR_STATE				0
#define BIT_MASK_CUR_STATE				0x7f
#define BIT_CUR_STATE(x)				(((x) & BIT_MASK_CUR_STATE) << BIT_SHIFT_CUR_STATE)
#define BITS_CUR_STATE					(BIT_MASK_CUR_STATE << BIT_SHIFT_CUR_STATE)
#define BIT_CLEAR_CUR_STATE(x)				((x) & (~BITS_CUR_STATE))
#define BIT_GET_CUR_STATE(x)				(((x) >> BIT_SHIFT_CUR_STATE) & BIT_MASK_CUR_STATE)
#define BIT_SET_CUR_STATE(x, v)			(BIT_CLEAR_CUR_STATE(x) | BIT_CUR_STATE(v))

/* 2 REG_ERROR_MON				(Offset 0x06B8) */

#define BIT_CSIRPT_LEN_BB_MORE_THAN_MAC		BIT(23)
#define BIT_CSI_CHKSUM_ERROR				BIT(22)
#define BIT_MACRX_ERR_4				BIT(20)
#define BIT_MACRX_ERR_3				BIT(19)
#define BIT_MACRX_ERR_2				BIT(18)
#define BIT_MACRX_ERR_1				BIT(17)
#define BIT_MACRX_ERR_0				BIT(16)
#define BIT_WMAC_PRETX_ERRHDL_EN			BIT(15)
#define BIT_MACTX_ERR_5				BIT(5)
#define BIT_MACTX_ERR_4				BIT(4)
#define BIT_MACTX_ERR_3				BIT(3)
#define BIT_MACTX_ERR_2				BIT(2)
#define BIT_MACTX_ERR_1				BIT(1)
#define BIT_MACTX_ERR_0				BIT(0)

/* 2 REG_SEARCH_MACID			(Offset 0x06BC) */

#define BIT_EN_TXRPTBUF_CLK				BIT(31)

#define BIT_SHIFT_INFO_INDEX_OFFSET			16
#define BIT_MASK_INFO_INDEX_OFFSET			0x1fff
#define BIT_INFO_INDEX_OFFSET(x)			(((x) & BIT_MASK_INFO_INDEX_OFFSET) << BIT_SHIFT_INFO_INDEX_OFFSET)
#define BITS_INFO_INDEX_OFFSET				(BIT_MASK_INFO_INDEX_OFFSET << BIT_SHIFT_INFO_INDEX_OFFSET)
#define BIT_CLEAR_INFO_INDEX_OFFSET(x)			((x) & (~BITS_INFO_INDEX_OFFSET))
#define BIT_GET_INFO_INDEX_OFFSET(x)			(((x) >> BIT_SHIFT_INFO_INDEX_OFFSET) & BIT_MASK_INFO_INDEX_OFFSET)
#define BIT_SET_INFO_INDEX_OFFSET(x, v)		(BIT_CLEAR_INFO_INDEX_OFFSET(x) | BIT_INFO_INDEX_OFFSET(v))

#define BIT_WMAC_SRCH_FIFOFULL				BIT(15)
#define BIT_DIS_INFOSRCH				BIT(14)

#define BIT_SHIFT_INFO_ADDR_OFFSET			0
#define BIT_MASK_INFO_ADDR_OFFSET			0x1fff
#define BIT_INFO_ADDR_OFFSET(x)			(((x) & BIT_MASK_INFO_ADDR_OFFSET) << BIT_SHIFT_INFO_ADDR_OFFSET)
#define BITS_INFO_ADDR_OFFSET				(BIT_MASK_INFO_ADDR_OFFSET << BIT_SHIFT_INFO_ADDR_OFFSET)
#define BIT_CLEAR_INFO_ADDR_OFFSET(x)			((x) & (~BITS_INFO_ADDR_OFFSET))
#define BIT_GET_INFO_ADDR_OFFSET(x)			(((x) >> BIT_SHIFT_INFO_ADDR_OFFSET) & BIT_MASK_INFO_ADDR_OFFSET)
#define BIT_SET_INFO_ADDR_OFFSET(x, v)			(BIT_CLEAR_INFO_ADDR_OFFSET(x) | BIT_INFO_ADDR_OFFSET(v))

/* 2 REG_BT_COEX_TABLE			(Offset 0x06C0) */

#define BIT_SHIFT_COEX_TABLE_1				0
#define BIT_MASK_COEX_TABLE_1				0xffffffffL
#define BIT_COEX_TABLE_1(x)				(((x) & BIT_MASK_COEX_TABLE_1) << BIT_SHIFT_COEX_TABLE_1)
#define BITS_COEX_TABLE_1				(BIT_MASK_COEX_TABLE_1 << BIT_SHIFT_COEX_TABLE_1)
#define BIT_CLEAR_COEX_TABLE_1(x)			((x) & (~BITS_COEX_TABLE_1))
#define BIT_GET_COEX_TABLE_1(x)			(((x) >> BIT_SHIFT_COEX_TABLE_1) & BIT_MASK_COEX_TABLE_1)
#define BIT_SET_COEX_TABLE_1(x, v)			(BIT_CLEAR_COEX_TABLE_1(x) | BIT_COEX_TABLE_1(v))

/* 2 REG_BT_COEX_TABLE2			(Offset 0x06C4) */

#define BIT_SHIFT_COEX_TABLE_2				0
#define BIT_MASK_COEX_TABLE_2				0xffffffffL
#define BIT_COEX_TABLE_2(x)				(((x) & BIT_MASK_COEX_TABLE_2) << BIT_SHIFT_COEX_TABLE_2)
#define BITS_COEX_TABLE_2				(BIT_MASK_COEX_TABLE_2 << BIT_SHIFT_COEX_TABLE_2)
#define BIT_CLEAR_COEX_TABLE_2(x)			((x) & (~BITS_COEX_TABLE_2))
#define BIT_GET_COEX_TABLE_2(x)			(((x) >> BIT_SHIFT_COEX_TABLE_2) & BIT_MASK_COEX_TABLE_2)
#define BIT_SET_COEX_TABLE_2(x, v)			(BIT_CLEAR_COEX_TABLE_2(x) | BIT_COEX_TABLE_2(v))

/* 2 REG_BT_COEX_BREAK_TABLE			(Offset 0x06C8) */

#define BIT_SHIFT_BREAK_TABLE_2			16
#define BIT_MASK_BREAK_TABLE_2				0xffff
#define BIT_BREAK_TABLE_2(x)				(((x) & BIT_MASK_BREAK_TABLE_2) << BIT_SHIFT_BREAK_TABLE_2)
#define BITS_BREAK_TABLE_2				(BIT_MASK_BREAK_TABLE_2 << BIT_SHIFT_BREAK_TABLE_2)
#define BIT_CLEAR_BREAK_TABLE_2(x)			((x) & (~BITS_BREAK_TABLE_2))
#define BIT_GET_BREAK_TABLE_2(x)			(((x) >> BIT_SHIFT_BREAK_TABLE_2) & BIT_MASK_BREAK_TABLE_2)
#define BIT_SET_BREAK_TABLE_2(x, v)			(BIT_CLEAR_BREAK_TABLE_2(x) | BIT_BREAK_TABLE_2(v))

#define BIT_SHIFT_BREAK_TABLE_1			0
#define BIT_MASK_BREAK_TABLE_1				0xffff
#define BIT_BREAK_TABLE_1(x)				(((x) & BIT_MASK_BREAK_TABLE_1) << BIT_SHIFT_BREAK_TABLE_1)
#define BITS_BREAK_TABLE_1				(BIT_MASK_BREAK_TABLE_1 << BIT_SHIFT_BREAK_TABLE_1)
#define BIT_CLEAR_BREAK_TABLE_1(x)			((x) & (~BITS_BREAK_TABLE_1))
#define BIT_GET_BREAK_TABLE_1(x)			(((x) >> BIT_SHIFT_BREAK_TABLE_1) & BIT_MASK_BREAK_TABLE_1)
#define BIT_SET_BREAK_TABLE_1(x, v)			(BIT_CLEAR_BREAK_TABLE_1(x) | BIT_BREAK_TABLE_1(v))

/* 2 REG_BT_COEX_TABLE_H			(Offset 0x06CC) */

#define BIT_PRI_MASK_RX_RESP_V1			BIT(30)
#define BIT_PRI_MASK_RXOFDM_V1				BIT(29)
#define BIT_PRI_MASK_RXCCK_V1				BIT(28)

#define BIT_SHIFT_PRI_MASK_TXAC			21
#define BIT_MASK_PRI_MASK_TXAC				0x7f
#define BIT_PRI_MASK_TXAC(x)				(((x) & BIT_MASK_PRI_MASK_TXAC) << BIT_SHIFT_PRI_MASK_TXAC)
#define BITS_PRI_MASK_TXAC				(BIT_MASK_PRI_MASK_TXAC << BIT_SHIFT_PRI_MASK_TXAC)
#define BIT_CLEAR_PRI_MASK_TXAC(x)			((x) & (~BITS_PRI_MASK_TXAC))
#define BIT_GET_PRI_MASK_TXAC(x)			(((x) >> BIT_SHIFT_PRI_MASK_TXAC) & BIT_MASK_PRI_MASK_TXAC)
#define BIT_SET_PRI_MASK_TXAC(x, v)			(BIT_CLEAR_PRI_MASK_TXAC(x) | BIT_PRI_MASK_TXAC(v))

#define BIT_SHIFT_PRI_MASK_NAV				13
#define BIT_MASK_PRI_MASK_NAV				0xff
#define BIT_PRI_MASK_NAV(x)				(((x) & BIT_MASK_PRI_MASK_NAV) << BIT_SHIFT_PRI_MASK_NAV)
#define BITS_PRI_MASK_NAV				(BIT_MASK_PRI_MASK_NAV << BIT_SHIFT_PRI_MASK_NAV)
#define BIT_CLEAR_PRI_MASK_NAV(x)			((x) & (~BITS_PRI_MASK_NAV))
#define BIT_GET_PRI_MASK_NAV(x)			(((x) >> BIT_SHIFT_PRI_MASK_NAV) & BIT_MASK_PRI_MASK_NAV)
#define BIT_SET_PRI_MASK_NAV(x, v)			(BIT_CLEAR_PRI_MASK_NAV(x) | BIT_PRI_MASK_NAV(v))

#define BIT_PRI_MASK_CCK_V1				BIT(12)
#define BIT_PRI_MASK_OFDM_V1				BIT(11)
#define BIT_PRI_MASK_RTY_V1				BIT(10)

#define BIT_SHIFT_PRI_MASK_NUM				6
#define BIT_MASK_PRI_MASK_NUM				0xf
#define BIT_PRI_MASK_NUM(x)				(((x) & BIT_MASK_PRI_MASK_NUM) << BIT_SHIFT_PRI_MASK_NUM)
#define BITS_PRI_MASK_NUM				(BIT_MASK_PRI_MASK_NUM << BIT_SHIFT_PRI_MASK_NUM)
#define BIT_CLEAR_PRI_MASK_NUM(x)			((x) & (~BITS_PRI_MASK_NUM))
#define BIT_GET_PRI_MASK_NUM(x)			(((x) >> BIT_SHIFT_PRI_MASK_NUM) & BIT_MASK_PRI_MASK_NUM)
#define BIT_SET_PRI_MASK_NUM(x, v)			(BIT_CLEAR_PRI_MASK_NUM(x) | BIT_PRI_MASK_NUM(v))

#define BIT_SHIFT_PRI_MASK_TYPE			2
#define BIT_MASK_PRI_MASK_TYPE				0xf
#define BIT_PRI_MASK_TYPE(x)				(((x) & BIT_MASK_PRI_MASK_TYPE) << BIT_SHIFT_PRI_MASK_TYPE)
#define BITS_PRI_MASK_TYPE				(BIT_MASK_PRI_MASK_TYPE << BIT_SHIFT_PRI_MASK_TYPE)
#define BIT_CLEAR_PRI_MASK_TYPE(x)			((x) & (~BITS_PRI_MASK_TYPE))
#define BIT_GET_PRI_MASK_TYPE(x)			(((x) >> BIT_SHIFT_PRI_MASK_TYPE) & BIT_MASK_PRI_MASK_TYPE)
#define BIT_SET_PRI_MASK_TYPE(x, v)			(BIT_CLEAR_PRI_MASK_TYPE(x) | BIT_PRI_MASK_TYPE(v))

#define BIT_OOB_V1					BIT(1)
#define BIT_ANT_SEL_V1					BIT(0)

/* 2 REG_RXCMD_0				(Offset 0x06D0) */

#define BIT_RXCMD_EN					BIT(31)

#define BIT_SHIFT_RXCMD_INFO				0
#define BIT_MASK_RXCMD_INFO				0x7fffffffL
#define BIT_RXCMD_INFO(x)				(((x) & BIT_MASK_RXCMD_INFO) << BIT_SHIFT_RXCMD_INFO)
#define BITS_RXCMD_INFO				(BIT_MASK_RXCMD_INFO << BIT_SHIFT_RXCMD_INFO)
#define BIT_CLEAR_RXCMD_INFO(x)			((x) & (~BITS_RXCMD_INFO))
#define BIT_GET_RXCMD_INFO(x)				(((x) >> BIT_SHIFT_RXCMD_INFO) & BIT_MASK_RXCMD_INFO)
#define BIT_SET_RXCMD_INFO(x, v)			(BIT_CLEAR_RXCMD_INFO(x) | BIT_RXCMD_INFO(v))

/* 2 REG_RXCMD_1				(Offset 0x06D4) */

#define BIT_SHIFT_RXCMD_PRD				0
#define BIT_MASK_RXCMD_PRD				0xffff
#define BIT_RXCMD_PRD(x)				(((x) & BIT_MASK_RXCMD_PRD) << BIT_SHIFT_RXCMD_PRD)
#define BITS_RXCMD_PRD					(BIT_MASK_RXCMD_PRD << BIT_SHIFT_RXCMD_PRD)
#define BIT_CLEAR_RXCMD_PRD(x)				((x) & (~BITS_RXCMD_PRD))
#define BIT_GET_RXCMD_PRD(x)				(((x) >> BIT_SHIFT_RXCMD_PRD) & BIT_MASK_RXCMD_PRD)
#define BIT_SET_RXCMD_PRD(x, v)			(BIT_CLEAR_RXCMD_PRD(x) | BIT_RXCMD_PRD(v))

/* 2 REG_WMAC_RESP_TXINFO			(Offset 0x06D8) */

#define BIT_SHIFT_WMAC_RESP_MFB			25
#define BIT_MASK_WMAC_RESP_MFB				0x7f
#define BIT_WMAC_RESP_MFB(x)				(((x) & BIT_MASK_WMAC_RESP_MFB) << BIT_SHIFT_WMAC_RESP_MFB)
#define BITS_WMAC_RESP_MFB				(BIT_MASK_WMAC_RESP_MFB << BIT_SHIFT_WMAC_RESP_MFB)
#define BIT_CLEAR_WMAC_RESP_MFB(x)			((x) & (~BITS_WMAC_RESP_MFB))
#define BIT_GET_WMAC_RESP_MFB(x)			(((x) >> BIT_SHIFT_WMAC_RESP_MFB) & BIT_MASK_WMAC_RESP_MFB)
#define BIT_SET_WMAC_RESP_MFB(x, v)			(BIT_CLEAR_WMAC_RESP_MFB(x) | BIT_WMAC_RESP_MFB(v))

#define BIT_SHIFT_WMAC_ANTINF_SEL			23
#define BIT_MASK_WMAC_ANTINF_SEL			0x3
#define BIT_WMAC_ANTINF_SEL(x)				(((x) & BIT_MASK_WMAC_ANTINF_SEL) << BIT_SHIFT_WMAC_ANTINF_SEL)
#define BITS_WMAC_ANTINF_SEL				(BIT_MASK_WMAC_ANTINF_SEL << BIT_SHIFT_WMAC_ANTINF_SEL)
#define BIT_CLEAR_WMAC_ANTINF_SEL(x)			((x) & (~BITS_WMAC_ANTINF_SEL))
#define BIT_GET_WMAC_ANTINF_SEL(x)			(((x) >> BIT_SHIFT_WMAC_ANTINF_SEL) & BIT_MASK_WMAC_ANTINF_SEL)
#define BIT_SET_WMAC_ANTINF_SEL(x, v)			(BIT_CLEAR_WMAC_ANTINF_SEL(x) | BIT_WMAC_ANTINF_SEL(v))

#define BIT_SHIFT_WMAC_ANTSEL_SEL			21
#define BIT_MASK_WMAC_ANTSEL_SEL			0x3
#define BIT_WMAC_ANTSEL_SEL(x)				(((x) & BIT_MASK_WMAC_ANTSEL_SEL) << BIT_SHIFT_WMAC_ANTSEL_SEL)
#define BITS_WMAC_ANTSEL_SEL				(BIT_MASK_WMAC_ANTSEL_SEL << BIT_SHIFT_WMAC_ANTSEL_SEL)
#define BIT_CLEAR_WMAC_ANTSEL_SEL(x)			((x) & (~BITS_WMAC_ANTSEL_SEL))
#define BIT_GET_WMAC_ANTSEL_SEL(x)			(((x) >> BIT_SHIFT_WMAC_ANTSEL_SEL) & BIT_MASK_WMAC_ANTSEL_SEL)
#define BIT_SET_WMAC_ANTSEL_SEL(x, v)			(BIT_CLEAR_WMAC_ANTSEL_SEL(x) | BIT_WMAC_ANTSEL_SEL(v))

#define BIT_SHIFT_WMAC_RESP_TXPOWER_OFFSET_TYPE	18
#define BIT_MASK_WMAC_RESP_TXPOWER_OFFSET_TYPE	0x3
#define BIT_WMAC_RESP_TXPOWER_OFFSET_TYPE(x)		(((x) & BIT_MASK_WMAC_RESP_TXPOWER_OFFSET_TYPE) << BIT_SHIFT_WMAC_RESP_TXPOWER_OFFSET_TYPE)
#define BITS_WMAC_RESP_TXPOWER_OFFSET_TYPE		(BIT_MASK_WMAC_RESP_TXPOWER_OFFSET_TYPE << BIT_SHIFT_WMAC_RESP_TXPOWER_OFFSET_TYPE)
#define BIT_CLEAR_WMAC_RESP_TXPOWER_OFFSET_TYPE(x)	((x) & (~BITS_WMAC_RESP_TXPOWER_OFFSET_TYPE))
#define BIT_GET_WMAC_RESP_TXPOWER_OFFSET_TYPE(x)	(((x) >> BIT_SHIFT_WMAC_RESP_TXPOWER_OFFSET_TYPE) & BIT_MASK_WMAC_RESP_TXPOWER_OFFSET_TYPE)
#define BIT_SET_WMAC_RESP_TXPOWER_OFFSET_TYPE(x, v)	(BIT_CLEAR_WMAC_RESP_TXPOWER_OFFSET_TYPE(x) | BIT_WMAC_RESP_TXPOWER_OFFSET_TYPE(v))

#define BIT_SHIFT_WMAC_RESP_TXANT_V1			6
#define BIT_MASK_WMAC_RESP_TXANT_V1			0xfff
#define BIT_WMAC_RESP_TXANT_V1(x)			(((x) & BIT_MASK_WMAC_RESP_TXANT_V1) << BIT_SHIFT_WMAC_RESP_TXANT_V1)
#define BITS_WMAC_RESP_TXANT_V1			(BIT_MASK_WMAC_RESP_TXANT_V1 << BIT_SHIFT_WMAC_RESP_TXANT_V1)
#define BIT_CLEAR_WMAC_RESP_TXANT_V1(x)		((x) & (~BITS_WMAC_RESP_TXANT_V1))
#define BIT_GET_WMAC_RESP_TXANT_V1(x)			(((x) >> BIT_SHIFT_WMAC_RESP_TXANT_V1) & BIT_MASK_WMAC_RESP_TXANT_V1)
#define BIT_SET_WMAC_RESP_TXANT_V1(x, v)		(BIT_CLEAR_WMAC_RESP_TXANT_V1(x) | BIT_WMAC_RESP_TXANT_V1(v))

/* 2 REG_BBPSF_CTRL				(Offset 0x06DC) */

#define BIT_CTL_IDLE_CLR_CSI_RPT			BIT(31)
#define BIT_WMAC_USE_NDPARATE				BIT(30)

#define BIT_SHIFT_WMAC_CSI_RATE			24
#define BIT_MASK_WMAC_CSI_RATE				0x3f
#define BIT_WMAC_CSI_RATE(x)				(((x) & BIT_MASK_WMAC_CSI_RATE) << BIT_SHIFT_WMAC_CSI_RATE)
#define BITS_WMAC_CSI_RATE				(BIT_MASK_WMAC_CSI_RATE << BIT_SHIFT_WMAC_CSI_RATE)
#define BIT_CLEAR_WMAC_CSI_RATE(x)			((x) & (~BITS_WMAC_CSI_RATE))
#define BIT_GET_WMAC_CSI_RATE(x)			(((x) >> BIT_SHIFT_WMAC_CSI_RATE) & BIT_MASK_WMAC_CSI_RATE)
#define BIT_SET_WMAC_CSI_RATE(x, v)			(BIT_CLEAR_WMAC_CSI_RATE(x) | BIT_WMAC_CSI_RATE(v))

#define BIT_SHIFT_WMAC_RESP_TXRATE			16
#define BIT_MASK_WMAC_RESP_TXRATE			0xff
#define BIT_WMAC_RESP_TXRATE(x)			(((x) & BIT_MASK_WMAC_RESP_TXRATE) << BIT_SHIFT_WMAC_RESP_TXRATE)
#define BITS_WMAC_RESP_TXRATE				(BIT_MASK_WMAC_RESP_TXRATE << BIT_SHIFT_WMAC_RESP_TXRATE)
#define BIT_CLEAR_WMAC_RESP_TXRATE(x)			((x) & (~BITS_WMAC_RESP_TXRATE))
#define BIT_GET_WMAC_RESP_TXRATE(x)			(((x) >> BIT_SHIFT_WMAC_RESP_TXRATE) & BIT_MASK_WMAC_RESP_TXRATE)
#define BIT_SET_WMAC_RESP_TXRATE(x, v)			(BIT_CLEAR_WMAC_RESP_TXRATE(x) | BIT_WMAC_RESP_TXRATE(v))

#define BIT_CSI_FORCE_RATE_EN				BIT(15)

#define BIT_SHIFT_CSI_RSC				13
#define BIT_MASK_CSI_RSC				0x3
#define BIT_CSI_RSC(x)					(((x) & BIT_MASK_CSI_RSC) << BIT_SHIFT_CSI_RSC)
#define BITS_CSI_RSC					(BIT_MASK_CSI_RSC << BIT_SHIFT_CSI_RSC)
#define BIT_CLEAR_CSI_RSC(x)				((x) & (~BITS_CSI_RSC))
#define BIT_GET_CSI_RSC(x)				(((x) >> BIT_SHIFT_CSI_RSC) & BIT_MASK_CSI_RSC)
#define BIT_SET_CSI_RSC(x, v)				(BIT_CLEAR_CSI_RSC(x) | BIT_CSI_RSC(v))

#define BIT_CSI_GID_SEL				BIT(12)
#define BIT_NDPVLD_PROTECT_RDRDY_DIS			BIT(9)
#define BIT_RDCSI_EMPTY_APPZERO			BIT(8)
#define BIT_CSI_RATE_FB_EN				BIT(7)
#define BIT_RXFIFO_WRPTR_WO_CHKSUM			BIT(6)

/* 2 REG_P2P_RX_BCN_NOA			(Offset 0x06E0) */

#define BIT_NOA_PARSER_EN				BIT(15)

#define BIT_SHIFT_BSSID_SEL_V1				12
#define BIT_MASK_BSSID_SEL_V1				0x7
#define BIT_BSSID_SEL_V1(x)				(((x) & BIT_MASK_BSSID_SEL_V1) << BIT_SHIFT_BSSID_SEL_V1)
#define BITS_BSSID_SEL_V1				(BIT_MASK_BSSID_SEL_V1 << BIT_SHIFT_BSSID_SEL_V1)
#define BIT_CLEAR_BSSID_SEL_V1(x)			((x) & (~BITS_BSSID_SEL_V1))
#define BIT_GET_BSSID_SEL_V1(x)			(((x) >> BIT_SHIFT_BSSID_SEL_V1) & BIT_MASK_BSSID_SEL_V1)
#define BIT_SET_BSSID_SEL_V1(x, v)			(BIT_CLEAR_BSSID_SEL_V1(x) | BIT_BSSID_SEL_V1(v))

#define BIT_SHIFT_P2P_OUI_TYPE				0
#define BIT_MASK_P2P_OUI_TYPE				0xff
#define BIT_P2P_OUI_TYPE(x)				(((x) & BIT_MASK_P2P_OUI_TYPE) << BIT_SHIFT_P2P_OUI_TYPE)
#define BITS_P2P_OUI_TYPE				(BIT_MASK_P2P_OUI_TYPE << BIT_SHIFT_P2P_OUI_TYPE)
#define BIT_CLEAR_P2P_OUI_TYPE(x)			((x) & (~BITS_P2P_OUI_TYPE))
#define BIT_GET_P2P_OUI_TYPE(x)			(((x) >> BIT_SHIFT_P2P_OUI_TYPE) & BIT_MASK_P2P_OUI_TYPE)
#define BIT_SET_P2P_OUI_TYPE(x, v)			(BIT_CLEAR_P2P_OUI_TYPE(x) | BIT_P2P_OUI_TYPE(v))

/* 2 REG_ASSOCIATED_BFMER0_INFO		(Offset 0x06E4) */

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1		0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1		0xffffffffL
#define BIT_R_WMAC_SOUNDING_RXADD_R0_V1(x)		(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1)
#define BITS_R_WMAC_SOUNDING_RXADD_R0_V1		(BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1 << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_V1(x)	((x) & (~BITS_R_WMAC_SOUNDING_RXADD_R0_V1))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_R0_V1(x)	(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_R0_V1(x, v)	(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_V1(x) | BIT_R_WMAC_SOUNDING_RXADD_R0_V1(v))

/* 2 REG_ASSOCIATED_BFMER0_INFO_H		(Offset 0x06E8) */

#define BIT_SHIFT_R_WMAC_TXCSI_AID0			16
#define BIT_MASK_R_WMAC_TXCSI_AID0			0x1ff
#define BIT_R_WMAC_TXCSI_AID0(x)			(((x) & BIT_MASK_R_WMAC_TXCSI_AID0) << BIT_SHIFT_R_WMAC_TXCSI_AID0)
#define BITS_R_WMAC_TXCSI_AID0				(BIT_MASK_R_WMAC_TXCSI_AID0 << BIT_SHIFT_R_WMAC_TXCSI_AID0)
#define BIT_CLEAR_R_WMAC_TXCSI_AID0(x)			((x) & (~BITS_R_WMAC_TXCSI_AID0))
#define BIT_GET_R_WMAC_TXCSI_AID0(x)			(((x) >> BIT_SHIFT_R_WMAC_TXCSI_AID0) & BIT_MASK_R_WMAC_TXCSI_AID0)
#define BIT_SET_R_WMAC_TXCSI_AID0(x, v)		(BIT_CLEAR_R_WMAC_TXCSI_AID0(x) | BIT_R_WMAC_TXCSI_AID0(v))

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H_V1	0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H_V1	0xffff
#define BIT_R_WMAC_SOUNDING_RXADD_R0_H_V1(x)		(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H_V1) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H_V1)
#define BITS_R_WMAC_SOUNDING_RXADD_R0_H_V1		(BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H_V1 << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H_V1)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_H_V1(x)	((x) & (~BITS_R_WMAC_SOUNDING_RXADD_R0_H_V1))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_R0_H_V1(x)	(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H_V1) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H_V1)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_R0_H_V1(x, v)	(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_H_V1(x) | BIT_R_WMAC_SOUNDING_RXADD_R0_H_V1(v))

/* 2 REG_ASSOCIATED_BFMER1_INFO		(Offset 0x06EC) */

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_V1		0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_V1		0xffffffffL
#define BIT_R_WMAC_SOUNDING_RXADD_R1_V1(x)		(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_V1) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_V1)
#define BITS_R_WMAC_SOUNDING_RXADD_R1_V1		(BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_V1 << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_V1)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R1_V1(x)	((x) & (~BITS_R_WMAC_SOUNDING_RXADD_R1_V1))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_R1_V1(x)	(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_V1) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_V1)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_R1_V1(x, v)	(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R1_V1(x) | BIT_R_WMAC_SOUNDING_RXADD_R1_V1(v))

/* 2 REG_ASSOCIATED_BFMER1_INFO_H		(Offset 0x06F0) */

#define BIT_SHIFT_R_WMAC_TXCSI_AID1			16
#define BIT_MASK_R_WMAC_TXCSI_AID1			0x1ff
#define BIT_R_WMAC_TXCSI_AID1(x)			(((x) & BIT_MASK_R_WMAC_TXCSI_AID1) << BIT_SHIFT_R_WMAC_TXCSI_AID1)
#define BITS_R_WMAC_TXCSI_AID1				(BIT_MASK_R_WMAC_TXCSI_AID1 << BIT_SHIFT_R_WMAC_TXCSI_AID1)
#define BIT_CLEAR_R_WMAC_TXCSI_AID1(x)			((x) & (~BITS_R_WMAC_TXCSI_AID1))
#define BIT_GET_R_WMAC_TXCSI_AID1(x)			(((x) >> BIT_SHIFT_R_WMAC_TXCSI_AID1) & BIT_MASK_R_WMAC_TXCSI_AID1)
#define BIT_SET_R_WMAC_TXCSI_AID1(x, v)		(BIT_CLEAR_R_WMAC_TXCSI_AID1(x) | BIT_R_WMAC_TXCSI_AID1(v))

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_H_V1	0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_H_V1	0xffff
#define BIT_R_WMAC_SOUNDING_RXADD_R1_H_V1(x)		(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_H_V1) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_H_V1)
#define BITS_R_WMAC_SOUNDING_RXADD_R1_H_V1		(BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_H_V1 << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_H_V1)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R1_H_V1(x)	((x) & (~BITS_R_WMAC_SOUNDING_RXADD_R1_H_V1))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_R1_H_V1(x)	(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R1_H_V1) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R1_H_V1)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_R1_H_V1(x, v)	(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R1_H_V1(x) | BIT_R_WMAC_SOUNDING_RXADD_R1_H_V1(v))

/* 2 REG_TX_CSI_RPT_PARAM_BW20		(Offset 0x06F4) */

#define BIT_SHIFT_R_WMAC_BFINFO_20M_1			16
#define BIT_MASK_R_WMAC_BFINFO_20M_1			0xfff
#define BIT_R_WMAC_BFINFO_20M_1(x)			(((x) & BIT_MASK_R_WMAC_BFINFO_20M_1) << BIT_SHIFT_R_WMAC_BFINFO_20M_1)
#define BITS_R_WMAC_BFINFO_20M_1			(BIT_MASK_R_WMAC_BFINFO_20M_1 << BIT_SHIFT_R_WMAC_BFINFO_20M_1)
#define BIT_CLEAR_R_WMAC_BFINFO_20M_1(x)		((x) & (~BITS_R_WMAC_BFINFO_20M_1))
#define BIT_GET_R_WMAC_BFINFO_20M_1(x)			(((x) >> BIT_SHIFT_R_WMAC_BFINFO_20M_1) & BIT_MASK_R_WMAC_BFINFO_20M_1)
#define BIT_SET_R_WMAC_BFINFO_20M_1(x, v)		(BIT_CLEAR_R_WMAC_BFINFO_20M_1(x) | BIT_R_WMAC_BFINFO_20M_1(v))

#define BIT_SHIFT_R_WMAC_BFINFO_20M_0			0
#define BIT_MASK_R_WMAC_BFINFO_20M_0			0xfff
#define BIT_R_WMAC_BFINFO_20M_0(x)			(((x) & BIT_MASK_R_WMAC_BFINFO_20M_0) << BIT_SHIFT_R_WMAC_BFINFO_20M_0)
#define BITS_R_WMAC_BFINFO_20M_0			(BIT_MASK_R_WMAC_BFINFO_20M_0 << BIT_SHIFT_R_WMAC_BFINFO_20M_0)
#define BIT_CLEAR_R_WMAC_BFINFO_20M_0(x)		((x) & (~BITS_R_WMAC_BFINFO_20M_0))
#define BIT_GET_R_WMAC_BFINFO_20M_0(x)			(((x) >> BIT_SHIFT_R_WMAC_BFINFO_20M_0) & BIT_MASK_R_WMAC_BFINFO_20M_0)
#define BIT_SET_R_WMAC_BFINFO_20M_0(x, v)		(BIT_CLEAR_R_WMAC_BFINFO_20M_0(x) | BIT_R_WMAC_BFINFO_20M_0(v))

/* 2 REG_TX_CSI_RPT_PARAM_BW40		(Offset 0x06F8) */

#define BIT_SHIFT_WMAC_RESP_ANTD			12
#define BIT_MASK_WMAC_RESP_ANTD			0xf
#define BIT_WMAC_RESP_ANTD(x)				(((x) & BIT_MASK_WMAC_RESP_ANTD) << BIT_SHIFT_WMAC_RESP_ANTD)
#define BITS_WMAC_RESP_ANTD				(BIT_MASK_WMAC_RESP_ANTD << BIT_SHIFT_WMAC_RESP_ANTD)
#define BIT_CLEAR_WMAC_RESP_ANTD(x)			((x) & (~BITS_WMAC_RESP_ANTD))
#define BIT_GET_WMAC_RESP_ANTD(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTD) & BIT_MASK_WMAC_RESP_ANTD)
#define BIT_SET_WMAC_RESP_ANTD(x, v)			(BIT_CLEAR_WMAC_RESP_ANTD(x) | BIT_WMAC_RESP_ANTD(v))

#define BIT_SHIFT_WMAC_RESP_ANTC			8
#define BIT_MASK_WMAC_RESP_ANTC			0xf
#define BIT_WMAC_RESP_ANTC(x)				(((x) & BIT_MASK_WMAC_RESP_ANTC) << BIT_SHIFT_WMAC_RESP_ANTC)
#define BITS_WMAC_RESP_ANTC				(BIT_MASK_WMAC_RESP_ANTC << BIT_SHIFT_WMAC_RESP_ANTC)
#define BIT_CLEAR_WMAC_RESP_ANTC(x)			((x) & (~BITS_WMAC_RESP_ANTC))
#define BIT_GET_WMAC_RESP_ANTC(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTC) & BIT_MASK_WMAC_RESP_ANTC)
#define BIT_SET_WMAC_RESP_ANTC(x, v)			(BIT_CLEAR_WMAC_RESP_ANTC(x) | BIT_WMAC_RESP_ANTC(v))

#define BIT_SHIFT_WMAC_RESP_ANTB			4
#define BIT_MASK_WMAC_RESP_ANTB			0xf
#define BIT_WMAC_RESP_ANTB(x)				(((x) & BIT_MASK_WMAC_RESP_ANTB) << BIT_SHIFT_WMAC_RESP_ANTB)
#define BITS_WMAC_RESP_ANTB				(BIT_MASK_WMAC_RESP_ANTB << BIT_SHIFT_WMAC_RESP_ANTB)
#define BIT_CLEAR_WMAC_RESP_ANTB(x)			((x) & (~BITS_WMAC_RESP_ANTB))
#define BIT_GET_WMAC_RESP_ANTB(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTB) & BIT_MASK_WMAC_RESP_ANTB)
#define BIT_SET_WMAC_RESP_ANTB(x, v)			(BIT_CLEAR_WMAC_RESP_ANTB(x) | BIT_WMAC_RESP_ANTB(v))

#define BIT_SHIFT_WMAC_RESP_ANTA			0
#define BIT_MASK_WMAC_RESP_ANTA			0xf
#define BIT_WMAC_RESP_ANTA(x)				(((x) & BIT_MASK_WMAC_RESP_ANTA) << BIT_SHIFT_WMAC_RESP_ANTA)
#define BITS_WMAC_RESP_ANTA				(BIT_MASK_WMAC_RESP_ANTA << BIT_SHIFT_WMAC_RESP_ANTA)
#define BIT_CLEAR_WMAC_RESP_ANTA(x)			((x) & (~BITS_WMAC_RESP_ANTA))
#define BIT_GET_WMAC_RESP_ANTA(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTA) & BIT_MASK_WMAC_RESP_ANTA)
#define BIT_SET_WMAC_RESP_ANTA(x, v)			(BIT_CLEAR_WMAC_RESP_ANTA(x) | BIT_WMAC_RESP_ANTA(v))

/* 2 REG_CSI_PTR				(Offset 0x06FC) */

#define BIT_SHIFT_CSI_RADDR_LATCH_V2			16
#define BIT_MASK_CSI_RADDR_LATCH_V2			0xffff
#define BIT_CSI_RADDR_LATCH_V2(x)			(((x) & BIT_MASK_CSI_RADDR_LATCH_V2) << BIT_SHIFT_CSI_RADDR_LATCH_V2)
#define BITS_CSI_RADDR_LATCH_V2			(BIT_MASK_CSI_RADDR_LATCH_V2 << BIT_SHIFT_CSI_RADDR_LATCH_V2)
#define BIT_CLEAR_CSI_RADDR_LATCH_V2(x)		((x) & (~BITS_CSI_RADDR_LATCH_V2))
#define BIT_GET_CSI_RADDR_LATCH_V2(x)			(((x) >> BIT_SHIFT_CSI_RADDR_LATCH_V2) & BIT_MASK_CSI_RADDR_LATCH_V2)
#define BIT_SET_CSI_RADDR_LATCH_V2(x, v)		(BIT_CLEAR_CSI_RADDR_LATCH_V2(x) | BIT_CSI_RADDR_LATCH_V2(v))

#define BIT_SHIFT_CSI_WADDR_LATCH_V2			0
#define BIT_MASK_CSI_WADDR_LATCH_V2			0xffff
#define BIT_CSI_WADDR_LATCH_V2(x)			(((x) & BIT_MASK_CSI_WADDR_LATCH_V2) << BIT_SHIFT_CSI_WADDR_LATCH_V2)
#define BITS_CSI_WADDR_LATCH_V2			(BIT_MASK_CSI_WADDR_LATCH_V2 << BIT_SHIFT_CSI_WADDR_LATCH_V2)
#define BIT_CLEAR_CSI_WADDR_LATCH_V2(x)		((x) & (~BITS_CSI_WADDR_LATCH_V2))
#define BIT_GET_CSI_WADDR_LATCH_V2(x)			(((x) >> BIT_SHIFT_CSI_WADDR_LATCH_V2) & BIT_MASK_CSI_WADDR_LATCH_V2)
#define BIT_SET_CSI_WADDR_LATCH_V2(x, v)		(BIT_CLEAR_CSI_WADDR_LATCH_V2(x) | BIT_CSI_WADDR_LATCH_V2(v))

/* 2 REG_MACID1				(Offset 0x0700) */

#define BIT_SHIFT_MACID1_0				0
#define BIT_MASK_MACID1_0				0xffffffffL
#define BIT_MACID1_0(x)				(((x) & BIT_MASK_MACID1_0) << BIT_SHIFT_MACID1_0)
#define BITS_MACID1_0					(BIT_MASK_MACID1_0 << BIT_SHIFT_MACID1_0)
#define BIT_CLEAR_MACID1_0(x)				((x) & (~BITS_MACID1_0))
#define BIT_GET_MACID1_0(x)				(((x) >> BIT_SHIFT_MACID1_0) & BIT_MASK_MACID1_0)
#define BIT_SET_MACID1_0(x, v)				(BIT_CLEAR_MACID1_0(x) | BIT_MACID1_0(v))

/* 2 REG_MACID1_1				(Offset 0x0704) */

#define BIT_SHIFT_MACID1_1				0
#define BIT_MASK_MACID1_1				0xffff
#define BIT_MACID1_1(x)				(((x) & BIT_MASK_MACID1_1) << BIT_SHIFT_MACID1_1)
#define BITS_MACID1_1					(BIT_MASK_MACID1_1 << BIT_SHIFT_MACID1_1)
#define BIT_CLEAR_MACID1_1(x)				((x) & (~BITS_MACID1_1))
#define BIT_GET_MACID1_1(x)				(((x) >> BIT_SHIFT_MACID1_1) & BIT_MASK_MACID1_1)
#define BIT_SET_MACID1_1(x, v)				(BIT_CLEAR_MACID1_1(x) | BIT_MACID1_1(v))

/* 2 REG_BSSID1				(Offset 0x0708) */

#define BIT_SHIFT_BSSID1_0				0
#define BIT_MASK_BSSID1_0				0xffffffffL
#define BIT_BSSID1_0(x)				(((x) & BIT_MASK_BSSID1_0) << BIT_SHIFT_BSSID1_0)
#define BITS_BSSID1_0					(BIT_MASK_BSSID1_0 << BIT_SHIFT_BSSID1_0)
#define BIT_CLEAR_BSSID1_0(x)				((x) & (~BITS_BSSID1_0))
#define BIT_GET_BSSID1_0(x)				(((x) >> BIT_SHIFT_BSSID1_0) & BIT_MASK_BSSID1_0)
#define BIT_SET_BSSID1_0(x, v)				(BIT_CLEAR_BSSID1_0(x) | BIT_BSSID1_0(v))

/* 2 REG_BSSID1_1				(Offset 0x070C) */

#define BIT_SHIFT_BSSID1_1				0
#define BIT_MASK_BSSID1_1				0xffff
#define BIT_BSSID1_1(x)				(((x) & BIT_MASK_BSSID1_1) << BIT_SHIFT_BSSID1_1)
#define BITS_BSSID1_1					(BIT_MASK_BSSID1_1 << BIT_SHIFT_BSSID1_1)
#define BIT_CLEAR_BSSID1_1(x)				((x) & (~BITS_BSSID1_1))
#define BIT_GET_BSSID1_1(x)				(((x) >> BIT_SHIFT_BSSID1_1) & BIT_MASK_BSSID1_1)
#define BIT_SET_BSSID1_1(x, v)				(BIT_CLEAR_BSSID1_1(x) | BIT_BSSID1_1(v))

/* 2 REG_BCN_PSR_RPT1			(Offset 0x0710) */

#define BIT_SHIFT_DTIM_CNT1				24
#define BIT_MASK_DTIM_CNT1				0xff
#define BIT_DTIM_CNT1(x)				(((x) & BIT_MASK_DTIM_CNT1) << BIT_SHIFT_DTIM_CNT1)
#define BITS_DTIM_CNT1					(BIT_MASK_DTIM_CNT1 << BIT_SHIFT_DTIM_CNT1)
#define BIT_CLEAR_DTIM_CNT1(x)				((x) & (~BITS_DTIM_CNT1))
#define BIT_GET_DTIM_CNT1(x)				(((x) >> BIT_SHIFT_DTIM_CNT1) & BIT_MASK_DTIM_CNT1)
#define BIT_SET_DTIM_CNT1(x, v)			(BIT_CLEAR_DTIM_CNT1(x) | BIT_DTIM_CNT1(v))

#define BIT_SHIFT_DTIM_PERIOD1				16
#define BIT_MASK_DTIM_PERIOD1				0xff
#define BIT_DTIM_PERIOD1(x)				(((x) & BIT_MASK_DTIM_PERIOD1) << BIT_SHIFT_DTIM_PERIOD1)
#define BITS_DTIM_PERIOD1				(BIT_MASK_DTIM_PERIOD1 << BIT_SHIFT_DTIM_PERIOD1)
#define BIT_CLEAR_DTIM_PERIOD1(x)			((x) & (~BITS_DTIM_PERIOD1))
#define BIT_GET_DTIM_PERIOD1(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD1) & BIT_MASK_DTIM_PERIOD1)
#define BIT_SET_DTIM_PERIOD1(x, v)			(BIT_CLEAR_DTIM_PERIOD1(x) | BIT_DTIM_PERIOD1(v))

#define BIT_DTIM1					BIT(15)
#define BIT_TIM1					BIT(14)
#define BIT_BCN_VALID_V2				BIT(13)

#define BIT_SHIFT_PS_AID_1				0
#define BIT_MASK_PS_AID_1				0x7ff
#define BIT_PS_AID_1(x)				(((x) & BIT_MASK_PS_AID_1) << BIT_SHIFT_PS_AID_1)
#define BITS_PS_AID_1					(BIT_MASK_PS_AID_1 << BIT_SHIFT_PS_AID_1)
#define BIT_CLEAR_PS_AID_1(x)				((x) & (~BITS_PS_AID_1))
#define BIT_GET_PS_AID_1(x)				(((x) >> BIT_SHIFT_PS_AID_1) & BIT_MASK_PS_AID_1)
#define BIT_SET_PS_AID_1(x, v)				(BIT_CLEAR_PS_AID_1(x) | BIT_PS_AID_1(v))

/* 2 REG_ASSOCIATED_BFMEE_SEL		(Offset 0x0714) */

#define BIT_TXUSER_ID1					BIT(25)

#define BIT_SHIFT_AID1					16
#define BIT_MASK_AID1					0x1ff
#define BIT_AID1(x)					(((x) & BIT_MASK_AID1) << BIT_SHIFT_AID1)
#define BITS_AID1					(BIT_MASK_AID1 << BIT_SHIFT_AID1)
#define BIT_CLEAR_AID1(x)				((x) & (~BITS_AID1))
#define BIT_GET_AID1(x)				(((x) >> BIT_SHIFT_AID1) & BIT_MASK_AID1)
#define BIT_SET_AID1(x, v)				(BIT_CLEAR_AID1(x) | BIT_AID1(v))

#define BIT_TXUSER_ID0					BIT(9)

#define BIT_SHIFT_AID0					0
#define BIT_MASK_AID0					0x1ff
#define BIT_AID0(x)					(((x) & BIT_MASK_AID0) << BIT_SHIFT_AID0)
#define BITS_AID0					(BIT_MASK_AID0 << BIT_SHIFT_AID0)
#define BIT_CLEAR_AID0(x)				((x) & (~BITS_AID0))
#define BIT_GET_AID0(x)				(((x) >> BIT_SHIFT_AID0) & BIT_MASK_AID0)
#define BIT_SET_AID0(x, v)				(BIT_CLEAR_AID0(x) | BIT_AID0(v))

/* 2 REG_SND_PTCL_CTRL			(Offset 0x0718) */

#define BIT_SHIFT_NDP_RX_STANDBY_TIMER			24
#define BIT_MASK_NDP_RX_STANDBY_TIMER			0xff
#define BIT_NDP_RX_STANDBY_TIMER(x)			(((x) & BIT_MASK_NDP_RX_STANDBY_TIMER) << BIT_SHIFT_NDP_RX_STANDBY_TIMER)
#define BITS_NDP_RX_STANDBY_TIMER			(BIT_MASK_NDP_RX_STANDBY_TIMER << BIT_SHIFT_NDP_RX_STANDBY_TIMER)
#define BIT_CLEAR_NDP_RX_STANDBY_TIMER(x)		((x) & (~BITS_NDP_RX_STANDBY_TIMER))
#define BIT_GET_NDP_RX_STANDBY_TIMER(x)		(((x) >> BIT_SHIFT_NDP_RX_STANDBY_TIMER) & BIT_MASK_NDP_RX_STANDBY_TIMER)
#define BIT_SET_NDP_RX_STANDBY_TIMER(x, v)		(BIT_CLEAR_NDP_RX_STANDBY_TIMER(x) | BIT_NDP_RX_STANDBY_TIMER(v))

#define BIT_R_WMAC_CHK_RPTPOLL_A2_DIS			BIT(23)
#define BIT_R_WMAC_CHK_UCNDPA_A2_DIS			BIT(22)

#define BIT_SHIFT_CSI_RPT_OFFSET_HT_V1			16
#define BIT_MASK_CSI_RPT_OFFSET_HT_V1			0x3f
#define BIT_CSI_RPT_OFFSET_HT_V1(x)			(((x) & BIT_MASK_CSI_RPT_OFFSET_HT_V1) << BIT_SHIFT_CSI_RPT_OFFSET_HT_V1)
#define BITS_CSI_RPT_OFFSET_HT_V1			(BIT_MASK_CSI_RPT_OFFSET_HT_V1 << BIT_SHIFT_CSI_RPT_OFFSET_HT_V1)
#define BIT_CLEAR_CSI_RPT_OFFSET_HT_V1(x)		((x) & (~BITS_CSI_RPT_OFFSET_HT_V1))
#define BIT_GET_CSI_RPT_OFFSET_HT_V1(x)		(((x) >> BIT_SHIFT_CSI_RPT_OFFSET_HT_V1) & BIT_MASK_CSI_RPT_OFFSET_HT_V1)
#define BIT_SET_CSI_RPT_OFFSET_HT_V1(x, v)		(BIT_CLEAR_CSI_RPT_OFFSET_HT_V1(x) | BIT_CSI_RPT_OFFSET_HT_V1(v))

#define BIT_R_WMAC_OFFSET_RPTPOLL_EN			BIT(15)
#define BIT_R_WMAC_CSI_CHKSUM_DIS			BIT(14)

#define BIT_SHIFT_R_WMAC_VHT_CATEGORY_V1		8
#define BIT_MASK_R_WMAC_VHT_CATEGORY_V1		0x3f
#define BIT_R_WMAC_VHT_CATEGORY_V1(x)			(((x) & BIT_MASK_R_WMAC_VHT_CATEGORY_V1) << BIT_SHIFT_R_WMAC_VHT_CATEGORY_V1)
#define BITS_R_WMAC_VHT_CATEGORY_V1			(BIT_MASK_R_WMAC_VHT_CATEGORY_V1 << BIT_SHIFT_R_WMAC_VHT_CATEGORY_V1)
#define BIT_CLEAR_R_WMAC_VHT_CATEGORY_V1(x)		((x) & (~BITS_R_WMAC_VHT_CATEGORY_V1))
#define BIT_GET_R_WMAC_VHT_CATEGORY_V1(x)		(((x) >> BIT_SHIFT_R_WMAC_VHT_CATEGORY_V1) & BIT_MASK_R_WMAC_VHT_CATEGORY_V1)
#define BIT_SET_R_WMAC_VHT_CATEGORY_V1(x, v)		(BIT_CLEAR_R_WMAC_VHT_CATEGORY_V1(x) | BIT_R_WMAC_VHT_CATEGORY_V1(v))

#define BIT_R_WMAC_USE_NSTS				BIT(7)
#define BIT_R_DISABLE_CHECK_VHTSIGB_CRC		BIT(6)
#define BIT_R_DISABLE_CHECK_VHTSIGA_CRC		BIT(5)
#define BIT_R_WMAC_BFPARAM_SEL				BIT(4)
#define BIT_R_WMAC_CSISEQ_SEL				BIT(3)
#define BIT_R_WMAC_CSI_WITHHTC_EN			BIT(2)
#define BIT_R_WMAC_HT_NDPA_EN				BIT(1)
#define BIT_R_WMAC_VHT_NDPA_EN				BIT(0)

/* 2 REG_RX_CSI_RPT_INFO			(Offset 0x071C) */

#define BIT_WRITE_ENABLE				BIT(31)
#define BIT_WMAC_CHECK_SOUNDING_SEQ			BIT(30)

#define BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD		1
#define BIT_MASK_VHTHT_MIMO_CTRL_FIELD			0xffffff
#define BIT_VHTHT_MIMO_CTRL_FIELD(x)			(((x) & BIT_MASK_VHTHT_MIMO_CTRL_FIELD) << BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD)
#define BITS_VHTHT_MIMO_CTRL_FIELD			(BIT_MASK_VHTHT_MIMO_CTRL_FIELD << BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD)
#define BIT_CLEAR_VHTHT_MIMO_CTRL_FIELD(x)		((x) & (~BITS_VHTHT_MIMO_CTRL_FIELD))
#define BIT_GET_VHTHT_MIMO_CTRL_FIELD(x)		(((x) >> BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD) & BIT_MASK_VHTHT_MIMO_CTRL_FIELD)
#define BIT_SET_VHTHT_MIMO_CTRL_FIELD(x, v)		(BIT_CLEAR_VHTHT_MIMO_CTRL_FIELD(x) | BIT_VHTHT_MIMO_CTRL_FIELD(v))

#define BIT_CSI_INTRRUPT_STATUS			BIT(0)

/* 2 REG_NS_ARP_CTRL				(Offset 0x0720) */

#define BIT_R_WMAC_NSARP_RSPEN				BIT(15)
#define BIT_R_WMAC_NSARP_RARP				BIT(9)
#define BIT_R_WMAC_NSARP_RIPV6				BIT(8)

#define BIT_SHIFT_R_WMAC_NSARP_MODEN			6
#define BIT_MASK_R_WMAC_NSARP_MODEN			0x3
#define BIT_R_WMAC_NSARP_MODEN(x)			(((x) & BIT_MASK_R_WMAC_NSARP_MODEN) << BIT_SHIFT_R_WMAC_NSARP_MODEN)
#define BITS_R_WMAC_NSARP_MODEN			(BIT_MASK_R_WMAC_NSARP_MODEN << BIT_SHIFT_R_WMAC_NSARP_MODEN)
#define BIT_CLEAR_R_WMAC_NSARP_MODEN(x)		((x) & (~BITS_R_WMAC_NSARP_MODEN))
#define BIT_GET_R_WMAC_NSARP_MODEN(x)			(((x) >> BIT_SHIFT_R_WMAC_NSARP_MODEN) & BIT_MASK_R_WMAC_NSARP_MODEN)
#define BIT_SET_R_WMAC_NSARP_MODEN(x, v)		(BIT_CLEAR_R_WMAC_NSARP_MODEN(x) | BIT_R_WMAC_NSARP_MODEN(v))

#define BIT_SHIFT_R_WMAC_NSARP_RSPFTP			4
#define BIT_MASK_R_WMAC_NSARP_RSPFTP			0x3
#define BIT_R_WMAC_NSARP_RSPFTP(x)			(((x) & BIT_MASK_R_WMAC_NSARP_RSPFTP) << BIT_SHIFT_R_WMAC_NSARP_RSPFTP)
#define BITS_R_WMAC_NSARP_RSPFTP			(BIT_MASK_R_WMAC_NSARP_RSPFTP << BIT_SHIFT_R_WMAC_NSARP_RSPFTP)
#define BIT_CLEAR_R_WMAC_NSARP_RSPFTP(x)		((x) & (~BITS_R_WMAC_NSARP_RSPFTP))
#define BIT_GET_R_WMAC_NSARP_RSPFTP(x)			(((x) >> BIT_SHIFT_R_WMAC_NSARP_RSPFTP) & BIT_MASK_R_WMAC_NSARP_RSPFTP)
#define BIT_SET_R_WMAC_NSARP_RSPFTP(x, v)		(BIT_CLEAR_R_WMAC_NSARP_RSPFTP(x) | BIT_R_WMAC_NSARP_RSPFTP(v))

#define BIT_SHIFT_R_WMAC_NSARP_RSPSEC			0
#define BIT_MASK_R_WMAC_NSARP_RSPSEC			0xf
#define BIT_R_WMAC_NSARP_RSPSEC(x)			(((x) & BIT_MASK_R_WMAC_NSARP_RSPSEC) << BIT_SHIFT_R_WMAC_NSARP_RSPSEC)
#define BITS_R_WMAC_NSARP_RSPSEC			(BIT_MASK_R_WMAC_NSARP_RSPSEC << BIT_SHIFT_R_WMAC_NSARP_RSPSEC)
#define BIT_CLEAR_R_WMAC_NSARP_RSPSEC(x)		((x) & (~BITS_R_WMAC_NSARP_RSPSEC))
#define BIT_GET_R_WMAC_NSARP_RSPSEC(x)			(((x) >> BIT_SHIFT_R_WMAC_NSARP_RSPSEC) & BIT_MASK_R_WMAC_NSARP_RSPSEC)
#define BIT_SET_R_WMAC_NSARP_RSPSEC(x, v)		(BIT_CLEAR_R_WMAC_NSARP_RSPSEC(x) | BIT_R_WMAC_NSARP_RSPSEC(v))

/* 2 REG_NS_ARP_INFO				(Offset 0x0724) */

#define BIT_REQ_IS_MCNS				BIT(23)
#define BIT_REQ_IS_UCNS				BIT(22)
#define BIT_REQ_IS_USNS				BIT(21)
#define BIT_REQ_IS_ARP					BIT(20)
#define BIT_EXPRSP_MH_WITHQC				BIT(19)

#define BIT_SHIFT_EXPRSP_SECTYPE			16
#define BIT_MASK_EXPRSP_SECTYPE			0x7
#define BIT_EXPRSP_SECTYPE(x)				(((x) & BIT_MASK_EXPRSP_SECTYPE) << BIT_SHIFT_EXPRSP_SECTYPE)
#define BITS_EXPRSP_SECTYPE				(BIT_MASK_EXPRSP_SECTYPE << BIT_SHIFT_EXPRSP_SECTYPE)
#define BIT_CLEAR_EXPRSP_SECTYPE(x)			((x) & (~BITS_EXPRSP_SECTYPE))
#define BIT_GET_EXPRSP_SECTYPE(x)			(((x) >> BIT_SHIFT_EXPRSP_SECTYPE) & BIT_MASK_EXPRSP_SECTYPE)
#define BIT_SET_EXPRSP_SECTYPE(x, v)			(BIT_CLEAR_EXPRSP_SECTYPE(x) | BIT_EXPRSP_SECTYPE(v))

#define BIT_SHIFT_EXPRSP_CHKSM_7_TO_0			8
#define BIT_MASK_EXPRSP_CHKSM_7_TO_0			0xff
#define BIT_EXPRSP_CHKSM_7_TO_0(x)			(((x) & BIT_MASK_EXPRSP_CHKSM_7_TO_0) << BIT_SHIFT_EXPRSP_CHKSM_7_TO_0)
#define BITS_EXPRSP_CHKSM_7_TO_0			(BIT_MASK_EXPRSP_CHKSM_7_TO_0 << BIT_SHIFT_EXPRSP_CHKSM_7_TO_0)
#define BIT_CLEAR_EXPRSP_CHKSM_7_TO_0(x)		((x) & (~BITS_EXPRSP_CHKSM_7_TO_0))
#define BIT_GET_EXPRSP_CHKSM_7_TO_0(x)			(((x) >> BIT_SHIFT_EXPRSP_CHKSM_7_TO_0) & BIT_MASK_EXPRSP_CHKSM_7_TO_0)
#define BIT_SET_EXPRSP_CHKSM_7_TO_0(x, v)		(BIT_CLEAR_EXPRSP_CHKSM_7_TO_0(x) | BIT_EXPRSP_CHKSM_7_TO_0(v))

#define BIT_SHIFT_EXPRSP_CHKSM_15_TO_8			0
#define BIT_MASK_EXPRSP_CHKSM_15_TO_8			0xff
#define BIT_EXPRSP_CHKSM_15_TO_8(x)			(((x) & BIT_MASK_EXPRSP_CHKSM_15_TO_8) << BIT_SHIFT_EXPRSP_CHKSM_15_TO_8)
#define BITS_EXPRSP_CHKSM_15_TO_8			(BIT_MASK_EXPRSP_CHKSM_15_TO_8 << BIT_SHIFT_EXPRSP_CHKSM_15_TO_8)
#define BIT_CLEAR_EXPRSP_CHKSM_15_TO_8(x)		((x) & (~BITS_EXPRSP_CHKSM_15_TO_8))
#define BIT_GET_EXPRSP_CHKSM_15_TO_8(x)		(((x) >> BIT_SHIFT_EXPRSP_CHKSM_15_TO_8) & BIT_MASK_EXPRSP_CHKSM_15_TO_8)
#define BIT_SET_EXPRSP_CHKSM_15_TO_8(x, v)		(BIT_CLEAR_EXPRSP_CHKSM_15_TO_8(x) | BIT_EXPRSP_CHKSM_15_TO_8(v))

/* 2 REG_BEAMFORMING_INFO_NSARP_V1		(Offset 0x0728) */

#define BIT_SHIFT_WMAC_ARPIP				0
#define BIT_MASK_WMAC_ARPIP				0xffffffffL
#define BIT_WMAC_ARPIP(x)				(((x) & BIT_MASK_WMAC_ARPIP) << BIT_SHIFT_WMAC_ARPIP)
#define BITS_WMAC_ARPIP				(BIT_MASK_WMAC_ARPIP << BIT_SHIFT_WMAC_ARPIP)
#define BIT_CLEAR_WMAC_ARPIP(x)			((x) & (~BITS_WMAC_ARPIP))
#define BIT_GET_WMAC_ARPIP(x)				(((x) >> BIT_SHIFT_WMAC_ARPIP) & BIT_MASK_WMAC_ARPIP)
#define BIT_SET_WMAC_ARPIP(x, v)			(BIT_CLEAR_WMAC_ARPIP(x) | BIT_WMAC_ARPIP(v))

/* 2 REG_BEAMFORMING_INFO_NSARP		(Offset 0x072C) */

#define BIT_SHIFT_UPD_BFMEE_USERID			13
#define BIT_MASK_UPD_BFMEE_USERID			0x7
#define BIT_UPD_BFMEE_USERID(x)			(((x) & BIT_MASK_UPD_BFMEE_USERID) << BIT_SHIFT_UPD_BFMEE_USERID)
#define BITS_UPD_BFMEE_USERID				(BIT_MASK_UPD_BFMEE_USERID << BIT_SHIFT_UPD_BFMEE_USERID)
#define BIT_CLEAR_UPD_BFMEE_USERID(x)			((x) & (~BITS_UPD_BFMEE_USERID))
#define BIT_GET_UPD_BFMEE_USERID(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_USERID) & BIT_MASK_UPD_BFMEE_USERID)
#define BIT_SET_UPD_BFMEE_USERID(x, v)			(BIT_CLEAR_UPD_BFMEE_USERID(x) | BIT_UPD_BFMEE_USERID(v))

#define BIT_UPD_BFMEE_FBTP				BIT(12)

#define BIT_SHIFT_UPD_BFMEE_CB				8
#define BIT_MASK_UPD_BFMEE_CB				0x3
#define BIT_UPD_BFMEE_CB(x)				(((x) & BIT_MASK_UPD_BFMEE_CB) << BIT_SHIFT_UPD_BFMEE_CB)
#define BITS_UPD_BFMEE_CB				(BIT_MASK_UPD_BFMEE_CB << BIT_SHIFT_UPD_BFMEE_CB)
#define BIT_CLEAR_UPD_BFMEE_CB(x)			((x) & (~BITS_UPD_BFMEE_CB))
#define BIT_GET_UPD_BFMEE_CB(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_CB) & BIT_MASK_UPD_BFMEE_CB)
#define BIT_SET_UPD_BFMEE_CB(x, v)			(BIT_CLEAR_UPD_BFMEE_CB(x) | BIT_UPD_BFMEE_CB(v))

#define BIT_SHIFT_UPD_BFMEE_NG				6
#define BIT_MASK_UPD_BFMEE_NG				0x3
#define BIT_UPD_BFMEE_NG(x)				(((x) & BIT_MASK_UPD_BFMEE_NG) << BIT_SHIFT_UPD_BFMEE_NG)
#define BITS_UPD_BFMEE_NG				(BIT_MASK_UPD_BFMEE_NG << BIT_SHIFT_UPD_BFMEE_NG)
#define BIT_CLEAR_UPD_BFMEE_NG(x)			((x) & (~BITS_UPD_BFMEE_NG))
#define BIT_GET_UPD_BFMEE_NG(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_NG) & BIT_MASK_UPD_BFMEE_NG)
#define BIT_SET_UPD_BFMEE_NG(x, v)			(BIT_CLEAR_UPD_BFMEE_NG(x) | BIT_UPD_BFMEE_NG(v))

#define BIT_SHIFT_UPD_BFMEE_NR				3
#define BIT_MASK_UPD_BFMEE_NR				0x7
#define BIT_UPD_BFMEE_NR(x)				(((x) & BIT_MASK_UPD_BFMEE_NR) << BIT_SHIFT_UPD_BFMEE_NR)
#define BITS_UPD_BFMEE_NR				(BIT_MASK_UPD_BFMEE_NR << BIT_SHIFT_UPD_BFMEE_NR)
#define BIT_CLEAR_UPD_BFMEE_NR(x)			((x) & (~BITS_UPD_BFMEE_NR))
#define BIT_GET_UPD_BFMEE_NR(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_NR) & BIT_MASK_UPD_BFMEE_NR)
#define BIT_SET_UPD_BFMEE_NR(x, v)			(BIT_CLEAR_UPD_BFMEE_NR(x) | BIT_UPD_BFMEE_NR(v))

#define BIT_SHIFT_UPD_BFMEE_BW				0
#define BIT_MASK_UPD_BFMEE_BW				0xfff
#define BIT_UPD_BFMEE_BW(x)				(((x) & BIT_MASK_UPD_BFMEE_BW) << BIT_SHIFT_UPD_BFMEE_BW)
#define BITS_UPD_BFMEE_BW				(BIT_MASK_UPD_BFMEE_BW << BIT_SHIFT_UPD_BFMEE_BW)
#define BIT_CLEAR_UPD_BFMEE_BW(x)			((x) & (~BITS_UPD_BFMEE_BW))
#define BIT_GET_UPD_BFMEE_BW(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_BW) & BIT_MASK_UPD_BFMEE_BW)
#define BIT_SET_UPD_BFMEE_BW(x, v)			(BIT_CLEAR_UPD_BFMEE_BW(x) | BIT_UPD_BFMEE_BW(v))

#define BIT_SHIFT_UPD_BFMEE_NC				0
#define BIT_MASK_UPD_BFMEE_NC				0x7
#define BIT_UPD_BFMEE_NC(x)				(((x) & BIT_MASK_UPD_BFMEE_NC) << BIT_SHIFT_UPD_BFMEE_NC)
#define BITS_UPD_BFMEE_NC				(BIT_MASK_UPD_BFMEE_NC << BIT_SHIFT_UPD_BFMEE_NC)
#define BIT_CLEAR_UPD_BFMEE_NC(x)			((x) & (~BITS_UPD_BFMEE_NC))
#define BIT_GET_UPD_BFMEE_NC(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_NC) & BIT_MASK_UPD_BFMEE_NC)
#define BIT_SET_UPD_BFMEE_NC(x, v)			(BIT_CLEAR_UPD_BFMEE_NC(x) | BIT_UPD_BFMEE_NC(v))

/* 2 REG_IPV6				(Offset 0x0730) */

#define BIT_SHIFT_R_WMAC_IPV6_MYIPAD_0			0
#define BIT_MASK_R_WMAC_IPV6_MYIPAD_0			0xffffffffL
#define BIT_R_WMAC_IPV6_MYIPAD_0(x)			(((x) & BIT_MASK_R_WMAC_IPV6_MYIPAD_0) << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_0)
#define BITS_R_WMAC_IPV6_MYIPAD_0			(BIT_MASK_R_WMAC_IPV6_MYIPAD_0 << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_0)
#define BIT_CLEAR_R_WMAC_IPV6_MYIPAD_0(x)		((x) & (~BITS_R_WMAC_IPV6_MYIPAD_0))
#define BIT_GET_R_WMAC_IPV6_MYIPAD_0(x)		(((x) >> BIT_SHIFT_R_WMAC_IPV6_MYIPAD_0) & BIT_MASK_R_WMAC_IPV6_MYIPAD_0)
#define BIT_SET_R_WMAC_IPV6_MYIPAD_0(x, v)		(BIT_CLEAR_R_WMAC_IPV6_MYIPAD_0(x) | BIT_R_WMAC_IPV6_MYIPAD_0(v))

/* 2 REG_IPV6_1				(Offset 0x0734) */

#define BIT_SHIFT_R_WMAC_IPV6_MYIPAD_1			0
#define BIT_MASK_R_WMAC_IPV6_MYIPAD_1			0xffffffffL
#define BIT_R_WMAC_IPV6_MYIPAD_1(x)			(((x) & BIT_MASK_R_WMAC_IPV6_MYIPAD_1) << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_1)
#define BITS_R_WMAC_IPV6_MYIPAD_1			(BIT_MASK_R_WMAC_IPV6_MYIPAD_1 << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_1)
#define BIT_CLEAR_R_WMAC_IPV6_MYIPAD_1(x)		((x) & (~BITS_R_WMAC_IPV6_MYIPAD_1))
#define BIT_GET_R_WMAC_IPV6_MYIPAD_1(x)		(((x) >> BIT_SHIFT_R_WMAC_IPV6_MYIPAD_1) & BIT_MASK_R_WMAC_IPV6_MYIPAD_1)
#define BIT_SET_R_WMAC_IPV6_MYIPAD_1(x, v)		(BIT_CLEAR_R_WMAC_IPV6_MYIPAD_1(x) | BIT_R_WMAC_IPV6_MYIPAD_1(v))

/* 2 REG_IPV6_2				(Offset 0x0738) */

#define BIT_SHIFT_R_WMAC_IPV6_MYIPAD_2			0
#define BIT_MASK_R_WMAC_IPV6_MYIPAD_2			0xffffffffL
#define BIT_R_WMAC_IPV6_MYIPAD_2(x)			(((x) & BIT_MASK_R_WMAC_IPV6_MYIPAD_2) << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_2)
#define BITS_R_WMAC_IPV6_MYIPAD_2			(BIT_MASK_R_WMAC_IPV6_MYIPAD_2 << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_2)
#define BIT_CLEAR_R_WMAC_IPV6_MYIPAD_2(x)		((x) & (~BITS_R_WMAC_IPV6_MYIPAD_2))
#define BIT_GET_R_WMAC_IPV6_MYIPAD_2(x)		(((x) >> BIT_SHIFT_R_WMAC_IPV6_MYIPAD_2) & BIT_MASK_R_WMAC_IPV6_MYIPAD_2)
#define BIT_SET_R_WMAC_IPV6_MYIPAD_2(x, v)		(BIT_CLEAR_R_WMAC_IPV6_MYIPAD_2(x) | BIT_R_WMAC_IPV6_MYIPAD_2(v))

/* 2 REG_IPV6_3				(Offset 0x073C) */

#define BIT_SHIFT_R_WMAC_IPV6_MYIPAD_3			0
#define BIT_MASK_R_WMAC_IPV6_MYIPAD_3			0xffffffffL
#define BIT_R_WMAC_IPV6_MYIPAD_3(x)			(((x) & BIT_MASK_R_WMAC_IPV6_MYIPAD_3) << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_3)
#define BITS_R_WMAC_IPV6_MYIPAD_3			(BIT_MASK_R_WMAC_IPV6_MYIPAD_3 << BIT_SHIFT_R_WMAC_IPV6_MYIPAD_3)
#define BIT_CLEAR_R_WMAC_IPV6_MYIPAD_3(x)		((x) & (~BITS_R_WMAC_IPV6_MYIPAD_3))
#define BIT_GET_R_WMAC_IPV6_MYIPAD_3(x)		(((x) >> BIT_SHIFT_R_WMAC_IPV6_MYIPAD_3) & BIT_MASK_R_WMAC_IPV6_MYIPAD_3)
#define BIT_SET_R_WMAC_IPV6_MYIPAD_3(x, v)		(BIT_CLEAR_R_WMAC_IPV6_MYIPAD_3(x) | BIT_R_WMAC_IPV6_MYIPAD_3(v))

/* 2 REG_WMAC_RTX_CTX_SUBTYPE_CFG		(Offset 0x0750) */

#define BIT_SHIFT_R_WMAC_CTX_SUBTYPE			4
#define BIT_MASK_R_WMAC_CTX_SUBTYPE			0xf
#define BIT_R_WMAC_CTX_SUBTYPE(x)			(((x) & BIT_MASK_R_WMAC_CTX_SUBTYPE) << BIT_SHIFT_R_WMAC_CTX_SUBTYPE)
#define BITS_R_WMAC_CTX_SUBTYPE			(BIT_MASK_R_WMAC_CTX_SUBTYPE << BIT_SHIFT_R_WMAC_CTX_SUBTYPE)
#define BIT_CLEAR_R_WMAC_CTX_SUBTYPE(x)		((x) & (~BITS_R_WMAC_CTX_SUBTYPE))
#define BIT_GET_R_WMAC_CTX_SUBTYPE(x)			(((x) >> BIT_SHIFT_R_WMAC_CTX_SUBTYPE) & BIT_MASK_R_WMAC_CTX_SUBTYPE)
#define BIT_SET_R_WMAC_CTX_SUBTYPE(x, v)		(BIT_CLEAR_R_WMAC_CTX_SUBTYPE(x) | BIT_R_WMAC_CTX_SUBTYPE(v))

#define BIT_SHIFT_R_WMAC_RTX_SUBTYPE			0
#define BIT_MASK_R_WMAC_RTX_SUBTYPE			0xf
#define BIT_R_WMAC_RTX_SUBTYPE(x)			(((x) & BIT_MASK_R_WMAC_RTX_SUBTYPE) << BIT_SHIFT_R_WMAC_RTX_SUBTYPE)
#define BITS_R_WMAC_RTX_SUBTYPE			(BIT_MASK_R_WMAC_RTX_SUBTYPE << BIT_SHIFT_R_WMAC_RTX_SUBTYPE)
#define BIT_CLEAR_R_WMAC_RTX_SUBTYPE(x)		((x) & (~BITS_R_WMAC_RTX_SUBTYPE))
#define BIT_GET_R_WMAC_RTX_SUBTYPE(x)			(((x) >> BIT_SHIFT_R_WMAC_RTX_SUBTYPE) & BIT_MASK_R_WMAC_RTX_SUBTYPE)
#define BIT_SET_R_WMAC_RTX_SUBTYPE(x, v)		(BIT_CLEAR_R_WMAC_RTX_SUBTYPE(x) | BIT_R_WMAC_RTX_SUBTYPE(v))

/* 2 REG_WMAC_SWAES_DIO_B63_B32		(Offset 0x0754) */

#define BIT_SHIFT_WMAC_SWAES_DIO_B63_B32		0
#define BIT_MASK_WMAC_SWAES_DIO_B63_B32		0xffffffffL
#define BIT_WMAC_SWAES_DIO_B63_B32(x)			(((x) & BIT_MASK_WMAC_SWAES_DIO_B63_B32) << BIT_SHIFT_WMAC_SWAES_DIO_B63_B32)
#define BITS_WMAC_SWAES_DIO_B63_B32			(BIT_MASK_WMAC_SWAES_DIO_B63_B32 << BIT_SHIFT_WMAC_SWAES_DIO_B63_B32)
#define BIT_CLEAR_WMAC_SWAES_DIO_B63_B32(x)		((x) & (~BITS_WMAC_SWAES_DIO_B63_B32))
#define BIT_GET_WMAC_SWAES_DIO_B63_B32(x)		(((x) >> BIT_SHIFT_WMAC_SWAES_DIO_B63_B32) & BIT_MASK_WMAC_SWAES_DIO_B63_B32)
#define BIT_SET_WMAC_SWAES_DIO_B63_B32(x, v)		(BIT_CLEAR_WMAC_SWAES_DIO_B63_B32(x) | BIT_WMAC_SWAES_DIO_B63_B32(v))

/* 2 REG_WMAC_SWAES_DIO_B95_B64		(Offset 0x0758) */

#define BIT_SHIFT_WMAC_SWAES_DIO_B95_B64		0
#define BIT_MASK_WMAC_SWAES_DIO_B95_B64		0xffffffffL
#define BIT_WMAC_SWAES_DIO_B95_B64(x)			(((x) & BIT_MASK_WMAC_SWAES_DIO_B95_B64) << BIT_SHIFT_WMAC_SWAES_DIO_B95_B64)
#define BITS_WMAC_SWAES_DIO_B95_B64			(BIT_MASK_WMAC_SWAES_DIO_B95_B64 << BIT_SHIFT_WMAC_SWAES_DIO_B95_B64)
#define BIT_CLEAR_WMAC_SWAES_DIO_B95_B64(x)		((x) & (~BITS_WMAC_SWAES_DIO_B95_B64))
#define BIT_GET_WMAC_SWAES_DIO_B95_B64(x)		(((x) >> BIT_SHIFT_WMAC_SWAES_DIO_B95_B64) & BIT_MASK_WMAC_SWAES_DIO_B95_B64)
#define BIT_SET_WMAC_SWAES_DIO_B95_B64(x, v)		(BIT_CLEAR_WMAC_SWAES_DIO_B95_B64(x) | BIT_WMAC_SWAES_DIO_B95_B64(v))

/* 2 REG_WMAC_SWAES_DIO_B127_B96		(Offset 0x075C) */

#define BIT_SHIFT_WMAC_SWAES_DIO_B127_B96		0
#define BIT_MASK_WMAC_SWAES_DIO_B127_B96		0xffffffffL
#define BIT_WMAC_SWAES_DIO_B127_B96(x)			(((x) & BIT_MASK_WMAC_SWAES_DIO_B127_B96) << BIT_SHIFT_WMAC_SWAES_DIO_B127_B96)
#define BITS_WMAC_SWAES_DIO_B127_B96			(BIT_MASK_WMAC_SWAES_DIO_B127_B96 << BIT_SHIFT_WMAC_SWAES_DIO_B127_B96)
#define BIT_CLEAR_WMAC_SWAES_DIO_B127_B96(x)		((x) & (~BITS_WMAC_SWAES_DIO_B127_B96))
#define BIT_GET_WMAC_SWAES_DIO_B127_B96(x)		(((x) >> BIT_SHIFT_WMAC_SWAES_DIO_B127_B96) & BIT_MASK_WMAC_SWAES_DIO_B127_B96)
#define BIT_SET_WMAC_SWAES_DIO_B127_B96(x, v)		(BIT_CLEAR_WMAC_SWAES_DIO_B127_B96(x) | BIT_WMAC_SWAES_DIO_B127_B96(v))

/* 2 REG_BT_COEX_V2				(Offset 0x0762) */

#define BIT_GNT_BT_POLARITY				BIT(12)
#define BIT_GNT_BT_BYPASS_PRIORITY			BIT(8)

#define BIT_SHIFT_TIMER				0
#define BIT_MASK_TIMER					0xff
#define BIT_TIMER(x)					(((x) & BIT_MASK_TIMER) << BIT_SHIFT_TIMER)
#define BITS_TIMER					(BIT_MASK_TIMER << BIT_SHIFT_TIMER)
#define BIT_CLEAR_TIMER(x)				((x) & (~BITS_TIMER))
#define BIT_GET_TIMER(x)				(((x) >> BIT_SHIFT_TIMER) & BIT_MASK_TIMER)
#define BIT_SET_TIMER(x, v)				(BIT_CLEAR_TIMER(x) | BIT_TIMER(v))

/* 2 REG_BT_COEX				(Offset 0x0764) */

#define BIT_R_GNT_BT_RFC_SW				BIT(12)
#define BIT_R_GNT_BT_RFC_SW_EN				BIT(11)
#define BIT_R_GNT_BT_BB_SW				BIT(10)
#define BIT_R_GNT_BT_BB_SW_EN				BIT(9)
#define BIT_R_BT_CNT_THREN				BIT(8)

#define BIT_SHIFT_R_BT_CNT_THR				0
#define BIT_MASK_R_BT_CNT_THR				0xff
#define BIT_R_BT_CNT_THR(x)				(((x) & BIT_MASK_R_BT_CNT_THR) << BIT_SHIFT_R_BT_CNT_THR)
#define BITS_R_BT_CNT_THR				(BIT_MASK_R_BT_CNT_THR << BIT_SHIFT_R_BT_CNT_THR)
#define BIT_CLEAR_R_BT_CNT_THR(x)			((x) & (~BITS_R_BT_CNT_THR))
#define BIT_GET_R_BT_CNT_THR(x)			(((x) >> BIT_SHIFT_R_BT_CNT_THR) & BIT_MASK_R_BT_CNT_THR)
#define BIT_SET_R_BT_CNT_THR(x, v)			(BIT_CLEAR_R_BT_CNT_THR(x) | BIT_R_BT_CNT_THR(v))

/* 2 REG_WLAN_ACT_MASK_CTRL			(Offset 0x0768) */

#define BIT_SHIFT_RXMYRTS_NAV_V1			8
#define BIT_MASK_RXMYRTS_NAV_V1			0xff
#define BIT_RXMYRTS_NAV_V1(x)				(((x) & BIT_MASK_RXMYRTS_NAV_V1) << BIT_SHIFT_RXMYRTS_NAV_V1)
#define BITS_RXMYRTS_NAV_V1				(BIT_MASK_RXMYRTS_NAV_V1 << BIT_SHIFT_RXMYRTS_NAV_V1)
#define BIT_CLEAR_RXMYRTS_NAV_V1(x)			((x) & (~BITS_RXMYRTS_NAV_V1))
#define BIT_GET_RXMYRTS_NAV_V1(x)			(((x) >> BIT_SHIFT_RXMYRTS_NAV_V1) & BIT_MASK_RXMYRTS_NAV_V1)
#define BIT_SET_RXMYRTS_NAV_V1(x, v)			(BIT_CLEAR_RXMYRTS_NAV_V1(x) | BIT_RXMYRTS_NAV_V1(v))

#define BIT_SHIFT_RTSRST_V1				0
#define BIT_MASK_RTSRST_V1				0xff
#define BIT_RTSRST_V1(x)				(((x) & BIT_MASK_RTSRST_V1) << BIT_SHIFT_RTSRST_V1)
#define BITS_RTSRST_V1					(BIT_MASK_RTSRST_V1 << BIT_SHIFT_RTSRST_V1)
#define BIT_CLEAR_RTSRST_V1(x)				((x) & (~BITS_RTSRST_V1))
#define BIT_GET_RTSRST_V1(x)				(((x) >> BIT_SHIFT_RTSRST_V1) & BIT_MASK_RTSRST_V1)
#define BIT_SET_RTSRST_V1(x, v)			(BIT_CLEAR_RTSRST_V1(x) | BIT_RTSRST_V1(v))

/* 2 REG_WLAN_ACT_MASK_CTRL_1		(Offset 0x076C) */

#define BIT_WLRX_TER_BY_CTL_1				BIT(11)
#define BIT_WLRX_TER_BY_AD_1				BIT(10)
#define BIT_ANT_DIVERSITY_SEL_1			BIT(9)
#define BIT_ANTSEL_FOR_BT_CTRL_EN_1			BIT(8)
#define BIT_WLACT_LOW_GNTWL_EN_1			BIT(2)
#define BIT_WLACT_HIGH_GNTBT_EN_1			BIT(1)
#define BIT_NAV_UPPER_1_V1				BIT(0)

/* 2 REG_BT_COEX_ENHANCED_INTR_CTRL		(Offset 0x076E) */

#define BIT_SHIFT_BT_STAT_DELAY			12
#define BIT_MASK_BT_STAT_DELAY				0xf
#define BIT_BT_STAT_DELAY(x)				(((x) & BIT_MASK_BT_STAT_DELAY) << BIT_SHIFT_BT_STAT_DELAY)
#define BITS_BT_STAT_DELAY				(BIT_MASK_BT_STAT_DELAY << BIT_SHIFT_BT_STAT_DELAY)
#define BIT_CLEAR_BT_STAT_DELAY(x)			((x) & (~BITS_BT_STAT_DELAY))
#define BIT_GET_BT_STAT_DELAY(x)			(((x) >> BIT_SHIFT_BT_STAT_DELAY) & BIT_MASK_BT_STAT_DELAY)
#define BIT_SET_BT_STAT_DELAY(x, v)			(BIT_CLEAR_BT_STAT_DELAY(x) | BIT_BT_STAT_DELAY(v))

#define BIT_SHIFT_BT_TRX_INIT_DETECT			8
#define BIT_MASK_BT_TRX_INIT_DETECT			0xf
#define BIT_BT_TRX_INIT_DETECT(x)			(((x) & BIT_MASK_BT_TRX_INIT_DETECT) << BIT_SHIFT_BT_TRX_INIT_DETECT)
#define BITS_BT_TRX_INIT_DETECT			(BIT_MASK_BT_TRX_INIT_DETECT << BIT_SHIFT_BT_TRX_INIT_DETECT)
#define BIT_CLEAR_BT_TRX_INIT_DETECT(x)		((x) & (~BITS_BT_TRX_INIT_DETECT))
#define BIT_GET_BT_TRX_INIT_DETECT(x)			(((x) >> BIT_SHIFT_BT_TRX_INIT_DETECT) & BIT_MASK_BT_TRX_INIT_DETECT)
#define BIT_SET_BT_TRX_INIT_DETECT(x, v)		(BIT_CLEAR_BT_TRX_INIT_DETECT(x) | BIT_BT_TRX_INIT_DETECT(v))

#define BIT_SHIFT_BT_PRI_DETECT_TO			4
#define BIT_MASK_BT_PRI_DETECT_TO			0xf
#define BIT_BT_PRI_DETECT_TO(x)			(((x) & BIT_MASK_BT_PRI_DETECT_TO) << BIT_SHIFT_BT_PRI_DETECT_TO)
#define BITS_BT_PRI_DETECT_TO				(BIT_MASK_BT_PRI_DETECT_TO << BIT_SHIFT_BT_PRI_DETECT_TO)
#define BIT_CLEAR_BT_PRI_DETECT_TO(x)			((x) & (~BITS_BT_PRI_DETECT_TO))
#define BIT_GET_BT_PRI_DETECT_TO(x)			(((x) >> BIT_SHIFT_BT_PRI_DETECT_TO) & BIT_MASK_BT_PRI_DETECT_TO)
#define BIT_SET_BT_PRI_DETECT_TO(x, v)			(BIT_CLEAR_BT_PRI_DETECT_TO(x) | BIT_BT_PRI_DETECT_TO(v))

#define BIT_R_GRANTALL_WLMASK				BIT(3)
#define BIT_STATIS_BT_EN				BIT(2)
#define BIT_WL_ACT_MASK_ENABLE				BIT(1)
#define BIT_ENHANCED_BT				BIT(0)

/* 2 REG_BT_ACT_STATISTICS			(Offset 0x0770) */

#define BIT_SHIFT_STATIS_BT_HI_RX			16
#define BIT_MASK_STATIS_BT_HI_RX			0xffff
#define BIT_STATIS_BT_HI_RX(x)				(((x) & BIT_MASK_STATIS_BT_HI_RX) << BIT_SHIFT_STATIS_BT_HI_RX)
#define BITS_STATIS_BT_HI_RX				(BIT_MASK_STATIS_BT_HI_RX << BIT_SHIFT_STATIS_BT_HI_RX)
#define BIT_CLEAR_STATIS_BT_HI_RX(x)			((x) & (~BITS_STATIS_BT_HI_RX))
#define BIT_GET_STATIS_BT_HI_RX(x)			(((x) >> BIT_SHIFT_STATIS_BT_HI_RX) & BIT_MASK_STATIS_BT_HI_RX)
#define BIT_SET_STATIS_BT_HI_RX(x, v)			(BIT_CLEAR_STATIS_BT_HI_RX(x) | BIT_STATIS_BT_HI_RX(v))

#define BIT_SHIFT_STATIS_BT_HI_TX			0
#define BIT_MASK_STATIS_BT_HI_TX			0xffff
#define BIT_STATIS_BT_HI_TX(x)				(((x) & BIT_MASK_STATIS_BT_HI_TX) << BIT_SHIFT_STATIS_BT_HI_TX)
#define BITS_STATIS_BT_HI_TX				(BIT_MASK_STATIS_BT_HI_TX << BIT_SHIFT_STATIS_BT_HI_TX)
#define BIT_CLEAR_STATIS_BT_HI_TX(x)			((x) & (~BITS_STATIS_BT_HI_TX))
#define BIT_GET_STATIS_BT_HI_TX(x)			(((x) >> BIT_SHIFT_STATIS_BT_HI_TX) & BIT_MASK_STATIS_BT_HI_TX)
#define BIT_SET_STATIS_BT_HI_TX(x, v)			(BIT_CLEAR_STATIS_BT_HI_TX(x) | BIT_STATIS_BT_HI_TX(v))

/* 2 REG_BT_ACT_STATISTICS_1			(Offset 0x0774) */

#define BIT_SHIFT_STATIS_BT_LO_RX_1			16
#define BIT_MASK_STATIS_BT_LO_RX_1			0xffff
#define BIT_STATIS_BT_LO_RX_1(x)			(((x) & BIT_MASK_STATIS_BT_LO_RX_1) << BIT_SHIFT_STATIS_BT_LO_RX_1)
#define BITS_STATIS_BT_LO_RX_1				(BIT_MASK_STATIS_BT_LO_RX_1 << BIT_SHIFT_STATIS_BT_LO_RX_1)
#define BIT_CLEAR_STATIS_BT_LO_RX_1(x)			((x) & (~BITS_STATIS_BT_LO_RX_1))
#define BIT_GET_STATIS_BT_LO_RX_1(x)			(((x) >> BIT_SHIFT_STATIS_BT_LO_RX_1) & BIT_MASK_STATIS_BT_LO_RX_1)
#define BIT_SET_STATIS_BT_LO_RX_1(x, v)		(BIT_CLEAR_STATIS_BT_LO_RX_1(x) | BIT_STATIS_BT_LO_RX_1(v))

#define BIT_SHIFT_STATIS_BT_LO_TX_1			0
#define BIT_MASK_STATIS_BT_LO_TX_1			0xffff
#define BIT_STATIS_BT_LO_TX_1(x)			(((x) & BIT_MASK_STATIS_BT_LO_TX_1) << BIT_SHIFT_STATIS_BT_LO_TX_1)
#define BITS_STATIS_BT_LO_TX_1				(BIT_MASK_STATIS_BT_LO_TX_1 << BIT_SHIFT_STATIS_BT_LO_TX_1)
#define BIT_CLEAR_STATIS_BT_LO_TX_1(x)			((x) & (~BITS_STATIS_BT_LO_TX_1))
#define BIT_GET_STATIS_BT_LO_TX_1(x)			(((x) >> BIT_SHIFT_STATIS_BT_LO_TX_1) & BIT_MASK_STATIS_BT_LO_TX_1)
#define BIT_SET_STATIS_BT_LO_TX_1(x, v)		(BIT_CLEAR_STATIS_BT_LO_TX_1(x) | BIT_STATIS_BT_LO_TX_1(v))

/* 2 REG_BT_STATISTICS_CONTROL_REGISTER	(Offset 0x0778) */

#define BIT_SHIFT_R_BT_CMD_RPT				16
#define BIT_MASK_R_BT_CMD_RPT				0xffff
#define BIT_R_BT_CMD_RPT(x)				(((x) & BIT_MASK_R_BT_CMD_RPT) << BIT_SHIFT_R_BT_CMD_RPT)
#define BITS_R_BT_CMD_RPT				(BIT_MASK_R_BT_CMD_RPT << BIT_SHIFT_R_BT_CMD_RPT)
#define BIT_CLEAR_R_BT_CMD_RPT(x)			((x) & (~BITS_R_BT_CMD_RPT))
#define BIT_GET_R_BT_CMD_RPT(x)			(((x) >> BIT_SHIFT_R_BT_CMD_RPT) & BIT_MASK_R_BT_CMD_RPT)
#define BIT_SET_R_BT_CMD_RPT(x, v)			(BIT_CLEAR_R_BT_CMD_RPT(x) | BIT_R_BT_CMD_RPT(v))

#define BIT_SHIFT_R_RPT_FROM_BT			8
#define BIT_MASK_R_RPT_FROM_BT				0xff
#define BIT_R_RPT_FROM_BT(x)				(((x) & BIT_MASK_R_RPT_FROM_BT) << BIT_SHIFT_R_RPT_FROM_BT)
#define BITS_R_RPT_FROM_BT				(BIT_MASK_R_RPT_FROM_BT << BIT_SHIFT_R_RPT_FROM_BT)
#define BIT_CLEAR_R_RPT_FROM_BT(x)			((x) & (~BITS_R_RPT_FROM_BT))
#define BIT_GET_R_RPT_FROM_BT(x)			(((x) >> BIT_SHIFT_R_RPT_FROM_BT) & BIT_MASK_R_RPT_FROM_BT)
#define BIT_SET_R_RPT_FROM_BT(x, v)			(BIT_CLEAR_R_RPT_FROM_BT(x) | BIT_R_RPT_FROM_BT(v))

#define BIT_SHIFT_BT_HID_ISR_SET			6
#define BIT_MASK_BT_HID_ISR_SET			0x3
#define BIT_BT_HID_ISR_SET(x)				(((x) & BIT_MASK_BT_HID_ISR_SET) << BIT_SHIFT_BT_HID_ISR_SET)
#define BITS_BT_HID_ISR_SET				(BIT_MASK_BT_HID_ISR_SET << BIT_SHIFT_BT_HID_ISR_SET)
#define BIT_CLEAR_BT_HID_ISR_SET(x)			((x) & (~BITS_BT_HID_ISR_SET))
#define BIT_GET_BT_HID_ISR_SET(x)			(((x) >> BIT_SHIFT_BT_HID_ISR_SET) & BIT_MASK_BT_HID_ISR_SET)
#define BIT_SET_BT_HID_ISR_SET(x, v)			(BIT_CLEAR_BT_HID_ISR_SET(x) | BIT_BT_HID_ISR_SET(v))

#define BIT_TDMA_BT_START_NOTIFY			BIT(5)
#define BIT_ENABLE_TDMA_FW_MODE			BIT(4)
#define BIT_ENABLE_PTA_TDMA_MODE			BIT(3)
#define BIT_ENABLE_COEXIST_TAB_IN_TDMA			BIT(2)
#define BIT_GPIO2_GPIO3_EXANGE_OR_NO_BT_CCA		BIT(1)
#define BIT_RTK_BT_ENABLE				BIT(0)

/* 2 REG_BT_STATUS_REPORT_REGISTER		(Offset 0x077C) */

#define BIT_SHIFT_BT_PROFILE				24
#define BIT_MASK_BT_PROFILE				0xff
#define BIT_BT_PROFILE(x)				(((x) & BIT_MASK_BT_PROFILE) << BIT_SHIFT_BT_PROFILE)
#define BITS_BT_PROFILE				(BIT_MASK_BT_PROFILE << BIT_SHIFT_BT_PROFILE)
#define BIT_CLEAR_BT_PROFILE(x)			((x) & (~BITS_BT_PROFILE))
#define BIT_GET_BT_PROFILE(x)				(((x) >> BIT_SHIFT_BT_PROFILE) & BIT_MASK_BT_PROFILE)
#define BIT_SET_BT_PROFILE(x, v)			(BIT_CLEAR_BT_PROFILE(x) | BIT_BT_PROFILE(v))

#define BIT_SHIFT_BT_POWER				16
#define BIT_MASK_BT_POWER				0xff
#define BIT_BT_POWER(x)				(((x) & BIT_MASK_BT_POWER) << BIT_SHIFT_BT_POWER)
#define BITS_BT_POWER					(BIT_MASK_BT_POWER << BIT_SHIFT_BT_POWER)
#define BIT_CLEAR_BT_POWER(x)				((x) & (~BITS_BT_POWER))
#define BIT_GET_BT_POWER(x)				(((x) >> BIT_SHIFT_BT_POWER) & BIT_MASK_BT_POWER)
#define BIT_SET_BT_POWER(x, v)				(BIT_CLEAR_BT_POWER(x) | BIT_BT_POWER(v))

#define BIT_SHIFT_BT_PREDECT_STATUS			8
#define BIT_MASK_BT_PREDECT_STATUS			0xff
#define BIT_BT_PREDECT_STATUS(x)			(((x) & BIT_MASK_BT_PREDECT_STATUS) << BIT_SHIFT_BT_PREDECT_STATUS)
#define BITS_BT_PREDECT_STATUS				(BIT_MASK_BT_PREDECT_STATUS << BIT_SHIFT_BT_PREDECT_STATUS)
#define BIT_CLEAR_BT_PREDECT_STATUS(x)			((x) & (~BITS_BT_PREDECT_STATUS))
#define BIT_GET_BT_PREDECT_STATUS(x)			(((x) >> BIT_SHIFT_BT_PREDECT_STATUS) & BIT_MASK_BT_PREDECT_STATUS)
#define BIT_SET_BT_PREDECT_STATUS(x, v)		(BIT_CLEAR_BT_PREDECT_STATUS(x) | BIT_BT_PREDECT_STATUS(v))

#define BIT_SHIFT_BT_CMD_INFO				0
#define BIT_MASK_BT_CMD_INFO				0xff
#define BIT_BT_CMD_INFO(x)				(((x) & BIT_MASK_BT_CMD_INFO) << BIT_SHIFT_BT_CMD_INFO)
#define BITS_BT_CMD_INFO				(BIT_MASK_BT_CMD_INFO << BIT_SHIFT_BT_CMD_INFO)
#define BIT_CLEAR_BT_CMD_INFO(x)			((x) & (~BITS_BT_CMD_INFO))
#define BIT_GET_BT_CMD_INFO(x)				(((x) >> BIT_SHIFT_BT_CMD_INFO) & BIT_MASK_BT_CMD_INFO)
#define BIT_SET_BT_CMD_INFO(x, v)			(BIT_CLEAR_BT_CMD_INFO(x) | BIT_BT_CMD_INFO(v))

/* 2 REG_BT_INTERRUPT_CONTROL_REGISTER	(Offset 0x0780) */

#define BIT_EN_MAC_NULL_PKT_NOTIFY			BIT(31)
#define BIT_EN_WLAN_RPT_AND_BT_QUERY			BIT(30)
#define BIT_EN_BT_STSTUS_RPT				BIT(29)
#define BIT_EN_BT_POWER				BIT(28)
#define BIT_EN_BT_CHANNEL				BIT(27)
#define BIT_EN_BT_SLOT_CHANGE				BIT(26)
#define BIT_EN_BT_PROFILE_OR_HID			BIT(25)
#define BIT_WLAN_RPT_NOTIFY				BIT(24)

#define BIT_SHIFT_WLAN_RPT_DATA			16
#define BIT_MASK_WLAN_RPT_DATA				0xff
#define BIT_WLAN_RPT_DATA(x)				(((x) & BIT_MASK_WLAN_RPT_DATA) << BIT_SHIFT_WLAN_RPT_DATA)
#define BITS_WLAN_RPT_DATA				(BIT_MASK_WLAN_RPT_DATA << BIT_SHIFT_WLAN_RPT_DATA)
#define BIT_CLEAR_WLAN_RPT_DATA(x)			((x) & (~BITS_WLAN_RPT_DATA))
#define BIT_GET_WLAN_RPT_DATA(x)			(((x) >> BIT_SHIFT_WLAN_RPT_DATA) & BIT_MASK_WLAN_RPT_DATA)
#define BIT_SET_WLAN_RPT_DATA(x, v)			(BIT_CLEAR_WLAN_RPT_DATA(x) | BIT_WLAN_RPT_DATA(v))

#define BIT_SHIFT_CMD_ID				8
#define BIT_MASK_CMD_ID				0xff
#define BIT_CMD_ID(x)					(((x) & BIT_MASK_CMD_ID) << BIT_SHIFT_CMD_ID)
#define BITS_CMD_ID					(BIT_MASK_CMD_ID << BIT_SHIFT_CMD_ID)
#define BIT_CLEAR_CMD_ID(x)				((x) & (~BITS_CMD_ID))
#define BIT_GET_CMD_ID(x)				(((x) >> BIT_SHIFT_CMD_ID) & BIT_MASK_CMD_ID)
#define BIT_SET_CMD_ID(x, v)				(BIT_CLEAR_CMD_ID(x) | BIT_CMD_ID(v))

#define BIT_SHIFT_BT_DATA				0
#define BIT_MASK_BT_DATA				0xff
#define BIT_BT_DATA(x)					(((x) & BIT_MASK_BT_DATA) << BIT_SHIFT_BT_DATA)
#define BITS_BT_DATA					(BIT_MASK_BT_DATA << BIT_SHIFT_BT_DATA)
#define BIT_CLEAR_BT_DATA(x)				((x) & (~BITS_BT_DATA))
#define BIT_GET_BT_DATA(x)				(((x) >> BIT_SHIFT_BT_DATA) & BIT_MASK_BT_DATA)
#define BIT_SET_BT_DATA(x, v)				(BIT_CLEAR_BT_DATA(x) | BIT_BT_DATA(v))

/* 2 REG_WLAN_REPORT_TIME_OUT_CONTROL_REGISTER (Offset 0x0784) */

#define BIT_SHIFT_WLAN_RPT_TO				0
#define BIT_MASK_WLAN_RPT_TO				0xff
#define BIT_WLAN_RPT_TO(x)				(((x) & BIT_MASK_WLAN_RPT_TO) << BIT_SHIFT_WLAN_RPT_TO)
#define BITS_WLAN_RPT_TO				(BIT_MASK_WLAN_RPT_TO << BIT_SHIFT_WLAN_RPT_TO)
#define BIT_CLEAR_WLAN_RPT_TO(x)			((x) & (~BITS_WLAN_RPT_TO))
#define BIT_GET_WLAN_RPT_TO(x)				(((x) >> BIT_SHIFT_WLAN_RPT_TO) & BIT_MASK_WLAN_RPT_TO)
#define BIT_SET_WLAN_RPT_TO(x, v)			(BIT_CLEAR_WLAN_RPT_TO(x) | BIT_WLAN_RPT_TO(v))

/* 2 REG_BT_ISOLATION_TABLE_REGISTER_REGISTER (Offset 0x0785) */

#define BIT_SHIFT_ISOLATION_CHK_0			1
#define BIT_MASK_ISOLATION_CHK_0			0x7fffff
#define BIT_ISOLATION_CHK_0(x)				(((x) & BIT_MASK_ISOLATION_CHK_0) << BIT_SHIFT_ISOLATION_CHK_0)
#define BITS_ISOLATION_CHK_0				(BIT_MASK_ISOLATION_CHK_0 << BIT_SHIFT_ISOLATION_CHK_0)
#define BIT_CLEAR_ISOLATION_CHK_0(x)			((x) & (~BITS_ISOLATION_CHK_0))
#define BIT_GET_ISOLATION_CHK_0(x)			(((x) >> BIT_SHIFT_ISOLATION_CHK_0) & BIT_MASK_ISOLATION_CHK_0)
#define BIT_SET_ISOLATION_CHK_0(x, v)			(BIT_CLEAR_ISOLATION_CHK_0(x) | BIT_ISOLATION_CHK_0(v))

#define BIT_ISOLATION_EN				BIT(0)

/* 2 REG_BT_ISOLATION_TABLE_REGISTER_REGISTER_1 (Offset 0x0788) */

#define BIT_SHIFT_ISOLATION_CHK_1			0
#define BIT_MASK_ISOLATION_CHK_1			0xffffffffL
#define BIT_ISOLATION_CHK_1(x)				(((x) & BIT_MASK_ISOLATION_CHK_1) << BIT_SHIFT_ISOLATION_CHK_1)
#define BITS_ISOLATION_CHK_1				(BIT_MASK_ISOLATION_CHK_1 << BIT_SHIFT_ISOLATION_CHK_1)
#define BIT_CLEAR_ISOLATION_CHK_1(x)			((x) & (~BITS_ISOLATION_CHK_1))
#define BIT_GET_ISOLATION_CHK_1(x)			(((x) >> BIT_SHIFT_ISOLATION_CHK_1) & BIT_MASK_ISOLATION_CHK_1)
#define BIT_SET_ISOLATION_CHK_1(x, v)			(BIT_CLEAR_ISOLATION_CHK_1(x) | BIT_ISOLATION_CHK_1(v))

/* 2 REG_BT_ISOLATION_TABLE_REGISTER_REGISTER_2 (Offset 0x078C) */

#define BIT_SHIFT_ISOLATION_CHK_2			0
#define BIT_MASK_ISOLATION_CHK_2			0xffffff
#define BIT_ISOLATION_CHK_2(x)				(((x) & BIT_MASK_ISOLATION_CHK_2) << BIT_SHIFT_ISOLATION_CHK_2)
#define BITS_ISOLATION_CHK_2				(BIT_MASK_ISOLATION_CHK_2 << BIT_SHIFT_ISOLATION_CHK_2)
#define BIT_CLEAR_ISOLATION_CHK_2(x)			((x) & (~BITS_ISOLATION_CHK_2))
#define BIT_GET_ISOLATION_CHK_2(x)			(((x) >> BIT_SHIFT_ISOLATION_CHK_2) & BIT_MASK_ISOLATION_CHK_2)
#define BIT_SET_ISOLATION_CHK_2(x, v)			(BIT_CLEAR_ISOLATION_CHK_2(x) | BIT_ISOLATION_CHK_2(v))

/* 2 REG_BT_INTERRUPT_STATUS_REGISTER	(Offset 0x078F) */

#define BIT_BT_HID_ISR					BIT(7)
#define BIT_BT_QUERY_ISR				BIT(6)
#define BIT_MAC_NULL_PKT_NOTIFY_ISR			BIT(5)
#define BIT_WLAN_RPT_ISR				BIT(4)
#define BIT_BT_POWER_ISR				BIT(3)
#define BIT_BT_CHANNEL_ISR				BIT(2)
#define BIT_BT_SLOT_CHANGE_ISR				BIT(1)
#define BIT_BT_PROFILE_ISR				BIT(0)

/* 2 REG_BT_TDMA_TIME_REGISTER		(Offset 0x0790) */

#define BIT_SHIFT_BT_TIME				6
#define BIT_MASK_BT_TIME				0x3ffffff
#define BIT_BT_TIME(x)					(((x) & BIT_MASK_BT_TIME) << BIT_SHIFT_BT_TIME)
#define BITS_BT_TIME					(BIT_MASK_BT_TIME << BIT_SHIFT_BT_TIME)
#define BIT_CLEAR_BT_TIME(x)				((x) & (~BITS_BT_TIME))
#define BIT_GET_BT_TIME(x)				(((x) >> BIT_SHIFT_BT_TIME) & BIT_MASK_BT_TIME)
#define BIT_SET_BT_TIME(x, v)				(BIT_CLEAR_BT_TIME(x) | BIT_BT_TIME(v))

#define BIT_SHIFT_BT_RPT_SAMPLE_RATE			0
#define BIT_MASK_BT_RPT_SAMPLE_RATE			0x3f
#define BIT_BT_RPT_SAMPLE_RATE(x)			(((x) & BIT_MASK_BT_RPT_SAMPLE_RATE) << BIT_SHIFT_BT_RPT_SAMPLE_RATE)
#define BITS_BT_RPT_SAMPLE_RATE			(BIT_MASK_BT_RPT_SAMPLE_RATE << BIT_SHIFT_BT_RPT_SAMPLE_RATE)
#define BIT_CLEAR_BT_RPT_SAMPLE_RATE(x)		((x) & (~BITS_BT_RPT_SAMPLE_RATE))
#define BIT_GET_BT_RPT_SAMPLE_RATE(x)			(((x) >> BIT_SHIFT_BT_RPT_SAMPLE_RATE) & BIT_MASK_BT_RPT_SAMPLE_RATE)
#define BIT_SET_BT_RPT_SAMPLE_RATE(x, v)		(BIT_CLEAR_BT_RPT_SAMPLE_RATE(x) | BIT_BT_RPT_SAMPLE_RATE(v))

/* 2 REG_BT_ACT_REGISTER			(Offset 0x0794) */

#define BIT_SHIFT_BT_EISR_EN				16
#define BIT_MASK_BT_EISR_EN				0xff
#define BIT_BT_EISR_EN(x)				(((x) & BIT_MASK_BT_EISR_EN) << BIT_SHIFT_BT_EISR_EN)
#define BITS_BT_EISR_EN				(BIT_MASK_BT_EISR_EN << BIT_SHIFT_BT_EISR_EN)
#define BIT_CLEAR_BT_EISR_EN(x)			((x) & (~BITS_BT_EISR_EN))
#define BIT_GET_BT_EISR_EN(x)				(((x) >> BIT_SHIFT_BT_EISR_EN) & BIT_MASK_BT_EISR_EN)
#define BIT_SET_BT_EISR_EN(x, v)			(BIT_CLEAR_BT_EISR_EN(x) | BIT_BT_EISR_EN(v))

#define BIT_BT_ACT_FALLING_ISR				BIT(10)
#define BIT_BT_ACT_RISING_ISR				BIT(9)
#define BIT_TDMA_TO_ISR				BIT(8)

#define BIT_SHIFT_BT_CH_V1				0
#define BIT_MASK_BT_CH_V1				0x7f
#define BIT_BT_CH_V1(x)				(((x) & BIT_MASK_BT_CH_V1) << BIT_SHIFT_BT_CH_V1)
#define BITS_BT_CH_V1					(BIT_MASK_BT_CH_V1 << BIT_SHIFT_BT_CH_V1)
#define BIT_CLEAR_BT_CH_V1(x)				((x) & (~BITS_BT_CH_V1))
#define BIT_GET_BT_CH_V1(x)				(((x) >> BIT_SHIFT_BT_CH_V1) & BIT_MASK_BT_CH_V1)
#define BIT_SET_BT_CH_V1(x, v)				(BIT_CLEAR_BT_CH_V1(x) | BIT_BT_CH_V1(v))

/* 2 REG_OBFF_CTRL_BASIC			(Offset 0x0798) */

#define BIT_OBFF_EN_V1					BIT(31)

#define BIT_SHIFT_OBFF_STATE_V1			28
#define BIT_MASK_OBFF_STATE_V1				0x3
#define BIT_OBFF_STATE_V1(x)				(((x) & BIT_MASK_OBFF_STATE_V1) << BIT_SHIFT_OBFF_STATE_V1)
#define BITS_OBFF_STATE_V1				(BIT_MASK_OBFF_STATE_V1 << BIT_SHIFT_OBFF_STATE_V1)
#define BIT_CLEAR_OBFF_STATE_V1(x)			((x) & (~BITS_OBFF_STATE_V1))
#define BIT_GET_OBFF_STATE_V1(x)			(((x) >> BIT_SHIFT_OBFF_STATE_V1) & BIT_MASK_OBFF_STATE_V1)
#define BIT_SET_OBFF_STATE_V1(x, v)			(BIT_CLEAR_OBFF_STATE_V1(x) | BIT_OBFF_STATE_V1(v))

#define BIT_OBFF_ACT_RXDMA_EN				BIT(27)
#define BIT_OBFF_BLOCK_INT_EN				BIT(26)
#define BIT_OBFF_AUTOACT_EN				BIT(25)
#define BIT_OBFF_AUTOIDLE_EN				BIT(24)

#define BIT_SHIFT_WAKE_MAX_PLS				20
#define BIT_MASK_WAKE_MAX_PLS				0x7
#define BIT_WAKE_MAX_PLS(x)				(((x) & BIT_MASK_WAKE_MAX_PLS) << BIT_SHIFT_WAKE_MAX_PLS)
#define BITS_WAKE_MAX_PLS				(BIT_MASK_WAKE_MAX_PLS << BIT_SHIFT_WAKE_MAX_PLS)
#define BIT_CLEAR_WAKE_MAX_PLS(x)			((x) & (~BITS_WAKE_MAX_PLS))
#define BIT_GET_WAKE_MAX_PLS(x)			(((x) >> BIT_SHIFT_WAKE_MAX_PLS) & BIT_MASK_WAKE_MAX_PLS)
#define BIT_SET_WAKE_MAX_PLS(x, v)			(BIT_CLEAR_WAKE_MAX_PLS(x) | BIT_WAKE_MAX_PLS(v))

#define BIT_SHIFT_WAKE_MIN_PLS				16
#define BIT_MASK_WAKE_MIN_PLS				0x7
#define BIT_WAKE_MIN_PLS(x)				(((x) & BIT_MASK_WAKE_MIN_PLS) << BIT_SHIFT_WAKE_MIN_PLS)
#define BITS_WAKE_MIN_PLS				(BIT_MASK_WAKE_MIN_PLS << BIT_SHIFT_WAKE_MIN_PLS)
#define BIT_CLEAR_WAKE_MIN_PLS(x)			((x) & (~BITS_WAKE_MIN_PLS))
#define BIT_GET_WAKE_MIN_PLS(x)			(((x) >> BIT_SHIFT_WAKE_MIN_PLS) & BIT_MASK_WAKE_MIN_PLS)
#define BIT_SET_WAKE_MIN_PLS(x, v)			(BIT_CLEAR_WAKE_MIN_PLS(x) | BIT_WAKE_MIN_PLS(v))

#define BIT_SHIFT_WAKE_MAX_F2F				12
#define BIT_MASK_WAKE_MAX_F2F				0x7
#define BIT_WAKE_MAX_F2F(x)				(((x) & BIT_MASK_WAKE_MAX_F2F) << BIT_SHIFT_WAKE_MAX_F2F)
#define BITS_WAKE_MAX_F2F				(BIT_MASK_WAKE_MAX_F2F << BIT_SHIFT_WAKE_MAX_F2F)
#define BIT_CLEAR_WAKE_MAX_F2F(x)			((x) & (~BITS_WAKE_MAX_F2F))
#define BIT_GET_WAKE_MAX_F2F(x)			(((x) >> BIT_SHIFT_WAKE_MAX_F2F) & BIT_MASK_WAKE_MAX_F2F)
#define BIT_SET_WAKE_MAX_F2F(x, v)			(BIT_CLEAR_WAKE_MAX_F2F(x) | BIT_WAKE_MAX_F2F(v))

#define BIT_SHIFT_WAKE_MIN_F2F				8
#define BIT_MASK_WAKE_MIN_F2F				0x7
#define BIT_WAKE_MIN_F2F(x)				(((x) & BIT_MASK_WAKE_MIN_F2F) << BIT_SHIFT_WAKE_MIN_F2F)
#define BITS_WAKE_MIN_F2F				(BIT_MASK_WAKE_MIN_F2F << BIT_SHIFT_WAKE_MIN_F2F)
#define BIT_CLEAR_WAKE_MIN_F2F(x)			((x) & (~BITS_WAKE_MIN_F2F))
#define BIT_GET_WAKE_MIN_F2F(x)			(((x) >> BIT_SHIFT_WAKE_MIN_F2F) & BIT_MASK_WAKE_MIN_F2F)
#define BIT_SET_WAKE_MIN_F2F(x, v)			(BIT_CLEAR_WAKE_MIN_F2F(x) | BIT_WAKE_MIN_F2F(v))

#define BIT_APP_CPU_ACT_V1				BIT(3)
#define BIT_APP_OBFF_V1				BIT(2)
#define BIT_APP_IDLE_V1				BIT(1)
#define BIT_APP_INIT_V1				BIT(0)

/* 2 REG_OBFF_CTRL2_TIMER			(Offset 0x079C) */

#define BIT_SHIFT_RX_HIGH_TIMER_IDX			24
#define BIT_MASK_RX_HIGH_TIMER_IDX			0x7
#define BIT_RX_HIGH_TIMER_IDX(x)			(((x) & BIT_MASK_RX_HIGH_TIMER_IDX) << BIT_SHIFT_RX_HIGH_TIMER_IDX)
#define BITS_RX_HIGH_TIMER_IDX				(BIT_MASK_RX_HIGH_TIMER_IDX << BIT_SHIFT_RX_HIGH_TIMER_IDX)
#define BIT_CLEAR_RX_HIGH_TIMER_IDX(x)			((x) & (~BITS_RX_HIGH_TIMER_IDX))
#define BIT_GET_RX_HIGH_TIMER_IDX(x)			(((x) >> BIT_SHIFT_RX_HIGH_TIMER_IDX) & BIT_MASK_RX_HIGH_TIMER_IDX)
#define BIT_SET_RX_HIGH_TIMER_IDX(x, v)		(BIT_CLEAR_RX_HIGH_TIMER_IDX(x) | BIT_RX_HIGH_TIMER_IDX(v))

#define BIT_SHIFT_RX_MED_TIMER_IDX			16
#define BIT_MASK_RX_MED_TIMER_IDX			0x7
#define BIT_RX_MED_TIMER_IDX(x)			(((x) & BIT_MASK_RX_MED_TIMER_IDX) << BIT_SHIFT_RX_MED_TIMER_IDX)
#define BITS_RX_MED_TIMER_IDX				(BIT_MASK_RX_MED_TIMER_IDX << BIT_SHIFT_RX_MED_TIMER_IDX)
#define BIT_CLEAR_RX_MED_TIMER_IDX(x)			((x) & (~BITS_RX_MED_TIMER_IDX))
#define BIT_GET_RX_MED_TIMER_IDX(x)			(((x) >> BIT_SHIFT_RX_MED_TIMER_IDX) & BIT_MASK_RX_MED_TIMER_IDX)
#define BIT_SET_RX_MED_TIMER_IDX(x, v)			(BIT_CLEAR_RX_MED_TIMER_IDX(x) | BIT_RX_MED_TIMER_IDX(v))

#define BIT_SHIFT_RX_LOW_TIMER_IDX			8
#define BIT_MASK_RX_LOW_TIMER_IDX			0x7
#define BIT_RX_LOW_TIMER_IDX(x)			(((x) & BIT_MASK_RX_LOW_TIMER_IDX) << BIT_SHIFT_RX_LOW_TIMER_IDX)
#define BITS_RX_LOW_TIMER_IDX				(BIT_MASK_RX_LOW_TIMER_IDX << BIT_SHIFT_RX_LOW_TIMER_IDX)
#define BIT_CLEAR_RX_LOW_TIMER_IDX(x)			((x) & (~BITS_RX_LOW_TIMER_IDX))
#define BIT_GET_RX_LOW_TIMER_IDX(x)			(((x) >> BIT_SHIFT_RX_LOW_TIMER_IDX) & BIT_MASK_RX_LOW_TIMER_IDX)
#define BIT_SET_RX_LOW_TIMER_IDX(x, v)			(BIT_CLEAR_RX_LOW_TIMER_IDX(x) | BIT_RX_LOW_TIMER_IDX(v))

#define BIT_SHIFT_OBFF_INT_TIMER_IDX			0
#define BIT_MASK_OBFF_INT_TIMER_IDX			0x7
#define BIT_OBFF_INT_TIMER_IDX(x)			(((x) & BIT_MASK_OBFF_INT_TIMER_IDX) << BIT_SHIFT_OBFF_INT_TIMER_IDX)
#define BITS_OBFF_INT_TIMER_IDX			(BIT_MASK_OBFF_INT_TIMER_IDX << BIT_SHIFT_OBFF_INT_TIMER_IDX)
#define BIT_CLEAR_OBFF_INT_TIMER_IDX(x)		((x) & (~BITS_OBFF_INT_TIMER_IDX))
#define BIT_GET_OBFF_INT_TIMER_IDX(x)			(((x) >> BIT_SHIFT_OBFF_INT_TIMER_IDX) & BIT_MASK_OBFF_INT_TIMER_IDX)
#define BIT_SET_OBFF_INT_TIMER_IDX(x, v)		(BIT_CLEAR_OBFF_INT_TIMER_IDX(x) | BIT_OBFF_INT_TIMER_IDX(v))

/* 2 REG_LTR_CTRL_BASIC			(Offset 0x07A0) */

#define BIT_LTR_EN_V1					BIT(31)
#define BIT_LTR_HW_EN_V1				BIT(30)
#define BIT_LRT_ACT_CTS_EN				BIT(29)
#define BIT_LTR_ACT_RXPKT_EN				BIT(28)
#define BIT_LTR_ACT_RXDMA_EN				BIT(27)
#define BIT_LTR_IDLE_NO_SNOOP				BIT(26)
#define BIT_SPDUP_MGTPKT				BIT(25)
#define BIT_RX_AGG_EN					BIT(24)
#define BIT_APP_LTR_ACT				BIT(23)
#define BIT_APP_LTR_IDLE				BIT(22)

#define BIT_SHIFT_HIGH_RATE_TRIG_SEL			20
#define BIT_MASK_HIGH_RATE_TRIG_SEL			0x3
#define BIT_HIGH_RATE_TRIG_SEL(x)			(((x) & BIT_MASK_HIGH_RATE_TRIG_SEL) << BIT_SHIFT_HIGH_RATE_TRIG_SEL)
#define BITS_HIGH_RATE_TRIG_SEL			(BIT_MASK_HIGH_RATE_TRIG_SEL << BIT_SHIFT_HIGH_RATE_TRIG_SEL)
#define BIT_CLEAR_HIGH_RATE_TRIG_SEL(x)		((x) & (~BITS_HIGH_RATE_TRIG_SEL))
#define BIT_GET_HIGH_RATE_TRIG_SEL(x)			(((x) >> BIT_SHIFT_HIGH_RATE_TRIG_SEL) & BIT_MASK_HIGH_RATE_TRIG_SEL)
#define BIT_SET_HIGH_RATE_TRIG_SEL(x, v)		(BIT_CLEAR_HIGH_RATE_TRIG_SEL(x) | BIT_HIGH_RATE_TRIG_SEL(v))

#define BIT_SHIFT_MED_RATE_TRIG_SEL			18
#define BIT_MASK_MED_RATE_TRIG_SEL			0x3
#define BIT_MED_RATE_TRIG_SEL(x)			(((x) & BIT_MASK_MED_RATE_TRIG_SEL) << BIT_SHIFT_MED_RATE_TRIG_SEL)
#define BITS_MED_RATE_TRIG_SEL				(BIT_MASK_MED_RATE_TRIG_SEL << BIT_SHIFT_MED_RATE_TRIG_SEL)
#define BIT_CLEAR_MED_RATE_TRIG_SEL(x)			((x) & (~BITS_MED_RATE_TRIG_SEL))
#define BIT_GET_MED_RATE_TRIG_SEL(x)			(((x) >> BIT_SHIFT_MED_RATE_TRIG_SEL) & BIT_MASK_MED_RATE_TRIG_SEL)
#define BIT_SET_MED_RATE_TRIG_SEL(x, v)		(BIT_CLEAR_MED_RATE_TRIG_SEL(x) | BIT_MED_RATE_TRIG_SEL(v))

#define BIT_SHIFT_LOW_RATE_TRIG_SEL			16
#define BIT_MASK_LOW_RATE_TRIG_SEL			0x3
#define BIT_LOW_RATE_TRIG_SEL(x)			(((x) & BIT_MASK_LOW_RATE_TRIG_SEL) << BIT_SHIFT_LOW_RATE_TRIG_SEL)
#define BITS_LOW_RATE_TRIG_SEL				(BIT_MASK_LOW_RATE_TRIG_SEL << BIT_SHIFT_LOW_RATE_TRIG_SEL)
#define BIT_CLEAR_LOW_RATE_TRIG_SEL(x)			((x) & (~BITS_LOW_RATE_TRIG_SEL))
#define BIT_GET_LOW_RATE_TRIG_SEL(x)			(((x) >> BIT_SHIFT_LOW_RATE_TRIG_SEL) & BIT_MASK_LOW_RATE_TRIG_SEL)
#define BIT_SET_LOW_RATE_TRIG_SEL(x, v)		(BIT_CLEAR_LOW_RATE_TRIG_SEL(x) | BIT_LOW_RATE_TRIG_SEL(v))

#define BIT_SHIFT_HIGH_RATE_BD_IDX			8
#define BIT_MASK_HIGH_RATE_BD_IDX			0x7f
#define BIT_HIGH_RATE_BD_IDX(x)			(((x) & BIT_MASK_HIGH_RATE_BD_IDX) << BIT_SHIFT_HIGH_RATE_BD_IDX)
#define BITS_HIGH_RATE_BD_IDX				(BIT_MASK_HIGH_RATE_BD_IDX << BIT_SHIFT_HIGH_RATE_BD_IDX)
#define BIT_CLEAR_HIGH_RATE_BD_IDX(x)			((x) & (~BITS_HIGH_RATE_BD_IDX))
#define BIT_GET_HIGH_RATE_BD_IDX(x)			(((x) >> BIT_SHIFT_HIGH_RATE_BD_IDX) & BIT_MASK_HIGH_RATE_BD_IDX)
#define BIT_SET_HIGH_RATE_BD_IDX(x, v)			(BIT_CLEAR_HIGH_RATE_BD_IDX(x) | BIT_HIGH_RATE_BD_IDX(v))

#define BIT_SHIFT_LOW_RATE_BD_IDX			0
#define BIT_MASK_LOW_RATE_BD_IDX			0x7f
#define BIT_LOW_RATE_BD_IDX(x)				(((x) & BIT_MASK_LOW_RATE_BD_IDX) << BIT_SHIFT_LOW_RATE_BD_IDX)
#define BITS_LOW_RATE_BD_IDX				(BIT_MASK_LOW_RATE_BD_IDX << BIT_SHIFT_LOW_RATE_BD_IDX)
#define BIT_CLEAR_LOW_RATE_BD_IDX(x)			((x) & (~BITS_LOW_RATE_BD_IDX))
#define BIT_GET_LOW_RATE_BD_IDX(x)			(((x) >> BIT_SHIFT_LOW_RATE_BD_IDX) & BIT_MASK_LOW_RATE_BD_IDX)
#define BIT_SET_LOW_RATE_BD_IDX(x, v)			(BIT_CLEAR_LOW_RATE_BD_IDX(x) | BIT_LOW_RATE_BD_IDX(v))

/* 2 REG_LTR_CTRL2_TIMER_THRESHOLD		(Offset 0x07A4) */

#define BIT_SHIFT_RX_EMPTY_TIMER_IDX			24
#define BIT_MASK_RX_EMPTY_TIMER_IDX			0x7
#define BIT_RX_EMPTY_TIMER_IDX(x)			(((x) & BIT_MASK_RX_EMPTY_TIMER_IDX) << BIT_SHIFT_RX_EMPTY_TIMER_IDX)
#define BITS_RX_EMPTY_TIMER_IDX			(BIT_MASK_RX_EMPTY_TIMER_IDX << BIT_SHIFT_RX_EMPTY_TIMER_IDX)
#define BIT_CLEAR_RX_EMPTY_TIMER_IDX(x)		((x) & (~BITS_RX_EMPTY_TIMER_IDX))
#define BIT_GET_RX_EMPTY_TIMER_IDX(x)			(((x) >> BIT_SHIFT_RX_EMPTY_TIMER_IDX) & BIT_MASK_RX_EMPTY_TIMER_IDX)
#define BIT_SET_RX_EMPTY_TIMER_IDX(x, v)		(BIT_CLEAR_RX_EMPTY_TIMER_IDX(x) | BIT_RX_EMPTY_TIMER_IDX(v))

#define BIT_SHIFT_RX_AFULL_TH_IDX			20
#define BIT_MASK_RX_AFULL_TH_IDX			0x7
#define BIT_RX_AFULL_TH_IDX(x)				(((x) & BIT_MASK_RX_AFULL_TH_IDX) << BIT_SHIFT_RX_AFULL_TH_IDX)
#define BITS_RX_AFULL_TH_IDX				(BIT_MASK_RX_AFULL_TH_IDX << BIT_SHIFT_RX_AFULL_TH_IDX)
#define BIT_CLEAR_RX_AFULL_TH_IDX(x)			((x) & (~BITS_RX_AFULL_TH_IDX))
#define BIT_GET_RX_AFULL_TH_IDX(x)			(((x) >> BIT_SHIFT_RX_AFULL_TH_IDX) & BIT_MASK_RX_AFULL_TH_IDX)
#define BIT_SET_RX_AFULL_TH_IDX(x, v)			(BIT_CLEAR_RX_AFULL_TH_IDX(x) | BIT_RX_AFULL_TH_IDX(v))

#define BIT_SHIFT_RX_HIGH_TH_IDX			16
#define BIT_MASK_RX_HIGH_TH_IDX			0x7
#define BIT_RX_HIGH_TH_IDX(x)				(((x) & BIT_MASK_RX_HIGH_TH_IDX) << BIT_SHIFT_RX_HIGH_TH_IDX)
#define BITS_RX_HIGH_TH_IDX				(BIT_MASK_RX_HIGH_TH_IDX << BIT_SHIFT_RX_HIGH_TH_IDX)
#define BIT_CLEAR_RX_HIGH_TH_IDX(x)			((x) & (~BITS_RX_HIGH_TH_IDX))
#define BIT_GET_RX_HIGH_TH_IDX(x)			(((x) >> BIT_SHIFT_RX_HIGH_TH_IDX) & BIT_MASK_RX_HIGH_TH_IDX)
#define BIT_SET_RX_HIGH_TH_IDX(x, v)			(BIT_CLEAR_RX_HIGH_TH_IDX(x) | BIT_RX_HIGH_TH_IDX(v))

#define BIT_SHIFT_RX_MED_TH_IDX			12
#define BIT_MASK_RX_MED_TH_IDX				0x7
#define BIT_RX_MED_TH_IDX(x)				(((x) & BIT_MASK_RX_MED_TH_IDX) << BIT_SHIFT_RX_MED_TH_IDX)
#define BITS_RX_MED_TH_IDX				(BIT_MASK_RX_MED_TH_IDX << BIT_SHIFT_RX_MED_TH_IDX)
#define BIT_CLEAR_RX_MED_TH_IDX(x)			((x) & (~BITS_RX_MED_TH_IDX))
#define BIT_GET_RX_MED_TH_IDX(x)			(((x) >> BIT_SHIFT_RX_MED_TH_IDX) & BIT_MASK_RX_MED_TH_IDX)
#define BIT_SET_RX_MED_TH_IDX(x, v)			(BIT_CLEAR_RX_MED_TH_IDX(x) | BIT_RX_MED_TH_IDX(v))

#define BIT_SHIFT_RX_LOW_TH_IDX			8
#define BIT_MASK_RX_LOW_TH_IDX				0x7
#define BIT_RX_LOW_TH_IDX(x)				(((x) & BIT_MASK_RX_LOW_TH_IDX) << BIT_SHIFT_RX_LOW_TH_IDX)
#define BITS_RX_LOW_TH_IDX				(BIT_MASK_RX_LOW_TH_IDX << BIT_SHIFT_RX_LOW_TH_IDX)
#define BIT_CLEAR_RX_LOW_TH_IDX(x)			((x) & (~BITS_RX_LOW_TH_IDX))
#define BIT_GET_RX_LOW_TH_IDX(x)			(((x) >> BIT_SHIFT_RX_LOW_TH_IDX) & BIT_MASK_RX_LOW_TH_IDX)
#define BIT_SET_RX_LOW_TH_IDX(x, v)			(BIT_CLEAR_RX_LOW_TH_IDX(x) | BIT_RX_LOW_TH_IDX(v))

#define BIT_SHIFT_LTR_SPACE_IDX			4
#define BIT_MASK_LTR_SPACE_IDX				0x3
#define BIT_LTR_SPACE_IDX(x)				(((x) & BIT_MASK_LTR_SPACE_IDX) << BIT_SHIFT_LTR_SPACE_IDX)
#define BITS_LTR_SPACE_IDX				(BIT_MASK_LTR_SPACE_IDX << BIT_SHIFT_LTR_SPACE_IDX)
#define BIT_CLEAR_LTR_SPACE_IDX(x)			((x) & (~BITS_LTR_SPACE_IDX))
#define BIT_GET_LTR_SPACE_IDX(x)			(((x) >> BIT_SHIFT_LTR_SPACE_IDX) & BIT_MASK_LTR_SPACE_IDX)
#define BIT_SET_LTR_SPACE_IDX(x, v)			(BIT_CLEAR_LTR_SPACE_IDX(x) | BIT_LTR_SPACE_IDX(v))

#define BIT_SHIFT_LTR_IDLE_TIMER_IDX			0
#define BIT_MASK_LTR_IDLE_TIMER_IDX			0x7
#define BIT_LTR_IDLE_TIMER_IDX(x)			(((x) & BIT_MASK_LTR_IDLE_TIMER_IDX) << BIT_SHIFT_LTR_IDLE_TIMER_IDX)
#define BITS_LTR_IDLE_TIMER_IDX			(BIT_MASK_LTR_IDLE_TIMER_IDX << BIT_SHIFT_LTR_IDLE_TIMER_IDX)
#define BIT_CLEAR_LTR_IDLE_TIMER_IDX(x)		((x) & (~BITS_LTR_IDLE_TIMER_IDX))
#define BIT_GET_LTR_IDLE_TIMER_IDX(x)			(((x) >> BIT_SHIFT_LTR_IDLE_TIMER_IDX) & BIT_MASK_LTR_IDLE_TIMER_IDX)
#define BIT_SET_LTR_IDLE_TIMER_IDX(x, v)		(BIT_CLEAR_LTR_IDLE_TIMER_IDX(x) | BIT_LTR_IDLE_TIMER_IDX(v))

/* 2 REG_LTR_IDLE_LATENCY_V1			(Offset 0x07A8) */

#define BIT_SHIFT_LTR_IDLE_L				0
#define BIT_MASK_LTR_IDLE_L				0xffffffffL
#define BIT_LTR_IDLE_L(x)				(((x) & BIT_MASK_LTR_IDLE_L) << BIT_SHIFT_LTR_IDLE_L)
#define BITS_LTR_IDLE_L				(BIT_MASK_LTR_IDLE_L << BIT_SHIFT_LTR_IDLE_L)
#define BIT_CLEAR_LTR_IDLE_L(x)			((x) & (~BITS_LTR_IDLE_L))
#define BIT_GET_LTR_IDLE_L(x)				(((x) >> BIT_SHIFT_LTR_IDLE_L) & BIT_MASK_LTR_IDLE_L)
#define BIT_SET_LTR_IDLE_L(x, v)			(BIT_CLEAR_LTR_IDLE_L(x) | BIT_LTR_IDLE_L(v))

/* 2 REG_LTR_ACTIVE_LATENCY_V1		(Offset 0x07AC) */

#define BIT_SHIFT_LTR_ACT_L				0
#define BIT_MASK_LTR_ACT_L				0xffffffffL
#define BIT_LTR_ACT_L(x)				(((x) & BIT_MASK_LTR_ACT_L) << BIT_SHIFT_LTR_ACT_L)
#define BITS_LTR_ACT_L					(BIT_MASK_LTR_ACT_L << BIT_SHIFT_LTR_ACT_L)
#define BIT_CLEAR_LTR_ACT_L(x)				((x) & (~BITS_LTR_ACT_L))
#define BIT_GET_LTR_ACT_L(x)				(((x) >> BIT_SHIFT_LTR_ACT_L) & BIT_MASK_LTR_ACT_L)
#define BIT_SET_LTR_ACT_L(x, v)			(BIT_CLEAR_LTR_ACT_L(x) | BIT_LTR_ACT_L(v))

/* 2 REG_ANTENNA_TRAINING_CONTROL_REGISTER	(Offset 0x07B0) */

#define BIT_SHIFT_TRAIN_STA_ADDR_0			0
#define BIT_MASK_TRAIN_STA_ADDR_0			0xffffffffL
#define BIT_TRAIN_STA_ADDR_0(x)			(((x) & BIT_MASK_TRAIN_STA_ADDR_0) << BIT_SHIFT_TRAIN_STA_ADDR_0)
#define BITS_TRAIN_STA_ADDR_0				(BIT_MASK_TRAIN_STA_ADDR_0 << BIT_SHIFT_TRAIN_STA_ADDR_0)
#define BIT_CLEAR_TRAIN_STA_ADDR_0(x)			((x) & (~BITS_TRAIN_STA_ADDR_0))
#define BIT_GET_TRAIN_STA_ADDR_0(x)			(((x) >> BIT_SHIFT_TRAIN_STA_ADDR_0) & BIT_MASK_TRAIN_STA_ADDR_0)
#define BIT_SET_TRAIN_STA_ADDR_0(x, v)			(BIT_CLEAR_TRAIN_STA_ADDR_0(x) | BIT_TRAIN_STA_ADDR_0(v))

/* 2 REG_ANTENNA_TRAINING_CONTROL_REGISTER_1 (Offset 0x07B4) */

#define BIT_ANTTRN_SWITCH				BIT(19)
#define BIT_APPEND_MACID_IN_RESP_EN_1			BIT(18)
#define BIT_ADDR2_MATCH_EN_1				BIT(17)
#define BIT_ANTTRN_EN_1				BIT(16)

#define BIT_SHIFT_TRAIN_STA_ADDR_1			0
#define BIT_MASK_TRAIN_STA_ADDR_1			0xffff
#define BIT_TRAIN_STA_ADDR_1(x)			(((x) & BIT_MASK_TRAIN_STA_ADDR_1) << BIT_SHIFT_TRAIN_STA_ADDR_1)
#define BITS_TRAIN_STA_ADDR_1				(BIT_MASK_TRAIN_STA_ADDR_1 << BIT_SHIFT_TRAIN_STA_ADDR_1)
#define BIT_CLEAR_TRAIN_STA_ADDR_1(x)			((x) & (~BITS_TRAIN_STA_ADDR_1))
#define BIT_GET_TRAIN_STA_ADDR_1(x)			(((x) >> BIT_SHIFT_TRAIN_STA_ADDR_1) & BIT_MASK_TRAIN_STA_ADDR_1)
#define BIT_SET_TRAIN_STA_ADDR_1(x, v)			(BIT_CLEAR_TRAIN_STA_ADDR_1(x) | BIT_TRAIN_STA_ADDR_1(v))

/* 2 REG_WMAC_PKTCNT_RWD			(Offset 0x07B8) */

#define BIT_SHIFT_PKTCNT_BSSIDMAP			4
#define BIT_MASK_PKTCNT_BSSIDMAP			0xf
#define BIT_PKTCNT_BSSIDMAP(x)				(((x) & BIT_MASK_PKTCNT_BSSIDMAP) << BIT_SHIFT_PKTCNT_BSSIDMAP)
#define BITS_PKTCNT_BSSIDMAP				(BIT_MASK_PKTCNT_BSSIDMAP << BIT_SHIFT_PKTCNT_BSSIDMAP)
#define BIT_CLEAR_PKTCNT_BSSIDMAP(x)			((x) & (~BITS_PKTCNT_BSSIDMAP))
#define BIT_GET_PKTCNT_BSSIDMAP(x)			(((x) >> BIT_SHIFT_PKTCNT_BSSIDMAP) & BIT_MASK_PKTCNT_BSSIDMAP)
#define BIT_SET_PKTCNT_BSSIDMAP(x, v)			(BIT_CLEAR_PKTCNT_BSSIDMAP(x) | BIT_PKTCNT_BSSIDMAP(v))

#define BIT_PKTCNT_CNTRST				BIT(1)
#define BIT_PKTCNT_CNTEN				BIT(0)

/* 2 REG_WMAC_PKTCNT_CTRL			(Offset 0x07BC) */

#define BIT_WMAC_PKTCNT_TRST				BIT(9)
#define BIT_WMAC_PKTCNT_FEN				BIT(8)

#define BIT_SHIFT_WMAC_PKTCNT_CFGAD			0
#define BIT_MASK_WMAC_PKTCNT_CFGAD			0xff
#define BIT_WMAC_PKTCNT_CFGAD(x)			(((x) & BIT_MASK_WMAC_PKTCNT_CFGAD) << BIT_SHIFT_WMAC_PKTCNT_CFGAD)
#define BITS_WMAC_PKTCNT_CFGAD				(BIT_MASK_WMAC_PKTCNT_CFGAD << BIT_SHIFT_WMAC_PKTCNT_CFGAD)
#define BIT_CLEAR_WMAC_PKTCNT_CFGAD(x)			((x) & (~BITS_WMAC_PKTCNT_CFGAD))
#define BIT_GET_WMAC_PKTCNT_CFGAD(x)			(((x) >> BIT_SHIFT_WMAC_PKTCNT_CFGAD) & BIT_MASK_WMAC_PKTCNT_CFGAD)
#define BIT_SET_WMAC_PKTCNT_CFGAD(x, v)		(BIT_CLEAR_WMAC_PKTCNT_CFGAD(x) | BIT_WMAC_PKTCNT_CFGAD(v))

/* 2 REG_IQ_DUMP				(Offset 0x07C0) */

#define BIT_SHIFT_DUMP_OK_ADDR				16
#define BIT_MASK_DUMP_OK_ADDR				0xffff
#define BIT_DUMP_OK_ADDR(x)				(((x) & BIT_MASK_DUMP_OK_ADDR) << BIT_SHIFT_DUMP_OK_ADDR)
#define BITS_DUMP_OK_ADDR				(BIT_MASK_DUMP_OK_ADDR << BIT_SHIFT_DUMP_OK_ADDR)
#define BIT_CLEAR_DUMP_OK_ADDR(x)			((x) & (~BITS_DUMP_OK_ADDR))
#define BIT_GET_DUMP_OK_ADDR(x)			(((x) >> BIT_SHIFT_DUMP_OK_ADDR) & BIT_MASK_DUMP_OK_ADDR)
#define BIT_SET_DUMP_OK_ADDR(x, v)			(BIT_CLEAR_DUMP_OK_ADDR(x) | BIT_DUMP_OK_ADDR(v))

#define BIT_MACDBG_TRIG_IQDUMP				BIT(15)

#define BIT_SHIFT_R_TRIG_TIME_SEL			8
#define BIT_MASK_R_TRIG_TIME_SEL			0x7f
#define BIT_R_TRIG_TIME_SEL(x)				(((x) & BIT_MASK_R_TRIG_TIME_SEL) << BIT_SHIFT_R_TRIG_TIME_SEL)
#define BITS_R_TRIG_TIME_SEL				(BIT_MASK_R_TRIG_TIME_SEL << BIT_SHIFT_R_TRIG_TIME_SEL)
#define BIT_CLEAR_R_TRIG_TIME_SEL(x)			((x) & (~BITS_R_TRIG_TIME_SEL))
#define BIT_GET_R_TRIG_TIME_SEL(x)			(((x) >> BIT_SHIFT_R_TRIG_TIME_SEL) & BIT_MASK_R_TRIG_TIME_SEL)
#define BIT_SET_R_TRIG_TIME_SEL(x, v)			(BIT_CLEAR_R_TRIG_TIME_SEL(x) | BIT_R_TRIG_TIME_SEL(v))

#define BIT_SHIFT_R_MAC_TRIG_SEL			6
#define BIT_MASK_R_MAC_TRIG_SEL			0x3
#define BIT_R_MAC_TRIG_SEL(x)				(((x) & BIT_MASK_R_MAC_TRIG_SEL) << BIT_SHIFT_R_MAC_TRIG_SEL)
#define BITS_R_MAC_TRIG_SEL				(BIT_MASK_R_MAC_TRIG_SEL << BIT_SHIFT_R_MAC_TRIG_SEL)
#define BIT_CLEAR_R_MAC_TRIG_SEL(x)			((x) & (~BITS_R_MAC_TRIG_SEL))
#define BIT_GET_R_MAC_TRIG_SEL(x)			(((x) >> BIT_SHIFT_R_MAC_TRIG_SEL) & BIT_MASK_R_MAC_TRIG_SEL)
#define BIT_SET_R_MAC_TRIG_SEL(x, v)			(BIT_CLEAR_R_MAC_TRIG_SEL(x) | BIT_R_MAC_TRIG_SEL(v))

#define BIT_MAC_TRIG_REG				BIT(5)

#define BIT_SHIFT_R_LEVEL_PULSE_SEL			3
#define BIT_MASK_R_LEVEL_PULSE_SEL			0x3
#define BIT_R_LEVEL_PULSE_SEL(x)			(((x) & BIT_MASK_R_LEVEL_PULSE_SEL) << BIT_SHIFT_R_LEVEL_PULSE_SEL)
#define BITS_R_LEVEL_PULSE_SEL				(BIT_MASK_R_LEVEL_PULSE_SEL << BIT_SHIFT_R_LEVEL_PULSE_SEL)
#define BIT_CLEAR_R_LEVEL_PULSE_SEL(x)			((x) & (~BITS_R_LEVEL_PULSE_SEL))
#define BIT_GET_R_LEVEL_PULSE_SEL(x)			(((x) >> BIT_SHIFT_R_LEVEL_PULSE_SEL) & BIT_MASK_R_LEVEL_PULSE_SEL)
#define BIT_SET_R_LEVEL_PULSE_SEL(x, v)		(BIT_CLEAR_R_LEVEL_PULSE_SEL(x) | BIT_R_LEVEL_PULSE_SEL(v))

#define BIT_EN_LA_MAC					BIT(2)
#define BIT_R_EN_IQDUMP				BIT(1)
#define BIT_R_IQDATA_DUMP				BIT(0)

/* 2 REG_IQ_DUMP_1				(Offset 0x07C4) */

#define BIT_SHIFT_R_WMAC_MASK_LA_MAC_1			0
#define BIT_MASK_R_WMAC_MASK_LA_MAC_1			0xffffffffL
#define BIT_R_WMAC_MASK_LA_MAC_1(x)			(((x) & BIT_MASK_R_WMAC_MASK_LA_MAC_1) << BIT_SHIFT_R_WMAC_MASK_LA_MAC_1)
#define BITS_R_WMAC_MASK_LA_MAC_1			(BIT_MASK_R_WMAC_MASK_LA_MAC_1 << BIT_SHIFT_R_WMAC_MASK_LA_MAC_1)
#define BIT_CLEAR_R_WMAC_MASK_LA_MAC_1(x)		((x) & (~BITS_R_WMAC_MASK_LA_MAC_1))
#define BIT_GET_R_WMAC_MASK_LA_MAC_1(x)		(((x) >> BIT_SHIFT_R_WMAC_MASK_LA_MAC_1) & BIT_MASK_R_WMAC_MASK_LA_MAC_1)
#define BIT_SET_R_WMAC_MASK_LA_MAC_1(x, v)		(BIT_CLEAR_R_WMAC_MASK_LA_MAC_1(x) | BIT_R_WMAC_MASK_LA_MAC_1(v))

/* 2 REG_IQ_DUMP_2				(Offset 0x07C8) */

#define BIT_SHIFT_R_WMAC_MATCH_REF_MAC_2		0
#define BIT_MASK_R_WMAC_MATCH_REF_MAC_2		0xffffffffL
#define BIT_R_WMAC_MATCH_REF_MAC_2(x)			(((x) & BIT_MASK_R_WMAC_MATCH_REF_MAC_2) << BIT_SHIFT_R_WMAC_MATCH_REF_MAC_2)
#define BITS_R_WMAC_MATCH_REF_MAC_2			(BIT_MASK_R_WMAC_MATCH_REF_MAC_2 << BIT_SHIFT_R_WMAC_MATCH_REF_MAC_2)
#define BIT_CLEAR_R_WMAC_MATCH_REF_MAC_2(x)		((x) & (~BITS_R_WMAC_MATCH_REF_MAC_2))
#define BIT_GET_R_WMAC_MATCH_REF_MAC_2(x)		(((x) >> BIT_SHIFT_R_WMAC_MATCH_REF_MAC_2) & BIT_MASK_R_WMAC_MATCH_REF_MAC_2)
#define BIT_SET_R_WMAC_MATCH_REF_MAC_2(x, v)		(BIT_CLEAR_R_WMAC_MATCH_REF_MAC_2(x) | BIT_R_WMAC_MATCH_REF_MAC_2(v))

/* 2 REG_WMAC_FTM_CTL			(Offset 0x07CC) */

#define BIT_RXFTM_TXACK_SC				BIT(6)
#define BIT_RXFTM_TXACK_BW				BIT(5)
#define BIT_RXFTM_EN					BIT(3)
#define BIT_RXFTMREQ_BYDRV				BIT(2)
#define BIT_RXFTMREQ_EN				BIT(1)
#define BIT_FTM_EN					BIT(0)

/* 2 REG_WMAC_OPTION_FUNCTION		(Offset 0x07D0) */

#define BIT_SHIFT_R_OFDM_LEN_V1			16
#define BIT_MASK_R_OFDM_LEN_V1				0xffff
#define BIT_R_OFDM_LEN_V1(x)				(((x) & BIT_MASK_R_OFDM_LEN_V1) << BIT_SHIFT_R_OFDM_LEN_V1)
#define BITS_R_OFDM_LEN_V1				(BIT_MASK_R_OFDM_LEN_V1 << BIT_SHIFT_R_OFDM_LEN_V1)
#define BIT_CLEAR_R_OFDM_LEN_V1(x)			((x) & (~BITS_R_OFDM_LEN_V1))
#define BIT_GET_R_OFDM_LEN_V1(x)			(((x) >> BIT_SHIFT_R_OFDM_LEN_V1) & BIT_MASK_R_OFDM_LEN_V1)
#define BIT_SET_R_OFDM_LEN_V1(x, v)			(BIT_CLEAR_R_OFDM_LEN_V1(x) | BIT_R_OFDM_LEN_V1(v))

#define BIT_SHIFT_R_CCK_LEN				0
#define BIT_MASK_R_CCK_LEN				0xffff
#define BIT_R_CCK_LEN(x)				(((x) & BIT_MASK_R_CCK_LEN) << BIT_SHIFT_R_CCK_LEN)
#define BITS_R_CCK_LEN					(BIT_MASK_R_CCK_LEN << BIT_SHIFT_R_CCK_LEN)
#define BIT_CLEAR_R_CCK_LEN(x)				((x) & (~BITS_R_CCK_LEN))
#define BIT_GET_R_CCK_LEN(x)				(((x) >> BIT_SHIFT_R_CCK_LEN) & BIT_MASK_R_CCK_LEN)
#define BIT_SET_R_CCK_LEN(x, v)			(BIT_CLEAR_R_CCK_LEN(x) | BIT_R_CCK_LEN(v))

/* 2 REG_WMAC_OPTION_FUNCTION_1		(Offset 0x07D4) */

#define BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1		24
#define BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1		0xff
#define BIT_R_WMAC_RXFIFO_FULL_TH_1(x)			(((x) & BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1) << BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1)
#define BITS_R_WMAC_RXFIFO_FULL_TH_1			(BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1 << BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1)
#define BIT_CLEAR_R_WMAC_RXFIFO_FULL_TH_1(x)		((x) & (~BITS_R_WMAC_RXFIFO_FULL_TH_1))
#define BIT_GET_R_WMAC_RXFIFO_FULL_TH_1(x)		(((x) >> BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1) & BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1)
#define BIT_SET_R_WMAC_RXFIFO_FULL_TH_1(x, v)		(BIT_CLEAR_R_WMAC_RXFIFO_FULL_TH_1(x) | BIT_R_WMAC_RXFIFO_FULL_TH_1(v))

#define BIT_R_WMAC_RX_SYNCFIFO_SYNC_1			BIT(23)
#define BIT_R_WMAC_RXRST_DLY_1				BIT(22)
#define BIT_R_WMAC_SRCH_TXRPT_REF_DROP_1		BIT(21)
#define BIT_R_WMAC_SRCH_TXRPT_UA1_1			BIT(20)
#define BIT_R_WMAC_SRCH_TXRPT_TYPE_1			BIT(19)
#define BIT_R_WMAC_NDP_RST_1				BIT(18)
#define BIT_R_WMAC_POWINT_EN_1				BIT(17)
#define BIT_R_WMAC_SRCH_TXRPT_PERPKT_1			BIT(16)
#define BIT_R_WMAC_SRCH_TXRPT_MID_1			BIT(15)
#define BIT_R_WMAC_PFIN_TOEN_1				BIT(14)
#define BIT_R_WMAC_FIL_SECERR_1			BIT(13)
#define BIT_R_WMAC_FIL_CTLPKTLEN_1			BIT(12)
#define BIT_R_WMAC_FIL_FCTYPE_1			BIT(11)
#define BIT_R_WMAC_FIL_FCPROVER_1			BIT(10)
#define BIT_R_WMAC_PHYSTS_SNIF_1			BIT(9)
#define BIT_R_WMAC_PHYSTS_PLCP_1			BIT(8)
#define BIT_R_MAC_TCR_VBONF_RD_1			BIT(7)
#define BIT_R_WMAC_TCR_MPAR_NDP_1			BIT(6)
#define BIT_R_WMAC_NDP_FILTER_1			BIT(5)
#define BIT_R_WMAC_RXLEN_SEL_1				BIT(4)
#define BIT_R_WMAC_RXLEN_SEL1_1			BIT(3)
#define BIT_R_OFDM_FILTER_1				BIT(2)
#define BIT_R_WMAC_CHK_OFDM_LEN_1			BIT(1)
#define BIT_R_WMAC_CHK_CCK_LEN_1			BIT(0)

/* 2 REG_WMAC_OPTION_FUNCTION_2		(Offset 0x07D8) */

#define BIT_SHIFT_R_WMAC_RX_FIL_LEN_2			0
#define BIT_MASK_R_WMAC_RX_FIL_LEN_2			0xffff
#define BIT_R_WMAC_RX_FIL_LEN_2(x)			(((x) & BIT_MASK_R_WMAC_RX_FIL_LEN_2) << BIT_SHIFT_R_WMAC_RX_FIL_LEN_2)
#define BITS_R_WMAC_RX_FIL_LEN_2			(BIT_MASK_R_WMAC_RX_FIL_LEN_2 << BIT_SHIFT_R_WMAC_RX_FIL_LEN_2)
#define BIT_CLEAR_R_WMAC_RX_FIL_LEN_2(x)		((x) & (~BITS_R_WMAC_RX_FIL_LEN_2))
#define BIT_GET_R_WMAC_RX_FIL_LEN_2(x)			(((x) >> BIT_SHIFT_R_WMAC_RX_FIL_LEN_2) & BIT_MASK_R_WMAC_RX_FIL_LEN_2)
#define BIT_SET_R_WMAC_RX_FIL_LEN_2(x, v)		(BIT_CLEAR_R_WMAC_RX_FIL_LEN_2(x) | BIT_R_WMAC_RX_FIL_LEN_2(v))

/* 2 REG_RX_FILTER_FUNCTION			(Offset 0x07DA) */

#define BIT_RXHANG_EN					BIT(15)
#define BIT_R_WMAC_MHRDDY_LATCH			BIT(14)
#define BIT_R_WMAC_MHRDDY_CLR				BIT(13)
#define BIT_R_RXPKTCTL_FSM_BASED_MPDURDY1		BIT(12)
#define BIT_WMAC_DIS_VHT_PLCP_CHK_MU			BIT(11)
#define BIT_R_CHK_DELIMIT_LEN				BIT(10)
#define BIT_R_REAPTER_ADDR_MATCH			BIT(9)
#define BIT_R_RXPKTCTL_FSM_BASED_MPDURDY		BIT(8)
#define BIT_R_LATCH_MACHRDY				BIT(7)
#define BIT_R_WMAC_RXFIL_REND				BIT(6)
#define BIT_R_WMAC_MPDURDY_CLR				BIT(5)
#define BIT_R_WMAC_CLRRXSEC				BIT(4)
#define BIT_R_WMAC_RXFIL_RDEL				BIT(3)
#define BIT_R_WMAC_RXFIL_FCSE				BIT(2)
#define BIT_R_WMAC_RXFIL_MESH_DEL			BIT(1)
#define BIT_R_WMAC_RXFIL_MASKM				BIT(0)

/* 2 REG_NDP_SIG				(Offset 0x07E0) */

#define BIT_SHIFT_R_WMAC_TXNDP_SIGB			0
#define BIT_MASK_R_WMAC_TXNDP_SIGB			0x1fffff
#define BIT_R_WMAC_TXNDP_SIGB(x)			(((x) & BIT_MASK_R_WMAC_TXNDP_SIGB) << BIT_SHIFT_R_WMAC_TXNDP_SIGB)
#define BITS_R_WMAC_TXNDP_SIGB				(BIT_MASK_R_WMAC_TXNDP_SIGB << BIT_SHIFT_R_WMAC_TXNDP_SIGB)
#define BIT_CLEAR_R_WMAC_TXNDP_SIGB(x)			((x) & (~BITS_R_WMAC_TXNDP_SIGB))
#define BIT_GET_R_WMAC_TXNDP_SIGB(x)			(((x) >> BIT_SHIFT_R_WMAC_TXNDP_SIGB) & BIT_MASK_R_WMAC_TXNDP_SIGB)
#define BIT_SET_R_WMAC_TXNDP_SIGB(x, v)		(BIT_CLEAR_R_WMAC_TXNDP_SIGB(x) | BIT_R_WMAC_TXNDP_SIGB(v))

/* 2 REG_TXCMD_INFO_FOR_RSP_PKT		(Offset 0x07E4) */

#define BIT_SHIFT_R_MAC_DBG_SHIFT			8
#define BIT_MASK_R_MAC_DBG_SHIFT			0x7
#define BIT_R_MAC_DBG_SHIFT(x)				(((x) & BIT_MASK_R_MAC_DBG_SHIFT) << BIT_SHIFT_R_MAC_DBG_SHIFT)
#define BITS_R_MAC_DBG_SHIFT				(BIT_MASK_R_MAC_DBG_SHIFT << BIT_SHIFT_R_MAC_DBG_SHIFT)
#define BIT_CLEAR_R_MAC_DBG_SHIFT(x)			((x) & (~BITS_R_MAC_DBG_SHIFT))
#define BIT_GET_R_MAC_DBG_SHIFT(x)			(((x) >> BIT_SHIFT_R_MAC_DBG_SHIFT) & BIT_MASK_R_MAC_DBG_SHIFT)
#define BIT_SET_R_MAC_DBG_SHIFT(x, v)			(BIT_CLEAR_R_MAC_DBG_SHIFT(x) | BIT_R_MAC_DBG_SHIFT(v))

#define BIT_SHIFT_R_MAC_DBG_SEL			0
#define BIT_MASK_R_MAC_DBG_SEL				0x3
#define BIT_R_MAC_DBG_SEL(x)				(((x) & BIT_MASK_R_MAC_DBG_SEL) << BIT_SHIFT_R_MAC_DBG_SEL)
#define BITS_R_MAC_DBG_SEL				(BIT_MASK_R_MAC_DBG_SEL << BIT_SHIFT_R_MAC_DBG_SEL)
#define BIT_CLEAR_R_MAC_DBG_SEL(x)			((x) & (~BITS_R_MAC_DBG_SEL))
#define BIT_GET_R_MAC_DBG_SEL(x)			(((x) >> BIT_SHIFT_R_MAC_DBG_SEL) & BIT_MASK_R_MAC_DBG_SEL)
#define BIT_SET_R_MAC_DBG_SEL(x, v)			(BIT_CLEAR_R_MAC_DBG_SEL(x) | BIT_R_MAC_DBG_SEL(v))

/* 2 REG_TXCMD_INFO_FOR_RSP_PKT_1		(Offset 0x07E8) */

#define BIT_SHIFT_R_MAC_DEBUG_1			0
#define BIT_MASK_R_MAC_DEBUG_1				0xffffffffL
#define BIT_R_MAC_DEBUG_1(x)				(((x) & BIT_MASK_R_MAC_DEBUG_1) << BIT_SHIFT_R_MAC_DEBUG_1)
#define BITS_R_MAC_DEBUG_1				(BIT_MASK_R_MAC_DEBUG_1 << BIT_SHIFT_R_MAC_DEBUG_1)
#define BIT_CLEAR_R_MAC_DEBUG_1(x)			((x) & (~BITS_R_MAC_DEBUG_1))
#define BIT_GET_R_MAC_DEBUG_1(x)			(((x) >> BIT_SHIFT_R_MAC_DEBUG_1) & BIT_MASK_R_MAC_DEBUG_1)
#define BIT_SET_R_MAC_DEBUG_1(x, v)			(BIT_CLEAR_R_MAC_DEBUG_1(x) | BIT_R_MAC_DEBUG_1(v))

/* 2 REG_WSEC_OPTION				(Offset 0x07EC) */

#define BIT_RXDEC_BM_MGNT				BIT(22)
#define BIT_TXENC_BM_MGNT				BIT(21)
#define BIT_RXDEC_UNI_MGNT				BIT(20)
#define BIT_TXENC_UNI_MGNT				BIT(19)
#define BIT_WMAC_SEC_MASKIV				BIT(18)

#define BIT_SHIFT_WMAC_SEC_PN_SEL			16
#define BIT_MASK_WMAC_SEC_PN_SEL			0x3
#define BIT_WMAC_SEC_PN_SEL(x)				(((x) & BIT_MASK_WMAC_SEC_PN_SEL) << BIT_SHIFT_WMAC_SEC_PN_SEL)
#define BITS_WMAC_SEC_PN_SEL				(BIT_MASK_WMAC_SEC_PN_SEL << BIT_SHIFT_WMAC_SEC_PN_SEL)
#define BIT_CLEAR_WMAC_SEC_PN_SEL(x)			((x) & (~BITS_WMAC_SEC_PN_SEL))
#define BIT_GET_WMAC_SEC_PN_SEL(x)			(((x) >> BIT_SHIFT_WMAC_SEC_PN_SEL) & BIT_MASK_WMAC_SEC_PN_SEL)
#define BIT_SET_WMAC_SEC_PN_SEL(x, v)			(BIT_CLEAR_WMAC_SEC_PN_SEL(x) | BIT_WMAC_SEC_PN_SEL(v))

#define BIT_SHIFT_BT_TIME_CNT				0
#define BIT_MASK_BT_TIME_CNT				0xff
#define BIT_BT_TIME_CNT(x)				(((x) & BIT_MASK_BT_TIME_CNT) << BIT_SHIFT_BT_TIME_CNT)
#define BITS_BT_TIME_CNT				(BIT_MASK_BT_TIME_CNT << BIT_SHIFT_BT_TIME_CNT)
#define BIT_CLEAR_BT_TIME_CNT(x)			((x) & (~BITS_BT_TIME_CNT))
#define BIT_GET_BT_TIME_CNT(x)				(((x) >> BIT_SHIFT_BT_TIME_CNT) & BIT_MASK_BT_TIME_CNT)
#define BIT_SET_BT_TIME_CNT(x, v)			(BIT_CLEAR_BT_TIME_CNT(x) | BIT_BT_TIME_CNT(v))

/* 2 REG_CR_EXT				(Offset 0x1100) */

#define BIT_SHIFT_PHY_REQ_DELAY			24
#define BIT_MASK_PHY_REQ_DELAY				0xf
#define BIT_PHY_REQ_DELAY(x)				(((x) & BIT_MASK_PHY_REQ_DELAY) << BIT_SHIFT_PHY_REQ_DELAY)
#define BITS_PHY_REQ_DELAY				(BIT_MASK_PHY_REQ_DELAY << BIT_SHIFT_PHY_REQ_DELAY)
#define BIT_CLEAR_PHY_REQ_DELAY(x)			((x) & (~BITS_PHY_REQ_DELAY))
#define BIT_GET_PHY_REQ_DELAY(x)			(((x) >> BIT_SHIFT_PHY_REQ_DELAY) & BIT_MASK_PHY_REQ_DELAY)
#define BIT_SET_PHY_REQ_DELAY(x, v)			(BIT_CLEAR_PHY_REQ_DELAY(x) | BIT_PHY_REQ_DELAY(v))

#define BIT_SPD_DOWN					BIT(16)

#define BIT_SHIFT_NETYPE4				4
#define BIT_MASK_NETYPE4				0x3
#define BIT_NETYPE4(x)					(((x) & BIT_MASK_NETYPE4) << BIT_SHIFT_NETYPE4)
#define BITS_NETYPE4					(BIT_MASK_NETYPE4 << BIT_SHIFT_NETYPE4)
#define BIT_CLEAR_NETYPE4(x)				((x) & (~BITS_NETYPE4))
#define BIT_GET_NETYPE4(x)				(((x) >> BIT_SHIFT_NETYPE4) & BIT_MASK_NETYPE4)
#define BIT_SET_NETYPE4(x, v)				(BIT_CLEAR_NETYPE4(x) | BIT_NETYPE4(v))

#define BIT_SHIFT_NETYPE3				2
#define BIT_MASK_NETYPE3				0x3
#define BIT_NETYPE3(x)					(((x) & BIT_MASK_NETYPE3) << BIT_SHIFT_NETYPE3)
#define BITS_NETYPE3					(BIT_MASK_NETYPE3 << BIT_SHIFT_NETYPE3)
#define BIT_CLEAR_NETYPE3(x)				((x) & (~BITS_NETYPE3))
#define BIT_GET_NETYPE3(x)				(((x) >> BIT_SHIFT_NETYPE3) & BIT_MASK_NETYPE3)
#define BIT_SET_NETYPE3(x, v)				(BIT_CLEAR_NETYPE3(x) | BIT_NETYPE3(v))

#define BIT_SHIFT_NETYPE2				0
#define BIT_MASK_NETYPE2				0x3
#define BIT_NETYPE2(x)					(((x) & BIT_MASK_NETYPE2) << BIT_SHIFT_NETYPE2)
#define BITS_NETYPE2					(BIT_MASK_NETYPE2 << BIT_SHIFT_NETYPE2)
#define BIT_CLEAR_NETYPE2(x)				((x) & (~BITS_NETYPE2))
#define BIT_GET_NETYPE2(x)				(((x) >> BIT_SHIFT_NETYPE2) & BIT_MASK_NETYPE2)
#define BIT_SET_NETYPE2(x, v)				(BIT_CLEAR_NETYPE2(x) | BIT_NETYPE2(v))

/* 2 REG_FWFF				(Offset 0x1114) */

#define BIT_SHIFT_PKTNUM_TH_V1				24
#define BIT_MASK_PKTNUM_TH_V1				0xff
#define BIT_PKTNUM_TH_V1(x)				(((x) & BIT_MASK_PKTNUM_TH_V1) << BIT_SHIFT_PKTNUM_TH_V1)
#define BITS_PKTNUM_TH_V1				(BIT_MASK_PKTNUM_TH_V1 << BIT_SHIFT_PKTNUM_TH_V1)
#define BIT_CLEAR_PKTNUM_TH_V1(x)			((x) & (~BITS_PKTNUM_TH_V1))
#define BIT_GET_PKTNUM_TH_V1(x)			(((x) >> BIT_SHIFT_PKTNUM_TH_V1) & BIT_MASK_PKTNUM_TH_V1)
#define BIT_SET_PKTNUM_TH_V1(x, v)			(BIT_CLEAR_PKTNUM_TH_V1(x) | BIT_PKTNUM_TH_V1(v))

#define BIT_SHIFT_TIMER_TH				16
#define BIT_MASK_TIMER_TH				0xff
#define BIT_TIMER_TH(x)				(((x) & BIT_MASK_TIMER_TH) << BIT_SHIFT_TIMER_TH)
#define BITS_TIMER_TH					(BIT_MASK_TIMER_TH << BIT_SHIFT_TIMER_TH)
#define BIT_CLEAR_TIMER_TH(x)				((x) & (~BITS_TIMER_TH))
#define BIT_GET_TIMER_TH(x)				(((x) >> BIT_SHIFT_TIMER_TH) & BIT_MASK_TIMER_TH)
#define BIT_SET_TIMER_TH(x, v)				(BIT_CLEAR_TIMER_TH(x) | BIT_TIMER_TH(v))

#define BIT_SHIFT_RXPKT1ENADDR				0
#define BIT_MASK_RXPKT1ENADDR				0xffff
#define BIT_RXPKT1ENADDR(x)				(((x) & BIT_MASK_RXPKT1ENADDR) << BIT_SHIFT_RXPKT1ENADDR)
#define BITS_RXPKT1ENADDR				(BIT_MASK_RXPKT1ENADDR << BIT_SHIFT_RXPKT1ENADDR)
#define BIT_CLEAR_RXPKT1ENADDR(x)			((x) & (~BITS_RXPKT1ENADDR))
#define BIT_GET_RXPKT1ENADDR(x)			(((x) >> BIT_SHIFT_RXPKT1ENADDR) & BIT_MASK_RXPKT1ENADDR)
#define BIT_SET_RXPKT1ENADDR(x, v)			(BIT_CLEAR_RXPKT1ENADDR(x) | BIT_RXPKT1ENADDR(v))

#define BIT_SHIFT_RXFF0_RDPTR_V2			0
#define BIT_MASK_RXFF0_RDPTR_V2			0x3ffff
#define BIT_RXFF0_RDPTR_V2(x)				(((x) & BIT_MASK_RXFF0_RDPTR_V2) << BIT_SHIFT_RXFF0_RDPTR_V2)
#define BITS_RXFF0_RDPTR_V2				(BIT_MASK_RXFF0_RDPTR_V2 << BIT_SHIFT_RXFF0_RDPTR_V2)
#define BIT_CLEAR_RXFF0_RDPTR_V2(x)			((x) & (~BITS_RXFF0_RDPTR_V2))
#define BIT_GET_RXFF0_RDPTR_V2(x)			(((x) >> BIT_SHIFT_RXFF0_RDPTR_V2) & BIT_MASK_RXFF0_RDPTR_V2)
#define BIT_SET_RXFF0_RDPTR_V2(x, v)			(BIT_CLEAR_RXFF0_RDPTR_V2(x) | BIT_RXFF0_RDPTR_V2(v))

#define BIT_SHIFT_RXFF0_WTPTR_V2			0
#define BIT_MASK_RXFF0_WTPTR_V2			0x3ffff
#define BIT_RXFF0_WTPTR_V2(x)				(((x) & BIT_MASK_RXFF0_WTPTR_V2) << BIT_SHIFT_RXFF0_WTPTR_V2)
#define BITS_RXFF0_WTPTR_V2				(BIT_MASK_RXFF0_WTPTR_V2 << BIT_SHIFT_RXFF0_WTPTR_V2)
#define BIT_CLEAR_RXFF0_WTPTR_V2(x)			((x) & (~BITS_RXFF0_WTPTR_V2))
#define BIT_GET_RXFF0_WTPTR_V2(x)			(((x) >> BIT_SHIFT_RXFF0_WTPTR_V2) & BIT_MASK_RXFF0_WTPTR_V2)
#define BIT_SET_RXFF0_WTPTR_V2(x, v)			(BIT_CLEAR_RXFF0_WTPTR_V2(x) | BIT_RXFF0_WTPTR_V2(v))

/* 2 REG_FE2IMR				(Offset 0x1120) */

#define BIT__FE4ISR__IND_MSK				BIT(29)
#define BIT_FS_TXSC_DESC_DONE_INT_EN			BIT(28)
#define BIT_FS_TXSC_BKDONE_INT_EN			BIT(27)
#define BIT_FS_TXSC_BEDONE_INT_EN			BIT(26)
#define BIT_FS_TXSC_VIDONE_INT_EN			BIT(25)
#define BIT_FS_TXSC_VODONE_INT_EN			BIT(24)
#define BIT_FS_ATIM_MB7_INT_EN				BIT(23)
#define BIT_FS_ATIM_MB6_INT_EN				BIT(22)
#define BIT_FS_ATIM_MB5_INT_EN				BIT(21)
#define BIT_FS_ATIM_MB4_INT_EN				BIT(20)
#define BIT_FS_ATIM_MB3_INT_EN				BIT(19)
#define BIT_FS_ATIM_MB2_INT_EN				BIT(18)
#define BIT_FS_ATIM_MB1_INT_EN				BIT(17)
#define BIT_FS_ATIM_MB0_INT_EN				BIT(16)
#define BIT_FS_TBTT4INT_EN				BIT(11)
#define BIT_FS_TBTT3INT_EN				BIT(10)
#define BIT_FS_TBTT2INT_EN				BIT(9)
#define BIT_FS_TBTT1INT_EN				BIT(8)
#define BIT_FS_TBTT0_MB7INT_EN				BIT(7)
#define BIT_FS_TBTT0_MB6INT_EN				BIT(6)
#define BIT_FS_TBTT0_MB5INT_EN				BIT(5)
#define BIT_FS_TBTT0_MB4INT_EN				BIT(4)
#define BIT_FS_TBTT0_MB3INT_EN				BIT(3)
#define BIT_FS_TBTT0_MB2INT_EN				BIT(2)
#define BIT_FS_TBTT0_MB1INT_EN				BIT(1)
#define BIT_FS_TBTT0_INT_EN				BIT(0)

/* 2 REG_FE2ISR				(Offset 0x1124) */

#define BIT__FE4ISR__IND_INT				BIT(29)
#define BIT_FS_TXSC_DESC_DONE_INT			BIT(28)
#define BIT_FS_TXSC_BKDONE_INT				BIT(27)
#define BIT_FS_TXSC_BEDONE_INT				BIT(26)
#define BIT_FS_TXSC_VIDONE_INT				BIT(25)
#define BIT_FS_TXSC_VODONE_INT				BIT(24)
#define BIT_FS_ATIM_MB7_INT				BIT(23)
#define BIT_FS_ATIM_MB6_INT				BIT(22)
#define BIT_FS_ATIM_MB5_INT				BIT(21)
#define BIT_FS_ATIM_MB4_INT				BIT(20)
#define BIT_FS_ATIM_MB3_INT				BIT(19)
#define BIT_FS_ATIM_MB2_INT				BIT(18)
#define BIT_FS_ATIM_MB1_INT				BIT(17)
#define BIT_FS_ATIM_MB0_INT				BIT(16)
#define BIT_FS_TBTT4INT				BIT(11)
#define BIT_FS_TBTT3INT				BIT(10)
#define BIT_FS_TBTT2INT				BIT(9)
#define BIT_FS_TBTT1INT				BIT(8)
#define BIT_FS_TBTT0_MB7INT				BIT(7)
#define BIT_FS_TBTT0_MB6INT				BIT(6)
#define BIT_FS_TBTT0_MB5INT				BIT(5)
#define BIT_FS_TBTT0_MB4INT				BIT(4)
#define BIT_FS_TBTT0_MB3INT				BIT(3)
#define BIT_FS_TBTT0_MB2INT				BIT(2)
#define BIT_FS_TBTT0_MB1INT				BIT(1)
#define BIT_FS_TBTT0_INT				BIT(0)

/* 2 REG_FE3IMR				(Offset 0x1128) */

#define BIT_FS_CLI3_MTI_BCNIVLEAR_INT__EN		BIT(31)
#define BIT_FS_CLI2_MTI_BCNIVLEAR_INT__EN		BIT(30)
#define BIT_FS_CLI1_MTI_BCNIVLEAR_INT__EN		BIT(29)
#define BIT_FS_CLI0_MTI_BCNIVLEAR_INT__EN		BIT(28)
#define BIT_FS_BCNDMA4_INT_EN				BIT(27)
#define BIT_FS_BCNDMA3_INT_EN				BIT(26)
#define BIT_FS_BCNDMA2_INT_EN				BIT(25)
#define BIT_FS_BCNDMA1_INT_EN				BIT(24)
#define BIT_FS_BCNDMA0_MB7_INT_EN			BIT(23)
#define BIT_FS_BCNDMA0_MB6_INT_EN			BIT(22)
#define BIT_FS_BCNDMA0_MB5_INT_EN			BIT(21)
#define BIT_FS_BCNDMA0_MB4_INT_EN			BIT(20)
#define BIT_FS_BCNDMA0_MB3_INT_EN			BIT(19)
#define BIT_FS_BCNDMA0_MB2_INT_EN			BIT(18)
#define BIT_FS_BCNDMA0_MB1_INT_EN			BIT(17)
#define BIT_FS_BCNDMA0_INT_EN				BIT(16)
#define BIT_FS_MTI_BCNIVLEAR_INT__EN			BIT(15)
#define BIT_FS_BCNERLY4_INT_EN				BIT(11)
#define BIT_FS_BCNERLY3_INT_EN				BIT(10)
#define BIT_FS_BCNERLY2_INT_EN				BIT(9)
#define BIT_FS_BCNERLY1_INT_EN				BIT(8)
#define BIT_FS_BCNERLY0_MB7INT_EN			BIT(7)
#define BIT_FS_BCNERLY0_MB6INT_EN			BIT(6)
#define BIT_FS_BCNERLY0_MB5INT_EN			BIT(5)
#define BIT_FS_BCNERLY0_MB4INT_EN			BIT(4)
#define BIT_FS_BCNERLY0_MB3INT_EN			BIT(3)
#define BIT_FS_BCNERLY0_MB2INT_EN			BIT(2)
#define BIT_FS_BCNERLY0_MB1INT_EN			BIT(1)
#define BIT_FS_BCNERLY0_INT_EN				BIT(0)

/* 2 REG_FE3ISR				(Offset 0x112C) */

#define BIT_FS_CLI3_MTI_BCNIVLEAR_INT			BIT(31)
#define BIT_FS_CLI2_MTI_BCNIVLEAR_INT			BIT(30)
#define BIT_FS_CLI1_MTI_BCNIVLEAR_INT			BIT(29)
#define BIT_FS_CLI0_MTI_BCNIVLEAR_INT			BIT(28)
#define BIT_FS_BCNDMA4_INT				BIT(27)
#define BIT_FS_BCNDMA3_INT				BIT(26)
#define BIT_FS_BCNDMA2_INT				BIT(25)
#define BIT_FS_BCNDMA1_INT				BIT(24)
#define BIT_FS_BCNDMA0_MB7_INT				BIT(23)
#define BIT_FS_BCNDMA0_MB6_INT				BIT(22)
#define BIT_FS_BCNDMA0_MB5_INT				BIT(21)
#define BIT_FS_BCNDMA0_MB4_INT				BIT(20)
#define BIT_FS_BCNDMA0_MB3_INT				BIT(19)
#define BIT_FS_BCNDMA0_MB2_INT				BIT(18)
#define BIT_FS_BCNDMA0_MB1_INT				BIT(17)
#define BIT_FS_BCNDMA0_INT				BIT(16)
#define BIT_FS_MTI_BCNIVLEAR_INT			BIT(15)
#define BIT_FS_BCNERLY4_INT				BIT(11)
#define BIT_FS_BCNERLY3_INT				BIT(10)
#define BIT_FS_BCNERLY2_INT				BIT(9)
#define BIT_FS_BCNERLY1_INT				BIT(8)
#define BIT_FS_BCNERLY0_MB7INT				BIT(7)
#define BIT_FS_BCNERLY0_MB6INT				BIT(6)
#define BIT_FS_BCNERLY0_MB5INT				BIT(5)
#define BIT_FS_BCNERLY0_MB4INT				BIT(4)
#define BIT_FS_BCNERLY0_MB3INT				BIT(3)
#define BIT_FS_BCNERLY0_MB2INT				BIT(2)
#define BIT_FS_BCNERLY0_MB1INT				BIT(1)
#define BIT_FS_BCNERLY0_INT				BIT(0)

/* 2 REG_FE4IMR				(Offset 0x1130) */

#define BIT_FS_CLI3_TXPKTIN_INT_EN			BIT(19)
#define BIT_FS_CLI2_TXPKTIN_INT_EN			BIT(18)
#define BIT_FS_CLI1_TXPKTIN_INT_EN			BIT(17)
#define BIT_FS_CLI0_TXPKTIN_INT_EN			BIT(16)
#define BIT_FS_CLI3_RX_UMD0_INT_EN			BIT(15)
#define BIT_FS_CLI3_RX_UMD1_INT_EN			BIT(14)
#define BIT_FS_CLI3_RX_BMD0_INT_EN			BIT(13)
#define BIT_FS_CLI3_RX_BMD1_INT_EN			BIT(12)
#define BIT_FS_CLI2_RX_UMD0_INT_EN			BIT(11)
#define BIT_FS_CLI2_RX_UMD1_INT_EN			BIT(10)
#define BIT_FS_CLI2_RX_BMD0_INT_EN			BIT(9)
#define BIT_FS_CLI2_RX_BMD1_INT_EN			BIT(8)
#define BIT_FS_CLI1_RX_UMD0_INT_EN			BIT(7)
#define BIT_FS_CLI1_RX_UMD1_INT_EN			BIT(6)
#define BIT_FS_CLI1_RX_BMD0_INT_EN			BIT(5)
#define BIT_FS_CLI1_RX_BMD1_INT_EN			BIT(4)
#define BIT_FS_CLI0_RX_UMD0_INT_EN			BIT(3)
#define BIT_FS_CLI0_RX_UMD1_INT_EN			BIT(2)
#define BIT_FS_CLI0_RX_BMD0_INT_EN			BIT(1)
#define BIT_FS_CLI0_RX_BMD1_INT_EN			BIT(0)

/* 2 REG_FE4ISR				(Offset 0x1134) */

#define BIT_FS_CLI3_TXPKTIN_INT			BIT(19)
#define BIT_FS_CLI2_TXPKTIN_INT			BIT(18)
#define BIT_FS_CLI1_TXPKTIN_INT			BIT(17)
#define BIT_FS_CLI0_TXPKTIN_INT			BIT(16)
#define BIT_FS_CLI3_RX_UMD0_INT			BIT(15)
#define BIT_FS_CLI3_RX_UMD1_INT			BIT(14)
#define BIT_FS_CLI3_RX_BMD0_INT			BIT(13)
#define BIT_FS_CLI3_RX_BMD1_INT			BIT(12)
#define BIT_FS_CLI2_RX_UMD0_INT			BIT(11)
#define BIT_FS_CLI2_RX_UMD1_INT			BIT(10)
#define BIT_FS_CLI2_RX_BMD0_INT			BIT(9)
#define BIT_FS_CLI2_RX_BMD1_INT			BIT(8)
#define BIT_FS_CLI1_RX_UMD0_INT			BIT(7)
#define BIT_FS_CLI1_RX_UMD1_INT			BIT(6)
#define BIT_FS_CLI1_RX_BMD0_INT			BIT(5)
#define BIT_FS_CLI1_RX_BMD1_INT			BIT(4)
#define BIT_FS_CLI0_RX_UMD0_INT			BIT(3)
#define BIT_FS_CLI0_RX_UMD1_INT			BIT(2)
#define BIT_FS_CLI0_RX_BMD0_INT			BIT(1)
#define BIT_FS_CLI0_RX_BMD1_INT			BIT(0)

/* 2 REG_FT1IMR				(Offset 0x1138) */

#define BIT__FT2ISR__IND_MSK				BIT(30)
#define BIT_FTM_PTT_INT_EN				BIT(29)
#define BIT_RXFTMREQ_INT_EN				BIT(28)
#define BIT_RXFTM_INT_EN				BIT(27)
#define BIT_TXFTM_INT_EN				BIT(26)
#define BIT_FS_H2C_CMD_OK_INT_EN			BIT(25)
#define BIT_FS_H2C_CMD_FULL_INT_EN			BIT(24)
#define BIT_FS_MACID_PWRCHANGE5_INT_EN			BIT(23)
#define BIT_FS_MACID_PWRCHANGE4_INT_EN			BIT(22)
#define BIT_FS_MACID_PWRCHANGE3_INT_EN			BIT(21)
#define BIT_FS_MACID_PWRCHANGE2_INT_EN			BIT(20)
#define BIT_FS_MACID_PWRCHANGE1_INT_EN			BIT(19)
#define BIT_FS_MACID_PWRCHANGE0_INT_EN			BIT(18)
#define BIT_FS_CTWEND2_INT_EN				BIT(17)
#define BIT_FS_CTWEND1_INT_EN				BIT(16)
#define BIT_FS_CTWEND0_INT_EN				BIT(15)
#define BIT_FS_TX_NULL1_INT_EN				BIT(14)
#define BIT_FS_TX_NULL0_INT_EN				BIT(13)
#define BIT_FS_TSF_BIT32_TOGGLE_EN			BIT(12)
#define BIT_FS_P2P_RFON2_INT_EN			BIT(11)
#define BIT_FS_P2P_RFOFF2_INT_EN			BIT(10)
#define BIT_FS_P2P_RFON1_INT_EN			BIT(9)
#define BIT_FS_P2P_RFOFF1_INT_EN			BIT(8)
#define BIT_FS_P2P_RFON0_INT_EN			BIT(7)
#define BIT_FS_P2P_RFOFF0_INT_EN			BIT(6)
#define BIT_FS_RX_UAPSDMD1_EN				BIT(5)
#define BIT_FS_RX_UAPSDMD0_EN				BIT(4)
#define BIT_FS_TRIGGER_PKT_EN				BIT(3)
#define BIT_FS_EOSP_INT_EN				BIT(2)
#define BIT_FS_RPWM2_INT_EN				BIT(1)
#define BIT_FS_RPWM_INT_EN				BIT(0)

/* 2 REG_FT1ISR				(Offset 0x113C) */

#define BIT__FT2ISR__IND_INT				BIT(30)
#define BIT_FTM_PTT_INT				BIT(29)
#define BIT_RXFTMREQ_INT				BIT(28)
#define BIT_RXFTM_INT					BIT(27)
#define BIT_TXFTM_INT					BIT(26)
#define BIT_FS_H2C_CMD_OK_INT				BIT(25)
#define BIT_FS_H2C_CMD_FULL_INT			BIT(24)
#define BIT_FS_MACID_PWRCHANGE5_INT			BIT(23)
#define BIT_FS_MACID_PWRCHANGE4_INT			BIT(22)
#define BIT_FS_MACID_PWRCHANGE3_INT			BIT(21)
#define BIT_FS_MACID_PWRCHANGE2_INT			BIT(20)
#define BIT_FS_MACID_PWRCHANGE1_INT			BIT(19)
#define BIT_FS_MACID_PWRCHANGE0_INT			BIT(18)
#define BIT_FS_CTWEND2_INT				BIT(17)
#define BIT_FS_CTWEND1_INT				BIT(16)
#define BIT_FS_CTWEND0_INT				BIT(15)
#define BIT_FS_TX_NULL1_INT				BIT(14)
#define BIT_FS_TX_NULL0_INT				BIT(13)
#define BIT_FS_TSF_BIT32_TOGGLE_INT			BIT(12)
#define BIT_FS_P2P_RFON2_INT				BIT(11)
#define BIT_FS_P2P_RFOFF2_INT				BIT(10)
#define BIT_FS_P2P_RFON1_INT				BIT(9)
#define BIT_FS_P2P_RFOFF1_INT				BIT(8)
#define BIT_FS_P2P_RFON0_INT				BIT(7)
#define BIT_FS_P2P_RFOFF0_INT				BIT(6)
#define BIT_FS_RX_UAPSDMD1_INT				BIT(5)
#define BIT_FS_RX_UAPSDMD0_INT				BIT(4)
#define BIT_FS_TRIGGER_PKT_INT				BIT(3)
#define BIT_FS_EOSP_INT				BIT(2)
#define BIT_FS_RPWM2_INT				BIT(1)
#define BIT_FS_RPWM_INT				BIT(0)

/* 2 REG_SPWR0				(Offset 0x1140) */

#define BIT_SHIFT_MID_31TO0				0
#define BIT_MASK_MID_31TO0				0xffffffffL
#define BIT_MID_31TO0(x)				(((x) & BIT_MASK_MID_31TO0) << BIT_SHIFT_MID_31TO0)
#define BITS_MID_31TO0					(BIT_MASK_MID_31TO0 << BIT_SHIFT_MID_31TO0)
#define BIT_CLEAR_MID_31TO0(x)				((x) & (~BITS_MID_31TO0))
#define BIT_GET_MID_31TO0(x)				(((x) >> BIT_SHIFT_MID_31TO0) & BIT_MASK_MID_31TO0)
#define BIT_SET_MID_31TO0(x, v)			(BIT_CLEAR_MID_31TO0(x) | BIT_MID_31TO0(v))

/* 2 REG_SPWR1				(Offset 0x1144) */

#define BIT_SHIFT_MID_63TO32				0
#define BIT_MASK_MID_63TO32				0xffffffffL
#define BIT_MID_63TO32(x)				(((x) & BIT_MASK_MID_63TO32) << BIT_SHIFT_MID_63TO32)
#define BITS_MID_63TO32				(BIT_MASK_MID_63TO32 << BIT_SHIFT_MID_63TO32)
#define BIT_CLEAR_MID_63TO32(x)			((x) & (~BITS_MID_63TO32))
#define BIT_GET_MID_63TO32(x)				(((x) >> BIT_SHIFT_MID_63TO32) & BIT_MASK_MID_63TO32)
#define BIT_SET_MID_63TO32(x, v)			(BIT_CLEAR_MID_63TO32(x) | BIT_MID_63TO32(v))

/* 2 REG_SPWR2				(Offset 0x1148) */

#define BIT_SHIFT_MID_95O64				0
#define BIT_MASK_MID_95O64				0xffffffffL
#define BIT_MID_95O64(x)				(((x) & BIT_MASK_MID_95O64) << BIT_SHIFT_MID_95O64)
#define BITS_MID_95O64					(BIT_MASK_MID_95O64 << BIT_SHIFT_MID_95O64)
#define BIT_CLEAR_MID_95O64(x)				((x) & (~BITS_MID_95O64))
#define BIT_GET_MID_95O64(x)				(((x) >> BIT_SHIFT_MID_95O64) & BIT_MASK_MID_95O64)
#define BIT_SET_MID_95O64(x, v)			(BIT_CLEAR_MID_95O64(x) | BIT_MID_95O64(v))

/* 2 REG_SPWR3				(Offset 0x114C) */

#define BIT_SHIFT_MID_127TO96				0
#define BIT_MASK_MID_127TO96				0xffffffffL
#define BIT_MID_127TO96(x)				(((x) & BIT_MASK_MID_127TO96) << BIT_SHIFT_MID_127TO96)
#define BITS_MID_127TO96				(BIT_MASK_MID_127TO96 << BIT_SHIFT_MID_127TO96)
#define BIT_CLEAR_MID_127TO96(x)			((x) & (~BITS_MID_127TO96))
#define BIT_GET_MID_127TO96(x)				(((x) >> BIT_SHIFT_MID_127TO96) & BIT_MASK_MID_127TO96)
#define BIT_SET_MID_127TO96(x, v)			(BIT_CLEAR_MID_127TO96(x) | BIT_MID_127TO96(v))

/* 2 REG_POWSEQ				(Offset 0x1150) */

#define BIT_SHIFT_SEQNUM_MID				16
#define BIT_MASK_SEQNUM_MID				0xffff
#define BIT_SEQNUM_MID(x)				(((x) & BIT_MASK_SEQNUM_MID) << BIT_SHIFT_SEQNUM_MID)
#define BITS_SEQNUM_MID				(BIT_MASK_SEQNUM_MID << BIT_SHIFT_SEQNUM_MID)
#define BIT_CLEAR_SEQNUM_MID(x)			((x) & (~BITS_SEQNUM_MID))
#define BIT_GET_SEQNUM_MID(x)				(((x) >> BIT_SHIFT_SEQNUM_MID) & BIT_MASK_SEQNUM_MID)
#define BIT_SET_SEQNUM_MID(x, v)			(BIT_CLEAR_SEQNUM_MID(x) | BIT_SEQNUM_MID(v))

#define BIT_SHIFT_REF_MID				0
#define BIT_MASK_REF_MID				0x7f
#define BIT_REF_MID(x)					(((x) & BIT_MASK_REF_MID) << BIT_SHIFT_REF_MID)
#define BITS_REF_MID					(BIT_MASK_REF_MID << BIT_SHIFT_REF_MID)
#define BIT_CLEAR_REF_MID(x)				((x) & (~BITS_REF_MID))
#define BIT_GET_REF_MID(x)				(((x) >> BIT_SHIFT_REF_MID) & BIT_MASK_REF_MID)
#define BIT_SET_REF_MID(x, v)				(BIT_CLEAR_REF_MID(x) | BIT_REF_MID(v))

/* 2 REG_RX_BCN_TBTT_ITVL0			(Offset 0x1160) */

#define BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT2		24
#define BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT2		0xff
#define BIT_RX_BCN_TBTT_ITVL_CLIENT2(x)		(((x) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT2) << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT2)
#define BITS_RX_BCN_TBTT_ITVL_CLIENT2			(BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT2 << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT2)
#define BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT2(x)		((x) & (~BITS_RX_BCN_TBTT_ITVL_CLIENT2))
#define BIT_GET_RX_BCN_TBTT_ITVL_CLIENT2(x)		(((x) >> BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT2) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT2)
#define BIT_SET_RX_BCN_TBTT_ITVL_CLIENT2(x, v)	(BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT2(x) | BIT_RX_BCN_TBTT_ITVL_CLIENT2(v))

#define BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT1		16
#define BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT1		0xff
#define BIT_RX_BCN_TBTT_ITVL_CLIENT1(x)		(((x) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT1) << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT1)
#define BITS_RX_BCN_TBTT_ITVL_CLIENT1			(BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT1 << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT1)
#define BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT1(x)		((x) & (~BITS_RX_BCN_TBTT_ITVL_CLIENT1))
#define BIT_GET_RX_BCN_TBTT_ITVL_CLIENT1(x)		(((x) >> BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT1) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT1)
#define BIT_SET_RX_BCN_TBTT_ITVL_CLIENT1(x, v)	(BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT1(x) | BIT_RX_BCN_TBTT_ITVL_CLIENT1(v))

#define BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT0		8
#define BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT0		0xff
#define BIT_RX_BCN_TBTT_ITVL_CLIENT0(x)		(((x) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT0) << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT0)
#define BITS_RX_BCN_TBTT_ITVL_CLIENT0			(BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT0 << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT0)
#define BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT0(x)		((x) & (~BITS_RX_BCN_TBTT_ITVL_CLIENT0))
#define BIT_GET_RX_BCN_TBTT_ITVL_CLIENT0(x)		(((x) >> BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT0) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT0)
#define BIT_SET_RX_BCN_TBTT_ITVL_CLIENT0(x, v)	(BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT0(x) | BIT_RX_BCN_TBTT_ITVL_CLIENT0(v))

#define BIT_SHIFT_RX_BCN_TBTT_ITVL_PORT0		0
#define BIT_MASK_RX_BCN_TBTT_ITVL_PORT0		0xff
#define BIT_RX_BCN_TBTT_ITVL_PORT0(x)			(((x) & BIT_MASK_RX_BCN_TBTT_ITVL_PORT0) << BIT_SHIFT_RX_BCN_TBTT_ITVL_PORT0)
#define BITS_RX_BCN_TBTT_ITVL_PORT0			(BIT_MASK_RX_BCN_TBTT_ITVL_PORT0 << BIT_SHIFT_RX_BCN_TBTT_ITVL_PORT0)
#define BIT_CLEAR_RX_BCN_TBTT_ITVL_PORT0(x)		((x) & (~BITS_RX_BCN_TBTT_ITVL_PORT0))
#define BIT_GET_RX_BCN_TBTT_ITVL_PORT0(x)		(((x) >> BIT_SHIFT_RX_BCN_TBTT_ITVL_PORT0) & BIT_MASK_RX_BCN_TBTT_ITVL_PORT0)
#define BIT_SET_RX_BCN_TBTT_ITVL_PORT0(x, v)		(BIT_CLEAR_RX_BCN_TBTT_ITVL_PORT0(x) | BIT_RX_BCN_TBTT_ITVL_PORT0(v))

/* 2 REG_RX_BCN_TBTT_ITVL1			(Offset 0x1164) */

#define BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT3		0
#define BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT3		0xff
#define BIT_RX_BCN_TBTT_ITVL_CLIENT3(x)		(((x) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT3) << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT3)
#define BITS_RX_BCN_TBTT_ITVL_CLIENT3			(BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT3 << BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT3)
#define BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT3(x)		((x) & (~BITS_RX_BCN_TBTT_ITVL_CLIENT3))
#define BIT_GET_RX_BCN_TBTT_ITVL_CLIENT3(x)		(((x) >> BIT_SHIFT_RX_BCN_TBTT_ITVL_CLIENT3) & BIT_MASK_RX_BCN_TBTT_ITVL_CLIENT3)
#define BIT_SET_RX_BCN_TBTT_ITVL_CLIENT3(x, v)	(BIT_CLEAR_RX_BCN_TBTT_ITVL_CLIENT3(x) | BIT_RX_BCN_TBTT_ITVL_CLIENT3(v))

/* 2 REG_IO_WRAP_ERR_FLAG			(Offset 0x1170) */

#define BIT_IO_WRAP_ERR				BIT(0)

/* 2 REG_SPEED_SENSOR			(Offset 0x1180) */

#define BIT_DSS_1_RST_N				BIT(31)
#define BIT_DSS_1_SPEED_EN				BIT(30)
#define BIT_DSS_1_WIRE_SEL				BIT(29)
#define BIT_DSS_ENCLK					BIT(28)

#define BIT_SHIFT_DSS_1_RO_SEL				24
#define BIT_MASK_DSS_1_RO_SEL				0x7
#define BIT_DSS_1_RO_SEL(x)				(((x) & BIT_MASK_DSS_1_RO_SEL) << BIT_SHIFT_DSS_1_RO_SEL)
#define BITS_DSS_1_RO_SEL				(BIT_MASK_DSS_1_RO_SEL << BIT_SHIFT_DSS_1_RO_SEL)
#define BIT_CLEAR_DSS_1_RO_SEL(x)			((x) & (~BITS_DSS_1_RO_SEL))
#define BIT_GET_DSS_1_RO_SEL(x)			(((x) >> BIT_SHIFT_DSS_1_RO_SEL) & BIT_MASK_DSS_1_RO_SEL)
#define BIT_SET_DSS_1_RO_SEL(x, v)			(BIT_CLEAR_DSS_1_RO_SEL(x) | BIT_DSS_1_RO_SEL(v))

#define BIT_SHIFT_DSS_1_DATA_IN			0
#define BIT_MASK_DSS_1_DATA_IN				0xfffff
#define BIT_DSS_1_DATA_IN(x)				(((x) & BIT_MASK_DSS_1_DATA_IN) << BIT_SHIFT_DSS_1_DATA_IN)
#define BITS_DSS_1_DATA_IN				(BIT_MASK_DSS_1_DATA_IN << BIT_SHIFT_DSS_1_DATA_IN)
#define BIT_CLEAR_DSS_1_DATA_IN(x)			((x) & (~BITS_DSS_1_DATA_IN))
#define BIT_GET_DSS_1_DATA_IN(x)			(((x) >> BIT_SHIFT_DSS_1_DATA_IN) & BIT_MASK_DSS_1_DATA_IN)
#define BIT_SET_DSS_1_DATA_IN(x, v)			(BIT_CLEAR_DSS_1_DATA_IN(x) | BIT_DSS_1_DATA_IN(v))

/* 2 REG_SPEED_SENSOR1			(Offset 0x1184) */

#define BIT_DSS_1_READY				BIT(31)
#define BIT_DSS_1_WSORT_GO				BIT(30)

#define BIT_SHIFT_DSS_1_COUNT_OUT			0
#define BIT_MASK_DSS_1_COUNT_OUT			0xfffff
#define BIT_DSS_1_COUNT_OUT(x)				(((x) & BIT_MASK_DSS_1_COUNT_OUT) << BIT_SHIFT_DSS_1_COUNT_OUT)
#define BITS_DSS_1_COUNT_OUT				(BIT_MASK_DSS_1_COUNT_OUT << BIT_SHIFT_DSS_1_COUNT_OUT)
#define BIT_CLEAR_DSS_1_COUNT_OUT(x)			((x) & (~BITS_DSS_1_COUNT_OUT))
#define BIT_GET_DSS_1_COUNT_OUT(x)			(((x) >> BIT_SHIFT_DSS_1_COUNT_OUT) & BIT_MASK_DSS_1_COUNT_OUT)
#define BIT_SET_DSS_1_COUNT_OUT(x, v)			(BIT_CLEAR_DSS_1_COUNT_OUT(x) | BIT_DSS_1_COUNT_OUT(v))

/* 2 REG_SPEED_SENSOR2			(Offset 0x1188) */

#define BIT_DSS_2_RST_N				BIT(31)
#define BIT_DSS_2_SPEED_EN				BIT(30)
#define BIT_DSS_2_WIRE_SEL				BIT(29)

#define BIT_SHIFT_DSS_2_RO_SEL				24
#define BIT_MASK_DSS_2_RO_SEL				0x7
#define BIT_DSS_2_RO_SEL(x)				(((x) & BIT_MASK_DSS_2_RO_SEL) << BIT_SHIFT_DSS_2_RO_SEL)
#define BITS_DSS_2_RO_SEL				(BIT_MASK_DSS_2_RO_SEL << BIT_SHIFT_DSS_2_RO_SEL)
#define BIT_CLEAR_DSS_2_RO_SEL(x)			((x) & (~BITS_DSS_2_RO_SEL))
#define BIT_GET_DSS_2_RO_SEL(x)			(((x) >> BIT_SHIFT_DSS_2_RO_SEL) & BIT_MASK_DSS_2_RO_SEL)
#define BIT_SET_DSS_2_RO_SEL(x, v)			(BIT_CLEAR_DSS_2_RO_SEL(x) | BIT_DSS_2_RO_SEL(v))

#define BIT_SHIFT_DSS_2_DATA_IN			0
#define BIT_MASK_DSS_2_DATA_IN				0xfffff
#define BIT_DSS_2_DATA_IN(x)				(((x) & BIT_MASK_DSS_2_DATA_IN) << BIT_SHIFT_DSS_2_DATA_IN)
#define BITS_DSS_2_DATA_IN				(BIT_MASK_DSS_2_DATA_IN << BIT_SHIFT_DSS_2_DATA_IN)
#define BIT_CLEAR_DSS_2_DATA_IN(x)			((x) & (~BITS_DSS_2_DATA_IN))
#define BIT_GET_DSS_2_DATA_IN(x)			(((x) >> BIT_SHIFT_DSS_2_DATA_IN) & BIT_MASK_DSS_2_DATA_IN)
#define BIT_SET_DSS_2_DATA_IN(x, v)			(BIT_CLEAR_DSS_2_DATA_IN(x) | BIT_DSS_2_DATA_IN(v))

/* 2 REG_SPEED_SENSOR3			(Offset 0x118C) */

#define BIT_DSS_2_READY				BIT(31)
#define BIT_DSS_2_WSORT_GO				BIT(30)

#define BIT_SHIFT_DSS_2_COUNT_OUT			0
#define BIT_MASK_DSS_2_COUNT_OUT			0xfffff
#define BIT_DSS_2_COUNT_OUT(x)				(((x) & BIT_MASK_DSS_2_COUNT_OUT) << BIT_SHIFT_DSS_2_COUNT_OUT)
#define BITS_DSS_2_COUNT_OUT				(BIT_MASK_DSS_2_COUNT_OUT << BIT_SHIFT_DSS_2_COUNT_OUT)
#define BIT_CLEAR_DSS_2_COUNT_OUT(x)			((x) & (~BITS_DSS_2_COUNT_OUT))
#define BIT_GET_DSS_2_COUNT_OUT(x)			(((x) >> BIT_SHIFT_DSS_2_COUNT_OUT) & BIT_MASK_DSS_2_COUNT_OUT)
#define BIT_SET_DSS_2_COUNT_OUT(x, v)			(BIT_CLEAR_DSS_2_COUNT_OUT(x) | BIT_DSS_2_COUNT_OUT(v))

/* 2 REG_SPEED_SENSOR4			(Offset 0x1190) */

#define BIT_DSS_3_RST_N				BIT(31)
#define BIT_DSS_3_SPEED_EN				BIT(30)
#define BIT_DSS_3_WIRE_SEL				BIT(29)

#define BIT_SHIFT_DSS_3_RO_SEL				24
#define BIT_MASK_DSS_3_RO_SEL				0x7
#define BIT_DSS_3_RO_SEL(x)				(((x) & BIT_MASK_DSS_3_RO_SEL) << BIT_SHIFT_DSS_3_RO_SEL)
#define BITS_DSS_3_RO_SEL				(BIT_MASK_DSS_3_RO_SEL << BIT_SHIFT_DSS_3_RO_SEL)
#define BIT_CLEAR_DSS_3_RO_SEL(x)			((x) & (~BITS_DSS_3_RO_SEL))
#define BIT_GET_DSS_3_RO_SEL(x)			(((x) >> BIT_SHIFT_DSS_3_RO_SEL) & BIT_MASK_DSS_3_RO_SEL)
#define BIT_SET_DSS_3_RO_SEL(x, v)			(BIT_CLEAR_DSS_3_RO_SEL(x) | BIT_DSS_3_RO_SEL(v))

#define BIT_SHIFT_DSS_3_DATA_IN			0
#define BIT_MASK_DSS_3_DATA_IN				0xfffff
#define BIT_DSS_3_DATA_IN(x)				(((x) & BIT_MASK_DSS_3_DATA_IN) << BIT_SHIFT_DSS_3_DATA_IN)
#define BITS_DSS_3_DATA_IN				(BIT_MASK_DSS_3_DATA_IN << BIT_SHIFT_DSS_3_DATA_IN)
#define BIT_CLEAR_DSS_3_DATA_IN(x)			((x) & (~BITS_DSS_3_DATA_IN))
#define BIT_GET_DSS_3_DATA_IN(x)			(((x) >> BIT_SHIFT_DSS_3_DATA_IN) & BIT_MASK_DSS_3_DATA_IN)
#define BIT_SET_DSS_3_DATA_IN(x, v)			(BIT_CLEAR_DSS_3_DATA_IN(x) | BIT_DSS_3_DATA_IN(v))

/* 2 REG_SPEED_SENSOR5			(Offset 0x1194) */

#define BIT_DSS_3_READY				BIT(31)
#define BIT_DSS_3_WSORT_GO				BIT(30)

#define BIT_SHIFT_DSS_3_COUNT_OUT			0
#define BIT_MASK_DSS_3_COUNT_OUT			0xfffff
#define BIT_DSS_3_COUNT_OUT(x)				(((x) & BIT_MASK_DSS_3_COUNT_OUT) << BIT_SHIFT_DSS_3_COUNT_OUT)
#define BITS_DSS_3_COUNT_OUT				(BIT_MASK_DSS_3_COUNT_OUT << BIT_SHIFT_DSS_3_COUNT_OUT)
#define BIT_CLEAR_DSS_3_COUNT_OUT(x)			((x) & (~BITS_DSS_3_COUNT_OUT))
#define BIT_GET_DSS_3_COUNT_OUT(x)			(((x) >> BIT_SHIFT_DSS_3_COUNT_OUT) & BIT_MASK_DSS_3_COUNT_OUT)
#define BIT_SET_DSS_3_COUNT_OUT(x, v)			(BIT_CLEAR_DSS_3_COUNT_OUT(x) | BIT_DSS_3_COUNT_OUT(v))

/* 2 REG_EXT_QUEUE_REG			(Offset 0x11C0) */

#define BIT_SHIFT_PCIE_PRIORITY_SEL			0
#define BIT_MASK_PCIE_PRIORITY_SEL			0x3
#define BIT_PCIE_PRIORITY_SEL(x)			(((x) & BIT_MASK_PCIE_PRIORITY_SEL) << BIT_SHIFT_PCIE_PRIORITY_SEL)
#define BITS_PCIE_PRIORITY_SEL				(BIT_MASK_PCIE_PRIORITY_SEL << BIT_SHIFT_PCIE_PRIORITY_SEL)
#define BIT_CLEAR_PCIE_PRIORITY_SEL(x)			((x) & (~BITS_PCIE_PRIORITY_SEL))
#define BIT_GET_PCIE_PRIORITY_SEL(x)			(((x) >> BIT_SHIFT_PCIE_PRIORITY_SEL) & BIT_MASK_PCIE_PRIORITY_SEL)
#define BIT_SET_PCIE_PRIORITY_SEL(x, v)		(BIT_CLEAR_PCIE_PRIORITY_SEL(x) | BIT_PCIE_PRIORITY_SEL(v))

/* 2 REG_COUNTER_CTRL			(Offset 0x11C4) */

#define BIT_SHIFT_COUNTER_BASE				16
#define BIT_MASK_COUNTER_BASE				0x1fff
#define BIT_COUNTER_BASE(x)				(((x) & BIT_MASK_COUNTER_BASE) << BIT_SHIFT_COUNTER_BASE)
#define BITS_COUNTER_BASE				(BIT_MASK_COUNTER_BASE << BIT_SHIFT_COUNTER_BASE)
#define BIT_CLEAR_COUNTER_BASE(x)			((x) & (~BITS_COUNTER_BASE))
#define BIT_GET_COUNTER_BASE(x)			(((x) >> BIT_SHIFT_COUNTER_BASE) & BIT_MASK_COUNTER_BASE)
#define BIT_SET_COUNTER_BASE(x, v)			(BIT_CLEAR_COUNTER_BASE(x) | BIT_COUNTER_BASE(v))

#define BIT_EN_RTS_REQ					BIT(9)
#define BIT_EN_EDCA_REQ				BIT(8)
#define BIT_EN_PTCL_REQ				BIT(7)
#define BIT_EN_SCH_REQ					BIT(6)
#define BIT_USB_COUNT_EN				BIT(5)
#define BIT_PCIE_COUNT_EN				BIT(4)
#define BIT_RQPN_COUNT_EN				BIT(3)
#define BIT_RDE_COUNT_EN				BIT(2)
#define BIT_TDE_COUNT_EN				BIT(1)
#define BIT_DISABLE_COUNTER				BIT(0)

/* 2 REG_COUNTER_THRESHOLD			(Offset 0x11C8) */

#define BIT_SEL_ALL_MACID				BIT(31)

#define BIT_SHIFT_COUNTER_MACID			24
#define BIT_MASK_COUNTER_MACID				0x7f
#define BIT_COUNTER_MACID(x)				(((x) & BIT_MASK_COUNTER_MACID) << BIT_SHIFT_COUNTER_MACID)
#define BITS_COUNTER_MACID				(BIT_MASK_COUNTER_MACID << BIT_SHIFT_COUNTER_MACID)
#define BIT_CLEAR_COUNTER_MACID(x)			((x) & (~BITS_COUNTER_MACID))
#define BIT_GET_COUNTER_MACID(x)			(((x) >> BIT_SHIFT_COUNTER_MACID) & BIT_MASK_COUNTER_MACID)
#define BIT_SET_COUNTER_MACID(x, v)			(BIT_CLEAR_COUNTER_MACID(x) | BIT_COUNTER_MACID(v))

#define BIT_SHIFT_AGG_VALUE2				16
#define BIT_MASK_AGG_VALUE2				0x7f
#define BIT_AGG_VALUE2(x)				(((x) & BIT_MASK_AGG_VALUE2) << BIT_SHIFT_AGG_VALUE2)
#define BITS_AGG_VALUE2				(BIT_MASK_AGG_VALUE2 << BIT_SHIFT_AGG_VALUE2)
#define BIT_CLEAR_AGG_VALUE2(x)			((x) & (~BITS_AGG_VALUE2))
#define BIT_GET_AGG_VALUE2(x)				(((x) >> BIT_SHIFT_AGG_VALUE2) & BIT_MASK_AGG_VALUE2)
#define BIT_SET_AGG_VALUE2(x, v)			(BIT_CLEAR_AGG_VALUE2(x) | BIT_AGG_VALUE2(v))

#define BIT_SHIFT_AGG_VALUE1				8
#define BIT_MASK_AGG_VALUE1				0x7f
#define BIT_AGG_VALUE1(x)				(((x) & BIT_MASK_AGG_VALUE1) << BIT_SHIFT_AGG_VALUE1)
#define BITS_AGG_VALUE1				(BIT_MASK_AGG_VALUE1 << BIT_SHIFT_AGG_VALUE1)
#define BIT_CLEAR_AGG_VALUE1(x)			((x) & (~BITS_AGG_VALUE1))
#define BIT_GET_AGG_VALUE1(x)				(((x) >> BIT_SHIFT_AGG_VALUE1) & BIT_MASK_AGG_VALUE1)
#define BIT_SET_AGG_VALUE1(x, v)			(BIT_CLEAR_AGG_VALUE1(x) | BIT_AGG_VALUE1(v))

#define BIT_SHIFT_AGG_VALUE0				0
#define BIT_MASK_AGG_VALUE0				0x7f
#define BIT_AGG_VALUE0(x)				(((x) & BIT_MASK_AGG_VALUE0) << BIT_SHIFT_AGG_VALUE0)
#define BITS_AGG_VALUE0				(BIT_MASK_AGG_VALUE0 << BIT_SHIFT_AGG_VALUE0)
#define BIT_CLEAR_AGG_VALUE0(x)			((x) & (~BITS_AGG_VALUE0))
#define BIT_GET_AGG_VALUE0(x)				(((x) >> BIT_SHIFT_AGG_VALUE0) & BIT_MASK_AGG_VALUE0)
#define BIT_SET_AGG_VALUE0(x, v)			(BIT_CLEAR_AGG_VALUE0(x) | BIT_AGG_VALUE0(v))

/* 2 REG_COUNTER_SET				(Offset 0x11CC) */

#define BIT_SHIFT_REQUEST_RESET			16
#define BIT_MASK_REQUEST_RESET				0xffff
#define BIT_REQUEST_RESET(x)				(((x) & BIT_MASK_REQUEST_RESET) << BIT_SHIFT_REQUEST_RESET)
#define BITS_REQUEST_RESET				(BIT_MASK_REQUEST_RESET << BIT_SHIFT_REQUEST_RESET)
#define BIT_CLEAR_REQUEST_RESET(x)			((x) & (~BITS_REQUEST_RESET))
#define BIT_GET_REQUEST_RESET(x)			(((x) >> BIT_SHIFT_REQUEST_RESET) & BIT_MASK_REQUEST_RESET)
#define BIT_SET_REQUEST_RESET(x, v)			(BIT_CLEAR_REQUEST_RESET(x) | BIT_REQUEST_RESET(v))

#define BIT_SHIFT_REQUEST_START			0
#define BIT_MASK_REQUEST_START				0xffff
#define BIT_REQUEST_START(x)				(((x) & BIT_MASK_REQUEST_START) << BIT_SHIFT_REQUEST_START)
#define BITS_REQUEST_START				(BIT_MASK_REQUEST_START << BIT_SHIFT_REQUEST_START)
#define BIT_CLEAR_REQUEST_START(x)			((x) & (~BITS_REQUEST_START))
#define BIT_GET_REQUEST_START(x)			(((x) >> BIT_SHIFT_REQUEST_START) & BIT_MASK_REQUEST_START)
#define BIT_SET_REQUEST_START(x, v)			(BIT_CLEAR_REQUEST_START(x) | BIT_REQUEST_START(v))

/* 2 REG_COUNTER_OVERFLOW			(Offset 0x11D0) */

#define BIT_SHIFT_CNT_OVF_REG				0
#define BIT_MASK_CNT_OVF_REG				0xffff
#define BIT_CNT_OVF_REG(x)				(((x) & BIT_MASK_CNT_OVF_REG) << BIT_SHIFT_CNT_OVF_REG)
#define BITS_CNT_OVF_REG				(BIT_MASK_CNT_OVF_REG << BIT_SHIFT_CNT_OVF_REG)
#define BIT_CLEAR_CNT_OVF_REG(x)			((x) & (~BITS_CNT_OVF_REG))
#define BIT_GET_CNT_OVF_REG(x)				(((x) >> BIT_SHIFT_CNT_OVF_REG) & BIT_MASK_CNT_OVF_REG)
#define BIT_SET_CNT_OVF_REG(x, v)			(BIT_CLEAR_CNT_OVF_REG(x) | BIT_CNT_OVF_REG(v))

/* 2 REG_TXDMA_LEN_THRESHOLD			(Offset 0x11D4) */

#define BIT_SHIFT_TDE_LEN_TH1				16
#define BIT_MASK_TDE_LEN_TH1				0xffff
#define BIT_TDE_LEN_TH1(x)				(((x) & BIT_MASK_TDE_LEN_TH1) << BIT_SHIFT_TDE_LEN_TH1)
#define BITS_TDE_LEN_TH1				(BIT_MASK_TDE_LEN_TH1 << BIT_SHIFT_TDE_LEN_TH1)
#define BIT_CLEAR_TDE_LEN_TH1(x)			((x) & (~BITS_TDE_LEN_TH1))
#define BIT_GET_TDE_LEN_TH1(x)				(((x) >> BIT_SHIFT_TDE_LEN_TH1) & BIT_MASK_TDE_LEN_TH1)
#define BIT_SET_TDE_LEN_TH1(x, v)			(BIT_CLEAR_TDE_LEN_TH1(x) | BIT_TDE_LEN_TH1(v))

#define BIT_SHIFT_TDE_LEN_TH0				0
#define BIT_MASK_TDE_LEN_TH0				0xffff
#define BIT_TDE_LEN_TH0(x)				(((x) & BIT_MASK_TDE_LEN_TH0) << BIT_SHIFT_TDE_LEN_TH0)
#define BITS_TDE_LEN_TH0				(BIT_MASK_TDE_LEN_TH0 << BIT_SHIFT_TDE_LEN_TH0)
#define BIT_CLEAR_TDE_LEN_TH0(x)			((x) & (~BITS_TDE_LEN_TH0))
#define BIT_GET_TDE_LEN_TH0(x)				(((x) >> BIT_SHIFT_TDE_LEN_TH0) & BIT_MASK_TDE_LEN_TH0)
#define BIT_SET_TDE_LEN_TH0(x, v)			(BIT_CLEAR_TDE_LEN_TH0(x) | BIT_TDE_LEN_TH0(v))

/* 2 REG_RXDMA_LEN_THRESHOLD			(Offset 0x11D8) */

#define BIT_SHIFT_RDE_LEN_TH1				16
#define BIT_MASK_RDE_LEN_TH1				0xffff
#define BIT_RDE_LEN_TH1(x)				(((x) & BIT_MASK_RDE_LEN_TH1) << BIT_SHIFT_RDE_LEN_TH1)
#define BITS_RDE_LEN_TH1				(BIT_MASK_RDE_LEN_TH1 << BIT_SHIFT_RDE_LEN_TH1)
#define BIT_CLEAR_RDE_LEN_TH1(x)			((x) & (~BITS_RDE_LEN_TH1))
#define BIT_GET_RDE_LEN_TH1(x)				(((x) >> BIT_SHIFT_RDE_LEN_TH1) & BIT_MASK_RDE_LEN_TH1)
#define BIT_SET_RDE_LEN_TH1(x, v)			(BIT_CLEAR_RDE_LEN_TH1(x) | BIT_RDE_LEN_TH1(v))

#define BIT_SHIFT_RDE_LEN_TH0				0
#define BIT_MASK_RDE_LEN_TH0				0xffff
#define BIT_RDE_LEN_TH0(x)				(((x) & BIT_MASK_RDE_LEN_TH0) << BIT_SHIFT_RDE_LEN_TH0)
#define BITS_RDE_LEN_TH0				(BIT_MASK_RDE_LEN_TH0 << BIT_SHIFT_RDE_LEN_TH0)
#define BIT_CLEAR_RDE_LEN_TH0(x)			((x) & (~BITS_RDE_LEN_TH0))
#define BIT_GET_RDE_LEN_TH0(x)				(((x) >> BIT_SHIFT_RDE_LEN_TH0) & BIT_MASK_RDE_LEN_TH0)
#define BIT_SET_RDE_LEN_TH0(x, v)			(BIT_CLEAR_RDE_LEN_TH0(x) | BIT_RDE_LEN_TH0(v))

/* 2 REG_PCIE_EXEC_TIME_THRESHOLD		(Offset 0x11DC) */

#define BIT_SHIFT_COUNT_INT_SEL			16
#define BIT_MASK_COUNT_INT_SEL				0x3
#define BIT_COUNT_INT_SEL(x)				(((x) & BIT_MASK_COUNT_INT_SEL) << BIT_SHIFT_COUNT_INT_SEL)
#define BITS_COUNT_INT_SEL				(BIT_MASK_COUNT_INT_SEL << BIT_SHIFT_COUNT_INT_SEL)
#define BIT_CLEAR_COUNT_INT_SEL(x)			((x) & (~BITS_COUNT_INT_SEL))
#define BIT_GET_COUNT_INT_SEL(x)			(((x) >> BIT_SHIFT_COUNT_INT_SEL) & BIT_MASK_COUNT_INT_SEL)
#define BIT_SET_COUNT_INT_SEL(x, v)			(BIT_CLEAR_COUNT_INT_SEL(x) | BIT_COUNT_INT_SEL(v))

#define BIT_SHIFT_EXEC_TIME_TH				0
#define BIT_MASK_EXEC_TIME_TH				0xffff
#define BIT_EXEC_TIME_TH(x)				(((x) & BIT_MASK_EXEC_TIME_TH) << BIT_SHIFT_EXEC_TIME_TH)
#define BITS_EXEC_TIME_TH				(BIT_MASK_EXEC_TIME_TH << BIT_SHIFT_EXEC_TIME_TH)
#define BIT_CLEAR_EXEC_TIME_TH(x)			((x) & (~BITS_EXEC_TIME_TH))
#define BIT_GET_EXEC_TIME_TH(x)			(((x) >> BIT_SHIFT_EXEC_TIME_TH) & BIT_MASK_EXEC_TIME_TH)
#define BIT_SET_EXEC_TIME_TH(x, v)			(BIT_CLEAR_EXEC_TIME_TH(x) | BIT_EXEC_TIME_TH(v))

/* 2 REG_FT2IMR				(Offset 0x11E0) */

#define BIT_FS_CLI3_RX_UAPSDMD1_EN			BIT(31)
#define BIT_FS_CLI3_RX_UAPSDMD0_EN			BIT(30)
#define BIT_FS_CLI3_TRIGGER_PKT_EN			BIT(29)
#define BIT_FS_CLI3_EOSP_INT_EN			BIT(28)
#define BIT_FS_CLI2_RX_UAPSDMD1_EN			BIT(27)
#define BIT_FS_CLI2_RX_UAPSDMD0_EN			BIT(26)
#define BIT_FS_CLI2_TRIGGER_PKT_EN			BIT(25)
#define BIT_FS_CLI2_EOSP_INT_EN			BIT(24)
#define BIT_FS_CLI1_RX_UAPSDMD1_EN			BIT(23)
#define BIT_FS_CLI1_RX_UAPSDMD0_EN			BIT(22)
#define BIT_FS_CLI1_TRIGGER_PKT_EN			BIT(21)
#define BIT_FS_CLI1_EOSP_INT_EN			BIT(20)
#define BIT_FS_CLI0_RX_UAPSDMD1_EN			BIT(19)
#define BIT_FS_CLI0_RX_UAPSDMD0_EN			BIT(18)
#define BIT_FS_CLI0_TRIGGER_PKT_EN			BIT(17)
#define BIT_FS_CLI0_EOSP_INT_EN			BIT(16)
#define BIT_FS_TSF_BIT32_TOGGLE_P2P2_EN		BIT(9)
#define BIT_FS_TSF_BIT32_TOGGLE_P2P1_EN		BIT(8)
#define BIT_FS_CLI3_TX_NULL1_INT_EN			BIT(7)
#define BIT_FS_CLI3_TX_NULL0_INT_EN			BIT(6)
#define BIT_FS_CLI2_TX_NULL1_INT_EN			BIT(5)
#define BIT_FS_CLI2_TX_NULL0_INT_EN			BIT(4)
#define BIT_FS_CLI1_TX_NULL1_INT_EN			BIT(3)
#define BIT_FS_CLI1_TX_NULL0_INT_EN			BIT(2)
#define BIT_FS_CLI0_TX_NULL1_INT_EN			BIT(1)
#define BIT_FS_CLI0_TX_NULL0_INT_EN			BIT(0)

/* 2 REG_FT2ISR				(Offset 0x11E4) */

#define BIT_FS_CLI3_RX_UAPSDMD1_INT			BIT(31)
#define BIT_FS_CLI3_RX_UAPSDMD0_INT			BIT(30)
#define BIT_FS_CLI3_TRIGGER_PKT_INT			BIT(29)
#define BIT_FS_CLI3_EOSP_INT				BIT(28)
#define BIT_FS_CLI2_RX_UAPSDMD1_INT			BIT(27)
#define BIT_FS_CLI2_RX_UAPSDMD0_INT			BIT(26)
#define BIT_FS_CLI2_TRIGGER_PKT_INT			BIT(25)
#define BIT_FS_CLI2_EOSP_INT				BIT(24)
#define BIT_FS_CLI1_RX_UAPSDMD1_INT			BIT(23)
#define BIT_FS_CLI1_RX_UAPSDMD0_INT			BIT(22)
#define BIT_FS_CLI1_TRIGGER_PKT_INT			BIT(21)
#define BIT_FS_CLI1_EOSP_INT				BIT(20)
#define BIT_FS_CLI0_RX_UAPSDMD1_INT			BIT(19)
#define BIT_FS_CLI0_RX_UAPSDMD0_INT			BIT(18)
#define BIT_FS_CLI0_TRIGGER_PKT_INT			BIT(17)
#define BIT_FS_CLI0_EOSP_INT				BIT(16)
#define BIT_FS_TSF_BIT32_TOGGLE_P2P2_INT		BIT(9)
#define BIT_FS_TSF_BIT32_TOGGLE_P2P1_INT		BIT(8)
#define BIT_FS_CLI3_TX_NULL1_INT			BIT(7)
#define BIT_FS_CLI3_TX_NULL0_INT			BIT(6)
#define BIT_FS_CLI2_TX_NULL1_INT			BIT(5)
#define BIT_FS_CLI2_TX_NULL0_INT			BIT(4)
#define BIT_FS_CLI1_TX_NULL1_INT			BIT(3)
#define BIT_FS_CLI1_TX_NULL0_INT			BIT(2)
#define BIT_FS_CLI0_TX_NULL1_INT			BIT(1)
#define BIT_FS_CLI0_TX_NULL0_INT			BIT(0)

/* 2 REG_MSG2				(Offset 0x11F0) */

#define BIT_SHIFT_FW_MSG2				0
#define BIT_MASK_FW_MSG2				0xffffffffL
#define BIT_FW_MSG2(x)					(((x) & BIT_MASK_FW_MSG2) << BIT_SHIFT_FW_MSG2)
#define BITS_FW_MSG2					(BIT_MASK_FW_MSG2 << BIT_SHIFT_FW_MSG2)
#define BIT_CLEAR_FW_MSG2(x)				((x) & (~BITS_FW_MSG2))
#define BIT_GET_FW_MSG2(x)				(((x) >> BIT_SHIFT_FW_MSG2) & BIT_MASK_FW_MSG2)
#define BIT_SET_FW_MSG2(x, v)				(BIT_CLEAR_FW_MSG2(x) | BIT_FW_MSG2(v))

/* 2 REG_MSG3				(Offset 0x11F4) */

#define BIT_SHIFT_FW_MSG3				0
#define BIT_MASK_FW_MSG3				0xffffffffL
#define BIT_FW_MSG3(x)					(((x) & BIT_MASK_FW_MSG3) << BIT_SHIFT_FW_MSG3)
#define BITS_FW_MSG3					(BIT_MASK_FW_MSG3 << BIT_SHIFT_FW_MSG3)
#define BIT_CLEAR_FW_MSG3(x)				((x) & (~BITS_FW_MSG3))
#define BIT_GET_FW_MSG3(x)				(((x) >> BIT_SHIFT_FW_MSG3) & BIT_MASK_FW_MSG3)
#define BIT_SET_FW_MSG3(x, v)				(BIT_CLEAR_FW_MSG3(x) | BIT_FW_MSG3(v))

/* 2 REG_MSG4				(Offset 0x11F8) */

#define BIT_SHIFT_FW_MSG4				0
#define BIT_MASK_FW_MSG4				0xffffffffL
#define BIT_FW_MSG4(x)					(((x) & BIT_MASK_FW_MSG4) << BIT_SHIFT_FW_MSG4)
#define BITS_FW_MSG4					(BIT_MASK_FW_MSG4 << BIT_SHIFT_FW_MSG4)
#define BIT_CLEAR_FW_MSG4(x)				((x) & (~BITS_FW_MSG4))
#define BIT_GET_FW_MSG4(x)				(((x) >> BIT_SHIFT_FW_MSG4) & BIT_MASK_FW_MSG4)
#define BIT_SET_FW_MSG4(x, v)				(BIT_CLEAR_FW_MSG4(x) | BIT_FW_MSG4(v))

/* 2 REG_MSG5				(Offset 0x11FC) */

#define BIT_SHIFT_FW_MSG5				0
#define BIT_MASK_FW_MSG5				0xffffffffL
#define BIT_FW_MSG5(x)					(((x) & BIT_MASK_FW_MSG5) << BIT_SHIFT_FW_MSG5)
#define BITS_FW_MSG5					(BIT_MASK_FW_MSG5 << BIT_SHIFT_FW_MSG5)
#define BIT_CLEAR_FW_MSG5(x)				((x) & (~BITS_FW_MSG5))
#define BIT_GET_FW_MSG5(x)				(((x) >> BIT_SHIFT_FW_MSG5) & BIT_MASK_FW_MSG5)
#define BIT_SET_FW_MSG5(x, v)				(BIT_CLEAR_FW_MSG5(x) | BIT_FW_MSG5(v))

/* 2 REG_DDMA_CH0SA				(Offset 0x1200) */

#define BIT_SHIFT_DDMACH0_SA				0
#define BIT_MASK_DDMACH0_SA				0xffffffffL
#define BIT_DDMACH0_SA(x)				(((x) & BIT_MASK_DDMACH0_SA) << BIT_SHIFT_DDMACH0_SA)
#define BITS_DDMACH0_SA				(BIT_MASK_DDMACH0_SA << BIT_SHIFT_DDMACH0_SA)
#define BIT_CLEAR_DDMACH0_SA(x)			((x) & (~BITS_DDMACH0_SA))
#define BIT_GET_DDMACH0_SA(x)				(((x) >> BIT_SHIFT_DDMACH0_SA) & BIT_MASK_DDMACH0_SA)
#define BIT_SET_DDMACH0_SA(x, v)			(BIT_CLEAR_DDMACH0_SA(x) | BIT_DDMACH0_SA(v))

/* 2 REG_DDMA_CH0DA				(Offset 0x1204) */

#define BIT_SHIFT_DDMACH0_DA				0
#define BIT_MASK_DDMACH0_DA				0xffffffffL
#define BIT_DDMACH0_DA(x)				(((x) & BIT_MASK_DDMACH0_DA) << BIT_SHIFT_DDMACH0_DA)
#define BITS_DDMACH0_DA				(BIT_MASK_DDMACH0_DA << BIT_SHIFT_DDMACH0_DA)
#define BIT_CLEAR_DDMACH0_DA(x)			((x) & (~BITS_DDMACH0_DA))
#define BIT_GET_DDMACH0_DA(x)				(((x) >> BIT_SHIFT_DDMACH0_DA) & BIT_MASK_DDMACH0_DA)
#define BIT_SET_DDMACH0_DA(x, v)			(BIT_CLEAR_DDMACH0_DA(x) | BIT_DDMACH0_DA(v))

/* 2 REG_DDMA_CH0CTRL			(Offset 0x1208) */

#define BIT_DDMACH0_OWN				BIT(31)
#define BIT_DDMACH0_IDMEM_ERR				BIT(30)
#define BIT_DDMACH0_CHKSUM_EN				BIT(29)
#define BIT_DDMACH0_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH0_CHKSUM_STS				BIT(27)
#define BIT_DDMACH0_DDMA_MODE				BIT(26)
#define BIT_DDMACH0_RESET_CHKSUM_STS			BIT(25)
#define BIT_DDMACH0_CHKSUM_CONT			BIT(24)

#define BIT_SHIFT_DDMACH0_DLEN				0
#define BIT_MASK_DDMACH0_DLEN				0x3ffff
#define BIT_DDMACH0_DLEN(x)				(((x) & BIT_MASK_DDMACH0_DLEN) << BIT_SHIFT_DDMACH0_DLEN)
#define BITS_DDMACH0_DLEN				(BIT_MASK_DDMACH0_DLEN << BIT_SHIFT_DDMACH0_DLEN)
#define BIT_CLEAR_DDMACH0_DLEN(x)			((x) & (~BITS_DDMACH0_DLEN))
#define BIT_GET_DDMACH0_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH0_DLEN) & BIT_MASK_DDMACH0_DLEN)
#define BIT_SET_DDMACH0_DLEN(x, v)			(BIT_CLEAR_DDMACH0_DLEN(x) | BIT_DDMACH0_DLEN(v))

/* 2 REG_DDMA_CH1SA				(Offset 0x1210) */

#define BIT_SHIFT_DDMACH1_SA				0
#define BIT_MASK_DDMACH1_SA				0xffffffffL
#define BIT_DDMACH1_SA(x)				(((x) & BIT_MASK_DDMACH1_SA) << BIT_SHIFT_DDMACH1_SA)
#define BITS_DDMACH1_SA				(BIT_MASK_DDMACH1_SA << BIT_SHIFT_DDMACH1_SA)
#define BIT_CLEAR_DDMACH1_SA(x)			((x) & (~BITS_DDMACH1_SA))
#define BIT_GET_DDMACH1_SA(x)				(((x) >> BIT_SHIFT_DDMACH1_SA) & BIT_MASK_DDMACH1_SA)
#define BIT_SET_DDMACH1_SA(x, v)			(BIT_CLEAR_DDMACH1_SA(x) | BIT_DDMACH1_SA(v))

/* 2 REG_DDMA_CH1DA				(Offset 0x1214) */

#define BIT_SHIFT_DDMACH1_DA				0
#define BIT_MASK_DDMACH1_DA				0xffffffffL
#define BIT_DDMACH1_DA(x)				(((x) & BIT_MASK_DDMACH1_DA) << BIT_SHIFT_DDMACH1_DA)
#define BITS_DDMACH1_DA				(BIT_MASK_DDMACH1_DA << BIT_SHIFT_DDMACH1_DA)
#define BIT_CLEAR_DDMACH1_DA(x)			((x) & (~BITS_DDMACH1_DA))
#define BIT_GET_DDMACH1_DA(x)				(((x) >> BIT_SHIFT_DDMACH1_DA) & BIT_MASK_DDMACH1_DA)
#define BIT_SET_DDMACH1_DA(x, v)			(BIT_CLEAR_DDMACH1_DA(x) | BIT_DDMACH1_DA(v))

/* 2 REG_DDMA_CH1CTRL			(Offset 0x1218) */

#define BIT_DDMACH1_OWN				BIT(31)
#define BIT_DDMACH1_IDMEM_ERR				BIT(30)
#define BIT_DDMACH1_CHKSUM_EN				BIT(29)
#define BIT_DDMACH1_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH1_CHKSUM_STS				BIT(27)
#define BIT_DDMACH1_DDMA_MODE				BIT(26)

#define BIT_SHIFT_DDMACH1_DLEN				0
#define BIT_MASK_DDMACH1_DLEN				0x3ffff
#define BIT_DDMACH1_DLEN(x)				(((x) & BIT_MASK_DDMACH1_DLEN) << BIT_SHIFT_DDMACH1_DLEN)
#define BITS_DDMACH1_DLEN				(BIT_MASK_DDMACH1_DLEN << BIT_SHIFT_DDMACH1_DLEN)
#define BIT_CLEAR_DDMACH1_DLEN(x)			((x) & (~BITS_DDMACH1_DLEN))
#define BIT_GET_DDMACH1_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH1_DLEN) & BIT_MASK_DDMACH1_DLEN)
#define BIT_SET_DDMACH1_DLEN(x, v)			(BIT_CLEAR_DDMACH1_DLEN(x) | BIT_DDMACH1_DLEN(v))

/* 2 REG_DDMA_CH2SA				(Offset 0x1220) */

#define BIT_SHIFT_DDMACH2_SA				0
#define BIT_MASK_DDMACH2_SA				0xffffffffL
#define BIT_DDMACH2_SA(x)				(((x) & BIT_MASK_DDMACH2_SA) << BIT_SHIFT_DDMACH2_SA)
#define BITS_DDMACH2_SA				(BIT_MASK_DDMACH2_SA << BIT_SHIFT_DDMACH2_SA)
#define BIT_CLEAR_DDMACH2_SA(x)			((x) & (~BITS_DDMACH2_SA))
#define BIT_GET_DDMACH2_SA(x)				(((x) >> BIT_SHIFT_DDMACH2_SA) & BIT_MASK_DDMACH2_SA)
#define BIT_SET_DDMACH2_SA(x, v)			(BIT_CLEAR_DDMACH2_SA(x) | BIT_DDMACH2_SA(v))

/* 2 REG_DDMA_CH2DA				(Offset 0x1224) */

#define BIT_SHIFT_DDMACH2_DA				0
#define BIT_MASK_DDMACH2_DA				0xffffffffL
#define BIT_DDMACH2_DA(x)				(((x) & BIT_MASK_DDMACH2_DA) << BIT_SHIFT_DDMACH2_DA)
#define BITS_DDMACH2_DA				(BIT_MASK_DDMACH2_DA << BIT_SHIFT_DDMACH2_DA)
#define BIT_CLEAR_DDMACH2_DA(x)			((x) & (~BITS_DDMACH2_DA))
#define BIT_GET_DDMACH2_DA(x)				(((x) >> BIT_SHIFT_DDMACH2_DA) & BIT_MASK_DDMACH2_DA)
#define BIT_SET_DDMACH2_DA(x, v)			(BIT_CLEAR_DDMACH2_DA(x) | BIT_DDMACH2_DA(v))

/* 2 REG_DDMA_CH2CTRL			(Offset 0x1228) */

#define BIT_DDMACH2_OWN				BIT(31)
#define BIT_DDMACH2_IDMEM_ERR				BIT(30)
#define BIT_DDMACH2_CHKSUM_EN				BIT(29)
#define BIT_DDMACH2_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH2_CHKSUM_STS				BIT(27)
#define BIT_DDMACH2_DDMA_MODE				BIT(26)

#define BIT_SHIFT_DDMACH2_DLEN				0
#define BIT_MASK_DDMACH2_DLEN				0x3ffff
#define BIT_DDMACH2_DLEN(x)				(((x) & BIT_MASK_DDMACH2_DLEN) << BIT_SHIFT_DDMACH2_DLEN)
#define BITS_DDMACH2_DLEN				(BIT_MASK_DDMACH2_DLEN << BIT_SHIFT_DDMACH2_DLEN)
#define BIT_CLEAR_DDMACH2_DLEN(x)			((x) & (~BITS_DDMACH2_DLEN))
#define BIT_GET_DDMACH2_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH2_DLEN) & BIT_MASK_DDMACH2_DLEN)
#define BIT_SET_DDMACH2_DLEN(x, v)			(BIT_CLEAR_DDMACH2_DLEN(x) | BIT_DDMACH2_DLEN(v))

/* 2 REG_DDMA_CH3SA				(Offset 0x1230) */

#define BIT_SHIFT_DDMACH3_SA				0
#define BIT_MASK_DDMACH3_SA				0xffffffffL
#define BIT_DDMACH3_SA(x)				(((x) & BIT_MASK_DDMACH3_SA) << BIT_SHIFT_DDMACH3_SA)
#define BITS_DDMACH3_SA				(BIT_MASK_DDMACH3_SA << BIT_SHIFT_DDMACH3_SA)
#define BIT_CLEAR_DDMACH3_SA(x)			((x) & (~BITS_DDMACH3_SA))
#define BIT_GET_DDMACH3_SA(x)				(((x) >> BIT_SHIFT_DDMACH3_SA) & BIT_MASK_DDMACH3_SA)
#define BIT_SET_DDMACH3_SA(x, v)			(BIT_CLEAR_DDMACH3_SA(x) | BIT_DDMACH3_SA(v))

/* 2 REG_DDMA_CH3DA				(Offset 0x1234) */

#define BIT_SHIFT_DDMACH3_DA				0
#define BIT_MASK_DDMACH3_DA				0xffffffffL
#define BIT_DDMACH3_DA(x)				(((x) & BIT_MASK_DDMACH3_DA) << BIT_SHIFT_DDMACH3_DA)
#define BITS_DDMACH3_DA				(BIT_MASK_DDMACH3_DA << BIT_SHIFT_DDMACH3_DA)
#define BIT_CLEAR_DDMACH3_DA(x)			((x) & (~BITS_DDMACH3_DA))
#define BIT_GET_DDMACH3_DA(x)				(((x) >> BIT_SHIFT_DDMACH3_DA) & BIT_MASK_DDMACH3_DA)
#define BIT_SET_DDMACH3_DA(x, v)			(BIT_CLEAR_DDMACH3_DA(x) | BIT_DDMACH3_DA(v))

/* 2 REG_DDMA_CH3CTRL			(Offset 0x1238) */

#define BIT_DDMACH3_OWN				BIT(31)
#define BIT_DDMACH3_IDMEM_ERR				BIT(30)
#define BIT_DDMACH3_CHKSUM_EN				BIT(29)
#define BIT_DDMACH3_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH3_CHKSUM_STS				BIT(27)
#define BIT_DDMACH3_DDMA_MODE				BIT(26)

#define BIT_SHIFT_DDMACH3_DLEN				0
#define BIT_MASK_DDMACH3_DLEN				0x3ffff
#define BIT_DDMACH3_DLEN(x)				(((x) & BIT_MASK_DDMACH3_DLEN) << BIT_SHIFT_DDMACH3_DLEN)
#define BITS_DDMACH3_DLEN				(BIT_MASK_DDMACH3_DLEN << BIT_SHIFT_DDMACH3_DLEN)
#define BIT_CLEAR_DDMACH3_DLEN(x)			((x) & (~BITS_DDMACH3_DLEN))
#define BIT_GET_DDMACH3_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH3_DLEN) & BIT_MASK_DDMACH3_DLEN)
#define BIT_SET_DDMACH3_DLEN(x, v)			(BIT_CLEAR_DDMACH3_DLEN(x) | BIT_DDMACH3_DLEN(v))

/* 2 REG_DDMA_CH4SA				(Offset 0x1240) */

#define BIT_SHIFT_DDMACH4_SA				0
#define BIT_MASK_DDMACH4_SA				0xffffffffL
#define BIT_DDMACH4_SA(x)				(((x) & BIT_MASK_DDMACH4_SA) << BIT_SHIFT_DDMACH4_SA)
#define BITS_DDMACH4_SA				(BIT_MASK_DDMACH4_SA << BIT_SHIFT_DDMACH4_SA)
#define BIT_CLEAR_DDMACH4_SA(x)			((x) & (~BITS_DDMACH4_SA))
#define BIT_GET_DDMACH4_SA(x)				(((x) >> BIT_SHIFT_DDMACH4_SA) & BIT_MASK_DDMACH4_SA)
#define BIT_SET_DDMACH4_SA(x, v)			(BIT_CLEAR_DDMACH4_SA(x) | BIT_DDMACH4_SA(v))

/* 2 REG_DDMA_CH4DA				(Offset 0x1244) */

#define BIT_SHIFT_DDMACH4_DA				0
#define BIT_MASK_DDMACH4_DA				0xffffffffL
#define BIT_DDMACH4_DA(x)				(((x) & BIT_MASK_DDMACH4_DA) << BIT_SHIFT_DDMACH4_DA)
#define BITS_DDMACH4_DA				(BIT_MASK_DDMACH4_DA << BIT_SHIFT_DDMACH4_DA)
#define BIT_CLEAR_DDMACH4_DA(x)			((x) & (~BITS_DDMACH4_DA))
#define BIT_GET_DDMACH4_DA(x)				(((x) >> BIT_SHIFT_DDMACH4_DA) & BIT_MASK_DDMACH4_DA)
#define BIT_SET_DDMACH4_DA(x, v)			(BIT_CLEAR_DDMACH4_DA(x) | BIT_DDMACH4_DA(v))

/* 2 REG_DDMA_CH4CTRL			(Offset 0x1248) */

#define BIT_DDMACH4_OWN				BIT(31)
#define BIT_DDMACH4_IDMEM_ERR				BIT(30)
#define BIT_DDMACH4_CHKSUM_EN				BIT(29)
#define BIT_DDMACH4_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH4_CHKSUM_STS				BIT(27)
#define BIT_DDMACH4_DDMA_MODE				BIT(26)

#define BIT_SHIFT_DDMACH4_DLEN				0
#define BIT_MASK_DDMACH4_DLEN				0x3ffff
#define BIT_DDMACH4_DLEN(x)				(((x) & BIT_MASK_DDMACH4_DLEN) << BIT_SHIFT_DDMACH4_DLEN)
#define BITS_DDMACH4_DLEN				(BIT_MASK_DDMACH4_DLEN << BIT_SHIFT_DDMACH4_DLEN)
#define BIT_CLEAR_DDMACH4_DLEN(x)			((x) & (~BITS_DDMACH4_DLEN))
#define BIT_GET_DDMACH4_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH4_DLEN) & BIT_MASK_DDMACH4_DLEN)
#define BIT_SET_DDMACH4_DLEN(x, v)			(BIT_CLEAR_DDMACH4_DLEN(x) | BIT_DDMACH4_DLEN(v))

/* 2 REG_DDMA_CH5SA				(Offset 0x1250) */

#define BIT_SHIFT_DDMACH5_SA				0
#define BIT_MASK_DDMACH5_SA				0xffffffffL
#define BIT_DDMACH5_SA(x)				(((x) & BIT_MASK_DDMACH5_SA) << BIT_SHIFT_DDMACH5_SA)
#define BITS_DDMACH5_SA				(BIT_MASK_DDMACH5_SA << BIT_SHIFT_DDMACH5_SA)
#define BIT_CLEAR_DDMACH5_SA(x)			((x) & (~BITS_DDMACH5_SA))
#define BIT_GET_DDMACH5_SA(x)				(((x) >> BIT_SHIFT_DDMACH5_SA) & BIT_MASK_DDMACH5_SA)
#define BIT_SET_DDMACH5_SA(x, v)			(BIT_CLEAR_DDMACH5_SA(x) | BIT_DDMACH5_SA(v))

/* 2 REG_DDMA_CH5DA				(Offset 0x1254) */

#define BIT_SHIFT_DDMACH5_DA				0
#define BIT_MASK_DDMACH5_DA				0xffffffffL
#define BIT_DDMACH5_DA(x)				(((x) & BIT_MASK_DDMACH5_DA) << BIT_SHIFT_DDMACH5_DA)
#define BITS_DDMACH5_DA				(BIT_MASK_DDMACH5_DA << BIT_SHIFT_DDMACH5_DA)
#define BIT_CLEAR_DDMACH5_DA(x)			((x) & (~BITS_DDMACH5_DA))
#define BIT_GET_DDMACH5_DA(x)				(((x) >> BIT_SHIFT_DDMACH5_DA) & BIT_MASK_DDMACH5_DA)
#define BIT_SET_DDMACH5_DA(x, v)			(BIT_CLEAR_DDMACH5_DA(x) | BIT_DDMACH5_DA(v))

/* 2 REG_DDMA_CH5CTRL			(Offset 0x1258) */

#define BIT_DDMACH5_OWN				BIT(31)
#define BIT_DDMACH5_IDMEM_ERR				BIT(30)
#define BIT_DDMACH5_CHKSUM_EN				BIT(29)
#define BIT_DDMACH5_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH5_CHKSUM_STS				BIT(27)
#define BIT_DDMACH5_DDMA_MODE				BIT(26)

#define BIT_SHIFT_DDMACH5_DLEN				0
#define BIT_MASK_DDMACH5_DLEN				0x3ffff
#define BIT_DDMACH5_DLEN(x)				(((x) & BIT_MASK_DDMACH5_DLEN) << BIT_SHIFT_DDMACH5_DLEN)
#define BITS_DDMACH5_DLEN				(BIT_MASK_DDMACH5_DLEN << BIT_SHIFT_DDMACH5_DLEN)
#define BIT_CLEAR_DDMACH5_DLEN(x)			((x) & (~BITS_DDMACH5_DLEN))
#define BIT_GET_DDMACH5_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH5_DLEN) & BIT_MASK_DDMACH5_DLEN)
#define BIT_SET_DDMACH5_DLEN(x, v)			(BIT_CLEAR_DDMACH5_DLEN(x) | BIT_DDMACH5_DLEN(v))

/* 2 REG_DDMA_INT_MSK			(Offset 0x12E0) */

#define BIT_DDMACH5_MSK				BIT(5)
#define BIT_DDMACH4_MSK				BIT(4)
#define BIT_DDMACH3_MSK				BIT(3)
#define BIT_DDMACH2_MSK				BIT(2)
#define BIT_DDMACH1_MSK				BIT(1)
#define BIT_DDMACH0_MSK				BIT(0)

/* 2 REG_DDMA_CHSTATUS			(Offset 0x12E8) */

#define BIT_DDMACH5_BUSY				BIT(5)
#define BIT_DDMACH4_BUSY				BIT(4)
#define BIT_DDMACH3_BUSY				BIT(3)
#define BIT_DDMACH2_BUSY				BIT(2)
#define BIT_DDMACH1_BUSY				BIT(1)
#define BIT_DDMACH0_BUSY				BIT(0)

/* 2 REG_DDMA_CHKSUM				(Offset 0x12F0) */

#define BIT_SHIFT_IDDMA0_CHKSUM			0
#define BIT_MASK_IDDMA0_CHKSUM				0xffff
#define BIT_IDDMA0_CHKSUM(x)				(((x) & BIT_MASK_IDDMA0_CHKSUM) << BIT_SHIFT_IDDMA0_CHKSUM)
#define BITS_IDDMA0_CHKSUM				(BIT_MASK_IDDMA0_CHKSUM << BIT_SHIFT_IDDMA0_CHKSUM)
#define BIT_CLEAR_IDDMA0_CHKSUM(x)			((x) & (~BITS_IDDMA0_CHKSUM))
#define BIT_GET_IDDMA0_CHKSUM(x)			(((x) >> BIT_SHIFT_IDDMA0_CHKSUM) & BIT_MASK_IDDMA0_CHKSUM)
#define BIT_SET_IDDMA0_CHKSUM(x, v)			(BIT_CLEAR_IDDMA0_CHKSUM(x) | BIT_IDDMA0_CHKSUM(v))

/* 2 REG_DDMA_MONITOR			(Offset 0x12FC) */

#define BIT_IDDMA0_PERMU_UNDERFLOW			BIT(14)
#define BIT_IDDMA0_FIFO_UNDERFLOW			BIT(13)
#define BIT_IDDMA0_FIFO_OVERFLOW			BIT(12)
#define BIT_CH5_ERR					BIT(5)
#define BIT_CH4_ERR					BIT(4)
#define BIT_CH3_ERR					BIT(3)
#define BIT_CH2_ERR					BIT(2)
#define BIT_CH1_ERR					BIT(1)
#define BIT_CH0_ERR					BIT(0)

/* 2 REG_H2CQ_TXBD_DESA_AMB			(Offset 0x1300) */

#define BIT_SHIFT_H2CQ_TXBD_DESA_AMB			0
#define BIT_MASK_H2CQ_TXBD_DESA_AMB			0xffffffffL
#define BIT_H2CQ_TXBD_DESA_AMB(x)			(((x) & BIT_MASK_H2CQ_TXBD_DESA_AMB) << BIT_SHIFT_H2CQ_TXBD_DESA_AMB)
#define BITS_H2CQ_TXBD_DESA_AMB			(BIT_MASK_H2CQ_TXBD_DESA_AMB << BIT_SHIFT_H2CQ_TXBD_DESA_AMB)
#define BIT_CLEAR_H2CQ_TXBD_DESA_AMB(x)		((x) & (~BITS_H2CQ_TXBD_DESA_AMB))
#define BIT_GET_H2CQ_TXBD_DESA_AMB(x)			(((x) >> BIT_SHIFT_H2CQ_TXBD_DESA_AMB) & BIT_MASK_H2CQ_TXBD_DESA_AMB)
#define BIT_SET_H2CQ_TXBD_DESA_AMB(x, v)		(BIT_CLEAR_H2CQ_TXBD_DESA_AMB(x) | BIT_H2CQ_TXBD_DESA_AMB(v))

/* 2 REG_H2CQ_TXBD_NUM_AMB			(Offset 0x1304) */

#define BIT_H2CQ_FLAG					BIT(14)

#define BIT_SHIFT_H2CQ_DESC_MODE			12
#define BIT_MASK_H2CQ_DESC_MODE			0x3
#define BIT_H2CQ_DESC_MODE(x)				(((x) & BIT_MASK_H2CQ_DESC_MODE) << BIT_SHIFT_H2CQ_DESC_MODE)
#define BITS_H2CQ_DESC_MODE				(BIT_MASK_H2CQ_DESC_MODE << BIT_SHIFT_H2CQ_DESC_MODE)
#define BIT_CLEAR_H2CQ_DESC_MODE(x)			((x) & (~BITS_H2CQ_DESC_MODE))
#define BIT_GET_H2CQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_H2CQ_DESC_MODE) & BIT_MASK_H2CQ_DESC_MODE)
#define BIT_SET_H2CQ_DESC_MODE(x, v)			(BIT_CLEAR_H2CQ_DESC_MODE(x) | BIT_H2CQ_DESC_MODE(v))

#define BIT_SHIFT_H2CQ_DESC_NUM			0
#define BIT_MASK_H2CQ_DESC_NUM				0xfff
#define BIT_H2CQ_DESC_NUM(x)				(((x) & BIT_MASK_H2CQ_DESC_NUM) << BIT_SHIFT_H2CQ_DESC_NUM)
#define BITS_H2CQ_DESC_NUM				(BIT_MASK_H2CQ_DESC_NUM << BIT_SHIFT_H2CQ_DESC_NUM)
#define BIT_CLEAR_H2CQ_DESC_NUM(x)			((x) & (~BITS_H2CQ_DESC_NUM))
#define BIT_GET_H2CQ_DESC_NUM(x)			(((x) >> BIT_SHIFT_H2CQ_DESC_NUM) & BIT_MASK_H2CQ_DESC_NUM)
#define BIT_SET_H2CQ_DESC_NUM(x, v)			(BIT_CLEAR_H2CQ_DESC_NUM(x) | BIT_H2CQ_DESC_NUM(v))

/* 2 REG_H2CQ_TXBD_IDX_AMB			(Offset 0x1308) */

#define BIT_SHIFT_H2CQ_HW_IDX				16
#define BIT_MASK_H2CQ_HW_IDX				0xfff
#define BIT_H2CQ_HW_IDX(x)				(((x) & BIT_MASK_H2CQ_HW_IDX) << BIT_SHIFT_H2CQ_HW_IDX)
#define BITS_H2CQ_HW_IDX				(BIT_MASK_H2CQ_HW_IDX << BIT_SHIFT_H2CQ_HW_IDX)
#define BIT_CLEAR_H2CQ_HW_IDX(x)			((x) & (~BITS_H2CQ_HW_IDX))
#define BIT_GET_H2CQ_HW_IDX(x)				(((x) >> BIT_SHIFT_H2CQ_HW_IDX) & BIT_MASK_H2CQ_HW_IDX)
#define BIT_SET_H2CQ_HW_IDX(x, v)			(BIT_CLEAR_H2CQ_HW_IDX(x) | BIT_H2CQ_HW_IDX(v))

#define BIT_SHIFT_H2CQ_HOST_IDX			0
#define BIT_MASK_H2CQ_HOST_IDX				0xfff
#define BIT_H2CQ_HOST_IDX(x)				(((x) & BIT_MASK_H2CQ_HOST_IDX) << BIT_SHIFT_H2CQ_HOST_IDX)
#define BITS_H2CQ_HOST_IDX				(BIT_MASK_H2CQ_HOST_IDX << BIT_SHIFT_H2CQ_HOST_IDX)
#define BIT_CLEAR_H2CQ_HOST_IDX(x)			((x) & (~BITS_H2CQ_HOST_IDX))
#define BIT_GET_H2CQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_H2CQ_HOST_IDX) & BIT_MASK_H2CQ_HOST_IDX)
#define BIT_SET_H2CQ_HOST_IDX(x, v)			(BIT_CLEAR_H2CQ_HOST_IDX(x) | BIT_H2CQ_HOST_IDX(v))

/* 2 REG_H2CQ_CSR_AMB			(Offset 0x130C) */

#define BIT_H2CQ_FULL					BIT(31)
#define BIT_CLR_H2CQ_HOST_IDX				BIT(16)
#define BIT_CLR_H2CQ_HW_IDX				BIT(8)
#define BIT_STOP_H2CQ					BIT(0)

/* 2 REG_Q0_Q1_INFO				(Offset 0x1400) */

#define BIT_SHIFT_AC1_PKT_INFO				16
#define BIT_MASK_AC1_PKT_INFO				0xfff
#define BIT_AC1_PKT_INFO(x)				(((x) & BIT_MASK_AC1_PKT_INFO) << BIT_SHIFT_AC1_PKT_INFO)
#define BITS_AC1_PKT_INFO				(BIT_MASK_AC1_PKT_INFO << BIT_SHIFT_AC1_PKT_INFO)
#define BIT_CLEAR_AC1_PKT_INFO(x)			((x) & (~BITS_AC1_PKT_INFO))
#define BIT_GET_AC1_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC1_PKT_INFO) & BIT_MASK_AC1_PKT_INFO)
#define BIT_SET_AC1_PKT_INFO(x, v)			(BIT_CLEAR_AC1_PKT_INFO(x) | BIT_AC1_PKT_INFO(v))

#define BIT_QUEUE_MACID_AC_NOT_THE_SAME_V1		BIT(15)

#define BIT_SHIFT_GTAB_ID_V1				12
#define BIT_MASK_GTAB_ID_V1				0x7
#define BIT_GTAB_ID_V1(x)				(((x) & BIT_MASK_GTAB_ID_V1) << BIT_SHIFT_GTAB_ID_V1)
#define BITS_GTAB_ID_V1				(BIT_MASK_GTAB_ID_V1 << BIT_SHIFT_GTAB_ID_V1)
#define BIT_CLEAR_GTAB_ID_V1(x)			((x) & (~BITS_GTAB_ID_V1))
#define BIT_GET_GTAB_ID_V1(x)				(((x) >> BIT_SHIFT_GTAB_ID_V1) & BIT_MASK_GTAB_ID_V1)
#define BIT_SET_GTAB_ID_V1(x, v)			(BIT_CLEAR_GTAB_ID_V1(x) | BIT_GTAB_ID_V1(v))

#define BIT_SHIFT_AC0_PKT_INFO				0
#define BIT_MASK_AC0_PKT_INFO				0xfff
#define BIT_AC0_PKT_INFO(x)				(((x) & BIT_MASK_AC0_PKT_INFO) << BIT_SHIFT_AC0_PKT_INFO)
#define BITS_AC0_PKT_INFO				(BIT_MASK_AC0_PKT_INFO << BIT_SHIFT_AC0_PKT_INFO)
#define BIT_CLEAR_AC0_PKT_INFO(x)			((x) & (~BITS_AC0_PKT_INFO))
#define BIT_GET_AC0_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC0_PKT_INFO) & BIT_MASK_AC0_PKT_INFO)
#define BIT_SET_AC0_PKT_INFO(x, v)			(BIT_CLEAR_AC0_PKT_INFO(x) | BIT_AC0_PKT_INFO(v))

/* 2 REG_Q2_Q3_INFO				(Offset 0x1404) */

#define BIT_SHIFT_AC3_PKT_INFO				16
#define BIT_MASK_AC3_PKT_INFO				0xfff
#define BIT_AC3_PKT_INFO(x)				(((x) & BIT_MASK_AC3_PKT_INFO) << BIT_SHIFT_AC3_PKT_INFO)
#define BITS_AC3_PKT_INFO				(BIT_MASK_AC3_PKT_INFO << BIT_SHIFT_AC3_PKT_INFO)
#define BIT_CLEAR_AC3_PKT_INFO(x)			((x) & (~BITS_AC3_PKT_INFO))
#define BIT_GET_AC3_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC3_PKT_INFO) & BIT_MASK_AC3_PKT_INFO)
#define BIT_SET_AC3_PKT_INFO(x, v)			(BIT_CLEAR_AC3_PKT_INFO(x) | BIT_AC3_PKT_INFO(v))

#define BIT_SHIFT_AC2_PKT_INFO				0
#define BIT_MASK_AC2_PKT_INFO				0xfff
#define BIT_AC2_PKT_INFO(x)				(((x) & BIT_MASK_AC2_PKT_INFO) << BIT_SHIFT_AC2_PKT_INFO)
#define BITS_AC2_PKT_INFO				(BIT_MASK_AC2_PKT_INFO << BIT_SHIFT_AC2_PKT_INFO)
#define BIT_CLEAR_AC2_PKT_INFO(x)			((x) & (~BITS_AC2_PKT_INFO))
#define BIT_GET_AC2_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC2_PKT_INFO) & BIT_MASK_AC2_PKT_INFO)
#define BIT_SET_AC2_PKT_INFO(x, v)			(BIT_CLEAR_AC2_PKT_INFO(x) | BIT_AC2_PKT_INFO(v))

/* 2 REG_Q4_Q5_INFO				(Offset 0x1408) */

#define BIT_SHIFT_AC5_PKT_INFO				16
#define BIT_MASK_AC5_PKT_INFO				0xfff
#define BIT_AC5_PKT_INFO(x)				(((x) & BIT_MASK_AC5_PKT_INFO) << BIT_SHIFT_AC5_PKT_INFO)
#define BITS_AC5_PKT_INFO				(BIT_MASK_AC5_PKT_INFO << BIT_SHIFT_AC5_PKT_INFO)
#define BIT_CLEAR_AC5_PKT_INFO(x)			((x) & (~BITS_AC5_PKT_INFO))
#define BIT_GET_AC5_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC5_PKT_INFO) & BIT_MASK_AC5_PKT_INFO)
#define BIT_SET_AC5_PKT_INFO(x, v)			(BIT_CLEAR_AC5_PKT_INFO(x) | BIT_AC5_PKT_INFO(v))

#define BIT_SHIFT_AC4_PKT_INFO				0
#define BIT_MASK_AC4_PKT_INFO				0xfff
#define BIT_AC4_PKT_INFO(x)				(((x) & BIT_MASK_AC4_PKT_INFO) << BIT_SHIFT_AC4_PKT_INFO)
#define BITS_AC4_PKT_INFO				(BIT_MASK_AC4_PKT_INFO << BIT_SHIFT_AC4_PKT_INFO)
#define BIT_CLEAR_AC4_PKT_INFO(x)			((x) & (~BITS_AC4_PKT_INFO))
#define BIT_GET_AC4_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC4_PKT_INFO) & BIT_MASK_AC4_PKT_INFO)
#define BIT_SET_AC4_PKT_INFO(x, v)			(BIT_CLEAR_AC4_PKT_INFO(x) | BIT_AC4_PKT_INFO(v))

/* 2 REG_Q6_Q7_INFO				(Offset 0x140C) */

#define BIT_SHIFT_AC7_PKT_INFO				16
#define BIT_MASK_AC7_PKT_INFO				0xfff
#define BIT_AC7_PKT_INFO(x)				(((x) & BIT_MASK_AC7_PKT_INFO) << BIT_SHIFT_AC7_PKT_INFO)
#define BITS_AC7_PKT_INFO				(BIT_MASK_AC7_PKT_INFO << BIT_SHIFT_AC7_PKT_INFO)
#define BIT_CLEAR_AC7_PKT_INFO(x)			((x) & (~BITS_AC7_PKT_INFO))
#define BIT_GET_AC7_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC7_PKT_INFO) & BIT_MASK_AC7_PKT_INFO)
#define BIT_SET_AC7_PKT_INFO(x, v)			(BIT_CLEAR_AC7_PKT_INFO(x) | BIT_AC7_PKT_INFO(v))

#define BIT_SHIFT_AC6_PKT_INFO				0
#define BIT_MASK_AC6_PKT_INFO				0xfff
#define BIT_AC6_PKT_INFO(x)				(((x) & BIT_MASK_AC6_PKT_INFO) << BIT_SHIFT_AC6_PKT_INFO)
#define BITS_AC6_PKT_INFO				(BIT_MASK_AC6_PKT_INFO << BIT_SHIFT_AC6_PKT_INFO)
#define BIT_CLEAR_AC6_PKT_INFO(x)			((x) & (~BITS_AC6_PKT_INFO))
#define BIT_GET_AC6_PKT_INFO(x)			(((x) >> BIT_SHIFT_AC6_PKT_INFO) & BIT_MASK_AC6_PKT_INFO)
#define BIT_SET_AC6_PKT_INFO(x, v)			(BIT_CLEAR_AC6_PKT_INFO(x) | BIT_AC6_PKT_INFO(v))

/* 2 REG_MGQ_HIQ_INFO			(Offset 0x1410) */

#define BIT_SHIFT_HIQ_PKT_INFO				16
#define BIT_MASK_HIQ_PKT_INFO				0xfff
#define BIT_HIQ_PKT_INFO(x)				(((x) & BIT_MASK_HIQ_PKT_INFO) << BIT_SHIFT_HIQ_PKT_INFO)
#define BITS_HIQ_PKT_INFO				(BIT_MASK_HIQ_PKT_INFO << BIT_SHIFT_HIQ_PKT_INFO)
#define BIT_CLEAR_HIQ_PKT_INFO(x)			((x) & (~BITS_HIQ_PKT_INFO))
#define BIT_GET_HIQ_PKT_INFO(x)			(((x) >> BIT_SHIFT_HIQ_PKT_INFO) & BIT_MASK_HIQ_PKT_INFO)
#define BIT_SET_HIQ_PKT_INFO(x, v)			(BIT_CLEAR_HIQ_PKT_INFO(x) | BIT_HIQ_PKT_INFO(v))

#define BIT_SHIFT_MGQ_PKT_INFO				0
#define BIT_MASK_MGQ_PKT_INFO				0xfff
#define BIT_MGQ_PKT_INFO(x)				(((x) & BIT_MASK_MGQ_PKT_INFO) << BIT_SHIFT_MGQ_PKT_INFO)
#define BITS_MGQ_PKT_INFO				(BIT_MASK_MGQ_PKT_INFO << BIT_SHIFT_MGQ_PKT_INFO)
#define BIT_CLEAR_MGQ_PKT_INFO(x)			((x) & (~BITS_MGQ_PKT_INFO))
#define BIT_GET_MGQ_PKT_INFO(x)			(((x) >> BIT_SHIFT_MGQ_PKT_INFO) & BIT_MASK_MGQ_PKT_INFO)
#define BIT_SET_MGQ_PKT_INFO(x, v)			(BIT_CLEAR_MGQ_PKT_INFO(x) | BIT_MGQ_PKT_INFO(v))

/* 2 REG_CMDQ_BCNQ_INFO			(Offset 0x1414) */

#define BIT_SHIFT_CMDQ_PKT_INFO			16
#define BIT_MASK_CMDQ_PKT_INFO				0xfff
#define BIT_CMDQ_PKT_INFO(x)				(((x) & BIT_MASK_CMDQ_PKT_INFO) << BIT_SHIFT_CMDQ_PKT_INFO)
#define BITS_CMDQ_PKT_INFO				(BIT_MASK_CMDQ_PKT_INFO << BIT_SHIFT_CMDQ_PKT_INFO)
#define BIT_CLEAR_CMDQ_PKT_INFO(x)			((x) & (~BITS_CMDQ_PKT_INFO))
#define BIT_GET_CMDQ_PKT_INFO(x)			(((x) >> BIT_SHIFT_CMDQ_PKT_INFO) & BIT_MASK_CMDQ_PKT_INFO)
#define BIT_SET_CMDQ_PKT_INFO(x, v)			(BIT_CLEAR_CMDQ_PKT_INFO(x) | BIT_CMDQ_PKT_INFO(v))

#define BIT_SHIFT_BCNQ_PKT_INFO			0
#define BIT_MASK_BCNQ_PKT_INFO				0xfff
#define BIT_BCNQ_PKT_INFO(x)				(((x) & BIT_MASK_BCNQ_PKT_INFO) << BIT_SHIFT_BCNQ_PKT_INFO)
#define BITS_BCNQ_PKT_INFO				(BIT_MASK_BCNQ_PKT_INFO << BIT_SHIFT_BCNQ_PKT_INFO)
#define BIT_CLEAR_BCNQ_PKT_INFO(x)			((x) & (~BITS_BCNQ_PKT_INFO))
#define BIT_GET_BCNQ_PKT_INFO(x)			(((x) >> BIT_SHIFT_BCNQ_PKT_INFO) & BIT_MASK_BCNQ_PKT_INFO)
#define BIT_SET_BCNQ_PKT_INFO(x, v)			(BIT_CLEAR_BCNQ_PKT_INFO(x) | BIT_BCNQ_PKT_INFO(v))

/* 2 REG_LOOPBACK_OPTION			(Offset 0x1420) */

#define BIT_LOOPACK_FAST_EDCA_EN			BIT(24)

/* 2 REG_AESIV_SETTING			(Offset 0x1424) */

#define BIT_SHIFT_AESIV_OFFSET				0
#define BIT_MASK_AESIV_OFFSET				0xfff
#define BIT_AESIV_OFFSET(x)				(((x) & BIT_MASK_AESIV_OFFSET) << BIT_SHIFT_AESIV_OFFSET)
#define BITS_AESIV_OFFSET				(BIT_MASK_AESIV_OFFSET << BIT_SHIFT_AESIV_OFFSET)
#define BIT_CLEAR_AESIV_OFFSET(x)			((x) & (~BITS_AESIV_OFFSET))
#define BIT_GET_AESIV_OFFSET(x)			(((x) >> BIT_SHIFT_AESIV_OFFSET) & BIT_MASK_AESIV_OFFSET)
#define BIT_SET_AESIV_OFFSET(x, v)			(BIT_CLEAR_AESIV_OFFSET(x) | BIT_AESIV_OFFSET(v))

/* 2 REG_BF0_TIME_SETTING			(Offset 0x1428) */

#define BIT_BF0_TIMER_SET				BIT(31)
#define BIT_BF0_TIMER_CLR				BIT(30)
#define BIT_BF0_UPDATE_EN				BIT(29)
#define BIT_BF0_TIMER_EN				BIT(28)

#define BIT_SHIFT_BF0_PRETIME_OVER			16
#define BIT_MASK_BF0_PRETIME_OVER			0xfff
#define BIT_BF0_PRETIME_OVER(x)			(((x) & BIT_MASK_BF0_PRETIME_OVER) << BIT_SHIFT_BF0_PRETIME_OVER)
#define BITS_BF0_PRETIME_OVER				(BIT_MASK_BF0_PRETIME_OVER << BIT_SHIFT_BF0_PRETIME_OVER)
#define BIT_CLEAR_BF0_PRETIME_OVER(x)			((x) & (~BITS_BF0_PRETIME_OVER))
#define BIT_GET_BF0_PRETIME_OVER(x)			(((x) >> BIT_SHIFT_BF0_PRETIME_OVER) & BIT_MASK_BF0_PRETIME_OVER)
#define BIT_SET_BF0_PRETIME_OVER(x, v)			(BIT_CLEAR_BF0_PRETIME_OVER(x) | BIT_BF0_PRETIME_OVER(v))

#define BIT_SHIFT_BF0_LIFETIME				0
#define BIT_MASK_BF0_LIFETIME				0xffff
#define BIT_BF0_LIFETIME(x)				(((x) & BIT_MASK_BF0_LIFETIME) << BIT_SHIFT_BF0_LIFETIME)
#define BITS_BF0_LIFETIME				(BIT_MASK_BF0_LIFETIME << BIT_SHIFT_BF0_LIFETIME)
#define BIT_CLEAR_BF0_LIFETIME(x)			((x) & (~BITS_BF0_LIFETIME))
#define BIT_GET_BF0_LIFETIME(x)			(((x) >> BIT_SHIFT_BF0_LIFETIME) & BIT_MASK_BF0_LIFETIME)
#define BIT_SET_BF0_LIFETIME(x, v)			(BIT_CLEAR_BF0_LIFETIME(x) | BIT_BF0_LIFETIME(v))

/* 2 REG_BF1_TIME_SETTING			(Offset 0x142C) */

#define BIT_BF1_TIMER_SET				BIT(31)
#define BIT_BF1_TIMER_CLR				BIT(30)
#define BIT_BF1_UPDATE_EN				BIT(29)
#define BIT_BF1_TIMER_EN				BIT(28)

#define BIT_SHIFT_BF1_PRETIME_OVER			16
#define BIT_MASK_BF1_PRETIME_OVER			0xfff
#define BIT_BF1_PRETIME_OVER(x)			(((x) & BIT_MASK_BF1_PRETIME_OVER) << BIT_SHIFT_BF1_PRETIME_OVER)
#define BITS_BF1_PRETIME_OVER				(BIT_MASK_BF1_PRETIME_OVER << BIT_SHIFT_BF1_PRETIME_OVER)
#define BIT_CLEAR_BF1_PRETIME_OVER(x)			((x) & (~BITS_BF1_PRETIME_OVER))
#define BIT_GET_BF1_PRETIME_OVER(x)			(((x) >> BIT_SHIFT_BF1_PRETIME_OVER) & BIT_MASK_BF1_PRETIME_OVER)
#define BIT_SET_BF1_PRETIME_OVER(x, v)			(BIT_CLEAR_BF1_PRETIME_OVER(x) | BIT_BF1_PRETIME_OVER(v))

#define BIT_SHIFT_BF1_LIFETIME				0
#define BIT_MASK_BF1_LIFETIME				0xffff
#define BIT_BF1_LIFETIME(x)				(((x) & BIT_MASK_BF1_LIFETIME) << BIT_SHIFT_BF1_LIFETIME)
#define BITS_BF1_LIFETIME				(BIT_MASK_BF1_LIFETIME << BIT_SHIFT_BF1_LIFETIME)
#define BIT_CLEAR_BF1_LIFETIME(x)			((x) & (~BITS_BF1_LIFETIME))
#define BIT_GET_BF1_LIFETIME(x)			(((x) >> BIT_SHIFT_BF1_LIFETIME) & BIT_MASK_BF1_LIFETIME)
#define BIT_SET_BF1_LIFETIME(x, v)			(BIT_CLEAR_BF1_LIFETIME(x) | BIT_BF1_LIFETIME(v))

/* 2 REG_BF_TIMEOUT_EN			(Offset 0x1430) */

#define BIT_EN_VHT_LDPC				BIT(9)
#define BIT_EN_HT_LDPC					BIT(8)
#define BIT_BF1_TIMEOUT_EN				BIT(1)
#define BIT_BF0_TIMEOUT_EN				BIT(0)

/* 2 REG_MACID_RELEASE0			(Offset 0x1434) */

#define BIT_SHIFT_MACID31_0_RELEASE			0
#define BIT_MASK_MACID31_0_RELEASE			0xffffffffL
#define BIT_MACID31_0_RELEASE(x)			(((x) & BIT_MASK_MACID31_0_RELEASE) << BIT_SHIFT_MACID31_0_RELEASE)
#define BITS_MACID31_0_RELEASE				(BIT_MASK_MACID31_0_RELEASE << BIT_SHIFT_MACID31_0_RELEASE)
#define BIT_CLEAR_MACID31_0_RELEASE(x)			((x) & (~BITS_MACID31_0_RELEASE))
#define BIT_GET_MACID31_0_RELEASE(x)			(((x) >> BIT_SHIFT_MACID31_0_RELEASE) & BIT_MASK_MACID31_0_RELEASE)
#define BIT_SET_MACID31_0_RELEASE(x, v)		(BIT_CLEAR_MACID31_0_RELEASE(x) | BIT_MACID31_0_RELEASE(v))

/* 2 REG_MACID_RELEASE1			(Offset 0x1438) */

#define BIT_SHIFT_MACID63_32_RELEASE			0
#define BIT_MASK_MACID63_32_RELEASE			0xffffffffL
#define BIT_MACID63_32_RELEASE(x)			(((x) & BIT_MASK_MACID63_32_RELEASE) << BIT_SHIFT_MACID63_32_RELEASE)
#define BITS_MACID63_32_RELEASE			(BIT_MASK_MACID63_32_RELEASE << BIT_SHIFT_MACID63_32_RELEASE)
#define BIT_CLEAR_MACID63_32_RELEASE(x)		((x) & (~BITS_MACID63_32_RELEASE))
#define BIT_GET_MACID63_32_RELEASE(x)			(((x) >> BIT_SHIFT_MACID63_32_RELEASE) & BIT_MASK_MACID63_32_RELEASE)
#define BIT_SET_MACID63_32_RELEASE(x, v)		(BIT_CLEAR_MACID63_32_RELEASE(x) | BIT_MACID63_32_RELEASE(v))

/* 2 REG_MACID_RELEASE2			(Offset 0x143C) */

#define BIT_SHIFT_MACID95_64_RELEASE			0
#define BIT_MASK_MACID95_64_RELEASE			0xffffffffL
#define BIT_MACID95_64_RELEASE(x)			(((x) & BIT_MASK_MACID95_64_RELEASE) << BIT_SHIFT_MACID95_64_RELEASE)
#define BITS_MACID95_64_RELEASE			(BIT_MASK_MACID95_64_RELEASE << BIT_SHIFT_MACID95_64_RELEASE)
#define BIT_CLEAR_MACID95_64_RELEASE(x)		((x) & (~BITS_MACID95_64_RELEASE))
#define BIT_GET_MACID95_64_RELEASE(x)			(((x) >> BIT_SHIFT_MACID95_64_RELEASE) & BIT_MASK_MACID95_64_RELEASE)
#define BIT_SET_MACID95_64_RELEASE(x, v)		(BIT_CLEAR_MACID95_64_RELEASE(x) | BIT_MACID95_64_RELEASE(v))

/* 2 REG_MACID_RELEASE3			(Offset 0x1440) */

#define BIT_SHIFT_MACID127_96_RELEASE			0
#define BIT_MASK_MACID127_96_RELEASE			0xffffffffL
#define BIT_MACID127_96_RELEASE(x)			(((x) & BIT_MASK_MACID127_96_RELEASE) << BIT_SHIFT_MACID127_96_RELEASE)
#define BITS_MACID127_96_RELEASE			(BIT_MASK_MACID127_96_RELEASE << BIT_SHIFT_MACID127_96_RELEASE)
#define BIT_CLEAR_MACID127_96_RELEASE(x)		((x) & (~BITS_MACID127_96_RELEASE))
#define BIT_GET_MACID127_96_RELEASE(x)			(((x) >> BIT_SHIFT_MACID127_96_RELEASE) & BIT_MASK_MACID127_96_RELEASE)
#define BIT_SET_MACID127_96_RELEASE(x, v)		(BIT_CLEAR_MACID127_96_RELEASE(x) | BIT_MACID127_96_RELEASE(v))

/* 2 REG_MACID_RELEASE_SETTING		(Offset 0x1444) */

#define BIT_MACID_VALUE				BIT(7)

#define BIT_SHIFT_MACID_OFFSET				0
#define BIT_MASK_MACID_OFFSET				0x7f
#define BIT_MACID_OFFSET(x)				(((x) & BIT_MASK_MACID_OFFSET) << BIT_SHIFT_MACID_OFFSET)
#define BITS_MACID_OFFSET				(BIT_MASK_MACID_OFFSET << BIT_SHIFT_MACID_OFFSET)
#define BIT_CLEAR_MACID_OFFSET(x)			((x) & (~BITS_MACID_OFFSET))
#define BIT_GET_MACID_OFFSET(x)			(((x) >> BIT_SHIFT_MACID_OFFSET) & BIT_MASK_MACID_OFFSET)
#define BIT_SET_MACID_OFFSET(x, v)			(BIT_CLEAR_MACID_OFFSET(x) | BIT_MACID_OFFSET(v))

/* 2 REG_FAST_EDCA_VOVI_SETTING		(Offset 0x1448) */

#define BIT_SHIFT_VI_FAST_EDCA_TO			24
#define BIT_MASK_VI_FAST_EDCA_TO			0xff
#define BIT_VI_FAST_EDCA_TO(x)				(((x) & BIT_MASK_VI_FAST_EDCA_TO) << BIT_SHIFT_VI_FAST_EDCA_TO)
#define BITS_VI_FAST_EDCA_TO				(BIT_MASK_VI_FAST_EDCA_TO << BIT_SHIFT_VI_FAST_EDCA_TO)
#define BIT_CLEAR_VI_FAST_EDCA_TO(x)			((x) & (~BITS_VI_FAST_EDCA_TO))
#define BIT_GET_VI_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_VI_FAST_EDCA_TO) & BIT_MASK_VI_FAST_EDCA_TO)
#define BIT_SET_VI_FAST_EDCA_TO(x, v)			(BIT_CLEAR_VI_FAST_EDCA_TO(x) | BIT_VI_FAST_EDCA_TO(v))

#define BIT_VI_THRESHOLD_SEL				BIT(23)

#define BIT_SHIFT_VI_FAST_EDCA_PKT_TH			16
#define BIT_MASK_VI_FAST_EDCA_PKT_TH			0x7f
#define BIT_VI_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_VI_FAST_EDCA_PKT_TH) << BIT_SHIFT_VI_FAST_EDCA_PKT_TH)
#define BITS_VI_FAST_EDCA_PKT_TH			(BIT_MASK_VI_FAST_EDCA_PKT_TH << BIT_SHIFT_VI_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_VI_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_VI_FAST_EDCA_PKT_TH))
#define BIT_GET_VI_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_VI_FAST_EDCA_PKT_TH) & BIT_MASK_VI_FAST_EDCA_PKT_TH)
#define BIT_SET_VI_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_VI_FAST_EDCA_PKT_TH(x) | BIT_VI_FAST_EDCA_PKT_TH(v))

#define BIT_SHIFT_VO_FAST_EDCA_TO			8
#define BIT_MASK_VO_FAST_EDCA_TO			0xff
#define BIT_VO_FAST_EDCA_TO(x)				(((x) & BIT_MASK_VO_FAST_EDCA_TO) << BIT_SHIFT_VO_FAST_EDCA_TO)
#define BITS_VO_FAST_EDCA_TO				(BIT_MASK_VO_FAST_EDCA_TO << BIT_SHIFT_VO_FAST_EDCA_TO)
#define BIT_CLEAR_VO_FAST_EDCA_TO(x)			((x) & (~BITS_VO_FAST_EDCA_TO))
#define BIT_GET_VO_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_VO_FAST_EDCA_TO) & BIT_MASK_VO_FAST_EDCA_TO)
#define BIT_SET_VO_FAST_EDCA_TO(x, v)			(BIT_CLEAR_VO_FAST_EDCA_TO(x) | BIT_VO_FAST_EDCA_TO(v))

#define BIT_VO_THRESHOLD_SEL				BIT(7)

#define BIT_SHIFT_VO_FAST_EDCA_PKT_TH			0
#define BIT_MASK_VO_FAST_EDCA_PKT_TH			0x7f
#define BIT_VO_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_VO_FAST_EDCA_PKT_TH) << BIT_SHIFT_VO_FAST_EDCA_PKT_TH)
#define BITS_VO_FAST_EDCA_PKT_TH			(BIT_MASK_VO_FAST_EDCA_PKT_TH << BIT_SHIFT_VO_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_VO_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_VO_FAST_EDCA_PKT_TH))
#define BIT_GET_VO_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_VO_FAST_EDCA_PKT_TH) & BIT_MASK_VO_FAST_EDCA_PKT_TH)
#define BIT_SET_VO_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_VO_FAST_EDCA_PKT_TH(x) | BIT_VO_FAST_EDCA_PKT_TH(v))

/* 2 REG_FAST_EDCA_BEBK_SETTING		(Offset 0x144C) */

#define BIT_SHIFT_BK_FAST_EDCA_TO			24
#define BIT_MASK_BK_FAST_EDCA_TO			0xff
#define BIT_BK_FAST_EDCA_TO(x)				(((x) & BIT_MASK_BK_FAST_EDCA_TO) << BIT_SHIFT_BK_FAST_EDCA_TO)
#define BITS_BK_FAST_EDCA_TO				(BIT_MASK_BK_FAST_EDCA_TO << BIT_SHIFT_BK_FAST_EDCA_TO)
#define BIT_CLEAR_BK_FAST_EDCA_TO(x)			((x) & (~BITS_BK_FAST_EDCA_TO))
#define BIT_GET_BK_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_BK_FAST_EDCA_TO) & BIT_MASK_BK_FAST_EDCA_TO)
#define BIT_SET_BK_FAST_EDCA_TO(x, v)			(BIT_CLEAR_BK_FAST_EDCA_TO(x) | BIT_BK_FAST_EDCA_TO(v))

#define BIT_BK_THRESHOLD_SEL				BIT(23)

#define BIT_SHIFT_BK_FAST_EDCA_PKT_TH			16
#define BIT_MASK_BK_FAST_EDCA_PKT_TH			0x7f
#define BIT_BK_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_BK_FAST_EDCA_PKT_TH) << BIT_SHIFT_BK_FAST_EDCA_PKT_TH)
#define BITS_BK_FAST_EDCA_PKT_TH			(BIT_MASK_BK_FAST_EDCA_PKT_TH << BIT_SHIFT_BK_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_BK_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_BK_FAST_EDCA_PKT_TH))
#define BIT_GET_BK_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_BK_FAST_EDCA_PKT_TH) & BIT_MASK_BK_FAST_EDCA_PKT_TH)
#define BIT_SET_BK_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_BK_FAST_EDCA_PKT_TH(x) | BIT_BK_FAST_EDCA_PKT_TH(v))

#define BIT_SHIFT_BE_FAST_EDCA_TO			8
#define BIT_MASK_BE_FAST_EDCA_TO			0xff
#define BIT_BE_FAST_EDCA_TO(x)				(((x) & BIT_MASK_BE_FAST_EDCA_TO) << BIT_SHIFT_BE_FAST_EDCA_TO)
#define BITS_BE_FAST_EDCA_TO				(BIT_MASK_BE_FAST_EDCA_TO << BIT_SHIFT_BE_FAST_EDCA_TO)
#define BIT_CLEAR_BE_FAST_EDCA_TO(x)			((x) & (~BITS_BE_FAST_EDCA_TO))
#define BIT_GET_BE_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_BE_FAST_EDCA_TO) & BIT_MASK_BE_FAST_EDCA_TO)
#define BIT_SET_BE_FAST_EDCA_TO(x, v)			(BIT_CLEAR_BE_FAST_EDCA_TO(x) | BIT_BE_FAST_EDCA_TO(v))

#define BIT_BE_THRESHOLD_SEL				BIT(7)

#define BIT_SHIFT_BE_FAST_EDCA_PKT_TH			0
#define BIT_MASK_BE_FAST_EDCA_PKT_TH			0x7f
#define BIT_BE_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_BE_FAST_EDCA_PKT_TH) << BIT_SHIFT_BE_FAST_EDCA_PKT_TH)
#define BITS_BE_FAST_EDCA_PKT_TH			(BIT_MASK_BE_FAST_EDCA_PKT_TH << BIT_SHIFT_BE_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_BE_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_BE_FAST_EDCA_PKT_TH))
#define BIT_GET_BE_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_BE_FAST_EDCA_PKT_TH) & BIT_MASK_BE_FAST_EDCA_PKT_TH)
#define BIT_SET_BE_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_BE_FAST_EDCA_PKT_TH(x) | BIT_BE_FAST_EDCA_PKT_TH(v))

/* 2 REG_MACID_DROP0				(Offset 0x1450) */

#define BIT_SHIFT_MACID31_0_DROP			0
#define BIT_MASK_MACID31_0_DROP			0xffffffffL
#define BIT_MACID31_0_DROP(x)				(((x) & BIT_MASK_MACID31_0_DROP) << BIT_SHIFT_MACID31_0_DROP)
#define BITS_MACID31_0_DROP				(BIT_MASK_MACID31_0_DROP << BIT_SHIFT_MACID31_0_DROP)
#define BIT_CLEAR_MACID31_0_DROP(x)			((x) & (~BITS_MACID31_0_DROP))
#define BIT_GET_MACID31_0_DROP(x)			(((x) >> BIT_SHIFT_MACID31_0_DROP) & BIT_MASK_MACID31_0_DROP)
#define BIT_SET_MACID31_0_DROP(x, v)			(BIT_CLEAR_MACID31_0_DROP(x) | BIT_MACID31_0_DROP(v))

/* 2 REG_MACID_DROP1				(Offset 0x1454) */

#define BIT_SHIFT_MACID63_32_DROP			0
#define BIT_MASK_MACID63_32_DROP			0xffffffffL
#define BIT_MACID63_32_DROP(x)				(((x) & BIT_MASK_MACID63_32_DROP) << BIT_SHIFT_MACID63_32_DROP)
#define BITS_MACID63_32_DROP				(BIT_MASK_MACID63_32_DROP << BIT_SHIFT_MACID63_32_DROP)
#define BIT_CLEAR_MACID63_32_DROP(x)			((x) & (~BITS_MACID63_32_DROP))
#define BIT_GET_MACID63_32_DROP(x)			(((x) >> BIT_SHIFT_MACID63_32_DROP) & BIT_MASK_MACID63_32_DROP)
#define BIT_SET_MACID63_32_DROP(x, v)			(BIT_CLEAR_MACID63_32_DROP(x) | BIT_MACID63_32_DROP(v))

/* 2 REG_MACID_DROP2				(Offset 0x1458) */

#define BIT_SHIFT_MACID95_64_DROP			0
#define BIT_MASK_MACID95_64_DROP			0xffffffffL
#define BIT_MACID95_64_DROP(x)				(((x) & BIT_MASK_MACID95_64_DROP) << BIT_SHIFT_MACID95_64_DROP)
#define BITS_MACID95_64_DROP				(BIT_MASK_MACID95_64_DROP << BIT_SHIFT_MACID95_64_DROP)
#define BIT_CLEAR_MACID95_64_DROP(x)			((x) & (~BITS_MACID95_64_DROP))
#define BIT_GET_MACID95_64_DROP(x)			(((x) >> BIT_SHIFT_MACID95_64_DROP) & BIT_MASK_MACID95_64_DROP)
#define BIT_SET_MACID95_64_DROP(x, v)			(BIT_CLEAR_MACID95_64_DROP(x) | BIT_MACID95_64_DROP(v))

/* 2 REG_MACID_DROP3				(Offset 0x145C) */

#define BIT_SHIFT_MACID127_96_DROP			0
#define BIT_MASK_MACID127_96_DROP			0xffffffffL
#define BIT_MACID127_96_DROP(x)			(((x) & BIT_MASK_MACID127_96_DROP) << BIT_SHIFT_MACID127_96_DROP)
#define BITS_MACID127_96_DROP				(BIT_MASK_MACID127_96_DROP << BIT_SHIFT_MACID127_96_DROP)
#define BIT_CLEAR_MACID127_96_DROP(x)			((x) & (~BITS_MACID127_96_DROP))
#define BIT_GET_MACID127_96_DROP(x)			(((x) >> BIT_SHIFT_MACID127_96_DROP) & BIT_MASK_MACID127_96_DROP)
#define BIT_SET_MACID127_96_DROP(x, v)			(BIT_CLEAR_MACID127_96_DROP(x) | BIT_MACID127_96_DROP(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_0		(Offset 0x1460) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_0		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_0(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_0) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0)
#define BITS_R_MACID_RELEASE_SUCCESS_0			(BIT_MASK_R_MACID_RELEASE_SUCCESS_0 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_0(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_0))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_0(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0) & BIT_MASK_R_MACID_RELEASE_SUCCESS_0)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_0(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_0(x) | BIT_R_MACID_RELEASE_SUCCESS_0(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_1		(Offset 0x1464) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_1		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_1(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_1) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1)
#define BITS_R_MACID_RELEASE_SUCCESS_1			(BIT_MASK_R_MACID_RELEASE_SUCCESS_1 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_1(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_1))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_1(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1) & BIT_MASK_R_MACID_RELEASE_SUCCESS_1)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_1(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_1(x) | BIT_R_MACID_RELEASE_SUCCESS_1(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_2		(Offset 0x1468) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_2		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_2(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_2) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2)
#define BITS_R_MACID_RELEASE_SUCCESS_2			(BIT_MASK_R_MACID_RELEASE_SUCCESS_2 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_2(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_2))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_2(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2) & BIT_MASK_R_MACID_RELEASE_SUCCESS_2)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_2(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_2(x) | BIT_R_MACID_RELEASE_SUCCESS_2(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_3		(Offset 0x146C) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_3		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_3(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_3) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3)
#define BITS_R_MACID_RELEASE_SUCCESS_3			(BIT_MASK_R_MACID_RELEASE_SUCCESS_3 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_3(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_3))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_3(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3) & BIT_MASK_R_MACID_RELEASE_SUCCESS_3)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_3(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_3(x) | BIT_R_MACID_RELEASE_SUCCESS_3(v))

/* 2 REG_MGQ_FIFO_WRITE_POINTER		(Offset 0x1470) */

#define BIT_MGQ_FIFO_OV				BIT(7)
#define BIT_MGQ_FIFO_WPTR_ERROR			BIT(6)
#define BIT_EN_MGQ_FIFO_LIFETIME			BIT(5)

#define BIT_SHIFT_MGQ_FIFO_WPTR			0
#define BIT_MASK_MGQ_FIFO_WPTR				0x1f
#define BIT_MGQ_FIFO_WPTR(x)				(((x) & BIT_MASK_MGQ_FIFO_WPTR) << BIT_SHIFT_MGQ_FIFO_WPTR)
#define BITS_MGQ_FIFO_WPTR				(BIT_MASK_MGQ_FIFO_WPTR << BIT_SHIFT_MGQ_FIFO_WPTR)
#define BIT_CLEAR_MGQ_FIFO_WPTR(x)			((x) & (~BITS_MGQ_FIFO_WPTR))
#define BIT_GET_MGQ_FIFO_WPTR(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_WPTR) & BIT_MASK_MGQ_FIFO_WPTR)
#define BIT_SET_MGQ_FIFO_WPTR(x, v)			(BIT_CLEAR_MGQ_FIFO_WPTR(x) | BIT_MGQ_FIFO_WPTR(v))

/* 2 REG_MGQ_FIFO_ENABLE			(Offset 0x1472) */

#define BIT_MGQ_FIFO_EN				BIT(15)

#define BIT_SHIFT_MGQ_FIFO_SIZE			14
#define BIT_MASK_MGQ_FIFO_SIZE				0x3
#define BIT_MGQ_FIFO_SIZE(x)				(((x) & BIT_MASK_MGQ_FIFO_SIZE) << BIT_SHIFT_MGQ_FIFO_SIZE)
#define BITS_MGQ_FIFO_SIZE				(BIT_MASK_MGQ_FIFO_SIZE << BIT_SHIFT_MGQ_FIFO_SIZE)
#define BIT_CLEAR_MGQ_FIFO_SIZE(x)			((x) & (~BITS_MGQ_FIFO_SIZE))
#define BIT_GET_MGQ_FIFO_SIZE(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_SIZE) & BIT_MASK_MGQ_FIFO_SIZE)
#define BIT_SET_MGQ_FIFO_SIZE(x, v)			(BIT_CLEAR_MGQ_FIFO_SIZE(x) | BIT_MGQ_FIFO_SIZE(v))

#define BIT_MGQ_FIFO_PAUSE				BIT(13)

#define BIT_SHIFT_MGQ_FIFO_PG_SIZE			12
#define BIT_MASK_MGQ_FIFO_PG_SIZE			0x7
#define BIT_MGQ_FIFO_PG_SIZE(x)			(((x) & BIT_MASK_MGQ_FIFO_PG_SIZE) << BIT_SHIFT_MGQ_FIFO_PG_SIZE)
#define BITS_MGQ_FIFO_PG_SIZE				(BIT_MASK_MGQ_FIFO_PG_SIZE << BIT_SHIFT_MGQ_FIFO_PG_SIZE)
#define BIT_CLEAR_MGQ_FIFO_PG_SIZE(x)			((x) & (~BITS_MGQ_FIFO_PG_SIZE))
#define BIT_GET_MGQ_FIFO_PG_SIZE(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_PG_SIZE) & BIT_MASK_MGQ_FIFO_PG_SIZE)
#define BIT_SET_MGQ_FIFO_PG_SIZE(x, v)			(BIT_CLEAR_MGQ_FIFO_PG_SIZE(x) | BIT_MGQ_FIFO_PG_SIZE(v))

#define BIT_SHIFT_MGQ_FIFO_RPTR			8
#define BIT_MASK_MGQ_FIFO_RPTR				0x1f
#define BIT_MGQ_FIFO_RPTR(x)				(((x) & BIT_MASK_MGQ_FIFO_RPTR) << BIT_SHIFT_MGQ_FIFO_RPTR)
#define BITS_MGQ_FIFO_RPTR				(BIT_MASK_MGQ_FIFO_RPTR << BIT_SHIFT_MGQ_FIFO_RPTR)
#define BIT_CLEAR_MGQ_FIFO_RPTR(x)			((x) & (~BITS_MGQ_FIFO_RPTR))
#define BIT_GET_MGQ_FIFO_RPTR(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_RPTR) & BIT_MASK_MGQ_FIFO_RPTR)
#define BIT_SET_MGQ_FIFO_RPTR(x, v)			(BIT_CLEAR_MGQ_FIFO_RPTR(x) | BIT_MGQ_FIFO_RPTR(v))

#define BIT_SHIFT_MGQ_FIFO_START_PG			0
#define BIT_MASK_MGQ_FIFO_START_PG			0xfff
#define BIT_MGQ_FIFO_START_PG(x)			(((x) & BIT_MASK_MGQ_FIFO_START_PG) << BIT_SHIFT_MGQ_FIFO_START_PG)
#define BITS_MGQ_FIFO_START_PG				(BIT_MASK_MGQ_FIFO_START_PG << BIT_SHIFT_MGQ_FIFO_START_PG)
#define BIT_CLEAR_MGQ_FIFO_START_PG(x)			((x) & (~BITS_MGQ_FIFO_START_PG))
#define BIT_GET_MGQ_FIFO_START_PG(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_START_PG) & BIT_MASK_MGQ_FIFO_START_PG)
#define BIT_SET_MGQ_FIFO_START_PG(x, v)		(BIT_CLEAR_MGQ_FIFO_START_PG(x) | BIT_MGQ_FIFO_START_PG(v))

/* 2 REG_MGQ_FIFO_RELEASE_INT_MASK		(Offset 0x1474) */

#define BIT_SHIFT_MGQ_FIFO_REL_INT_MASK		0
#define BIT_MASK_MGQ_FIFO_REL_INT_MASK			0xffff
#define BIT_MGQ_FIFO_REL_INT_MASK(x)			(((x) & BIT_MASK_MGQ_FIFO_REL_INT_MASK) << BIT_SHIFT_MGQ_FIFO_REL_INT_MASK)
#define BITS_MGQ_FIFO_REL_INT_MASK			(BIT_MASK_MGQ_FIFO_REL_INT_MASK << BIT_SHIFT_MGQ_FIFO_REL_INT_MASK)
#define BIT_CLEAR_MGQ_FIFO_REL_INT_MASK(x)		((x) & (~BITS_MGQ_FIFO_REL_INT_MASK))
#define BIT_GET_MGQ_FIFO_REL_INT_MASK(x)		(((x) >> BIT_SHIFT_MGQ_FIFO_REL_INT_MASK) & BIT_MASK_MGQ_FIFO_REL_INT_MASK)
#define BIT_SET_MGQ_FIFO_REL_INT_MASK(x, v)		(BIT_CLEAR_MGQ_FIFO_REL_INT_MASK(x) | BIT_MGQ_FIFO_REL_INT_MASK(v))

/* 2 REG_MGQ_FIFO_RELEASE_INT_FLAG		(Offset 0x1476) */

#define BIT_SHIFT_MGQ_FIFO_REL_INT_FLAG		0
#define BIT_MASK_MGQ_FIFO_REL_INT_FLAG			0xffff
#define BIT_MGQ_FIFO_REL_INT_FLAG(x)			(((x) & BIT_MASK_MGQ_FIFO_REL_INT_FLAG) << BIT_SHIFT_MGQ_FIFO_REL_INT_FLAG)
#define BITS_MGQ_FIFO_REL_INT_FLAG			(BIT_MASK_MGQ_FIFO_REL_INT_FLAG << BIT_SHIFT_MGQ_FIFO_REL_INT_FLAG)
#define BIT_CLEAR_MGQ_FIFO_REL_INT_FLAG(x)		((x) & (~BITS_MGQ_FIFO_REL_INT_FLAG))
#define BIT_GET_MGQ_FIFO_REL_INT_FLAG(x)		(((x) >> BIT_SHIFT_MGQ_FIFO_REL_INT_FLAG) & BIT_MASK_MGQ_FIFO_REL_INT_FLAG)
#define BIT_SET_MGQ_FIFO_REL_INT_FLAG(x, v)		(BIT_CLEAR_MGQ_FIFO_REL_INT_FLAG(x) | BIT_MGQ_FIFO_REL_INT_FLAG(v))

/* 2 REG_MGQ_FIFO_VALID_MAP			(Offset 0x1478) */

#define BIT_SHIFT_MGQ_FIFO_PKT_VALID_MAP		0
#define BIT_MASK_MGQ_FIFO_PKT_VALID_MAP		0xffff
#define BIT_MGQ_FIFO_PKT_VALID_MAP(x)			(((x) & BIT_MASK_MGQ_FIFO_PKT_VALID_MAP) << BIT_SHIFT_MGQ_FIFO_PKT_VALID_MAP)
#define BITS_MGQ_FIFO_PKT_VALID_MAP			(BIT_MASK_MGQ_FIFO_PKT_VALID_MAP << BIT_SHIFT_MGQ_FIFO_PKT_VALID_MAP)
#define BIT_CLEAR_MGQ_FIFO_PKT_VALID_MAP(x)		((x) & (~BITS_MGQ_FIFO_PKT_VALID_MAP))
#define BIT_GET_MGQ_FIFO_PKT_VALID_MAP(x)		(((x) >> BIT_SHIFT_MGQ_FIFO_PKT_VALID_MAP) & BIT_MASK_MGQ_FIFO_PKT_VALID_MAP)
#define BIT_SET_MGQ_FIFO_PKT_VALID_MAP(x, v)		(BIT_CLEAR_MGQ_FIFO_PKT_VALID_MAP(x) | BIT_MGQ_FIFO_PKT_VALID_MAP(v))

/* 2 REG_MGQ_FIFO_LIFETIME			(Offset 0x147A) */

#define BIT_SHIFT_MGQ_FIFO_LIFETIME			0
#define BIT_MASK_MGQ_FIFO_LIFETIME			0xffff
#define BIT_MGQ_FIFO_LIFETIME(x)			(((x) & BIT_MASK_MGQ_FIFO_LIFETIME) << BIT_SHIFT_MGQ_FIFO_LIFETIME)
#define BITS_MGQ_FIFO_LIFETIME				(BIT_MASK_MGQ_FIFO_LIFETIME << BIT_SHIFT_MGQ_FIFO_LIFETIME)
#define BIT_CLEAR_MGQ_FIFO_LIFETIME(x)			((x) & (~BITS_MGQ_FIFO_LIFETIME))
#define BIT_GET_MGQ_FIFO_LIFETIME(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_LIFETIME) & BIT_MASK_MGQ_FIFO_LIFETIME)
#define BIT_SET_MGQ_FIFO_LIFETIME(x, v)		(BIT_CLEAR_MGQ_FIFO_LIFETIME(x) | BIT_MGQ_FIFO_LIFETIME(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET (Offset 0x147C) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET	0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET	0x7f
#define BIT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x)	(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET)
#define BITS_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET	(BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x)	(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET) & BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x) | BIT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(v))

/* 2 REG_MU_TX_CTL				(Offset 0x14C0) */

#define BIT_R_MU_P1_WAIT_STATE_EN			BIT(16)

#define BIT_SHIFT_R_MU_RL				12
#define BIT_MASK_R_MU_RL				0xf
#define BIT_R_MU_RL(x)					(((x) & BIT_MASK_R_MU_RL) << BIT_SHIFT_R_MU_RL)
#define BITS_R_MU_RL					(BIT_MASK_R_MU_RL << BIT_SHIFT_R_MU_RL)
#define BIT_CLEAR_R_MU_RL(x)				((x) & (~BITS_R_MU_RL))
#define BIT_GET_R_MU_RL(x)				(((x) >> BIT_SHIFT_R_MU_RL) & BIT_MASK_R_MU_RL)
#define BIT_SET_R_MU_RL(x, v)				(BIT_CLEAR_R_MU_RL(x) | BIT_R_MU_RL(v))

#define BIT_R_FORCE_P1_RATEDOWN			BIT(11)

#define BIT_SHIFT_R_MU_TAB_SEL				8
#define BIT_MASK_R_MU_TAB_SEL				0x7
#define BIT_R_MU_TAB_SEL(x)				(((x) & BIT_MASK_R_MU_TAB_SEL) << BIT_SHIFT_R_MU_TAB_SEL)
#define BITS_R_MU_TAB_SEL				(BIT_MASK_R_MU_TAB_SEL << BIT_SHIFT_R_MU_TAB_SEL)
#define BIT_CLEAR_R_MU_TAB_SEL(x)			((x) & (~BITS_R_MU_TAB_SEL))
#define BIT_GET_R_MU_TAB_SEL(x)			(((x) >> BIT_SHIFT_R_MU_TAB_SEL) & BIT_MASK_R_MU_TAB_SEL)
#define BIT_SET_R_MU_TAB_SEL(x, v)			(BIT_CLEAR_R_MU_TAB_SEL(x) | BIT_R_MU_TAB_SEL(v))

#define BIT_R_EN_MU_MIMO				BIT(7)
#define BIT_R_EN_REVERS_GTAB				BIT(6)

#define BIT_SHIFT_R_MU_TABLE_VALID			0
#define BIT_MASK_R_MU_TABLE_VALID			0x3f
#define BIT_R_MU_TABLE_VALID(x)			(((x) & BIT_MASK_R_MU_TABLE_VALID) << BIT_SHIFT_R_MU_TABLE_VALID)
#define BITS_R_MU_TABLE_VALID				(BIT_MASK_R_MU_TABLE_VALID << BIT_SHIFT_R_MU_TABLE_VALID)
#define BIT_CLEAR_R_MU_TABLE_VALID(x)			((x) & (~BITS_R_MU_TABLE_VALID))
#define BIT_GET_R_MU_TABLE_VALID(x)			(((x) >> BIT_SHIFT_R_MU_TABLE_VALID) & BIT_MASK_R_MU_TABLE_VALID)
#define BIT_SET_R_MU_TABLE_VALID(x, v)			(BIT_CLEAR_R_MU_TABLE_VALID(x) | BIT_R_MU_TABLE_VALID(v))

/* 2 REG_MU_STA_GID_VLD			(Offset 0x14C4) */

#define BIT_SHIFT_R_MU_STA_GTAB_VALID			0
#define BIT_MASK_R_MU_STA_GTAB_VALID			0xffffffffL
#define BIT_R_MU_STA_GTAB_VALID(x)			(((x) & BIT_MASK_R_MU_STA_GTAB_VALID) << BIT_SHIFT_R_MU_STA_GTAB_VALID)
#define BITS_R_MU_STA_GTAB_VALID			(BIT_MASK_R_MU_STA_GTAB_VALID << BIT_SHIFT_R_MU_STA_GTAB_VALID)
#define BIT_CLEAR_R_MU_STA_GTAB_VALID(x)		((x) & (~BITS_R_MU_STA_GTAB_VALID))
#define BIT_GET_R_MU_STA_GTAB_VALID(x)			(((x) >> BIT_SHIFT_R_MU_STA_GTAB_VALID) & BIT_MASK_R_MU_STA_GTAB_VALID)
#define BIT_SET_R_MU_STA_GTAB_VALID(x, v)		(BIT_CLEAR_R_MU_STA_GTAB_VALID(x) | BIT_R_MU_STA_GTAB_VALID(v))

/* 2 REG_MU_STA_USER_POS_INFO		(Offset 0x14C8) */

#define BIT_SHIFT_R_MU_STA_GTAB_POSITION_L		0
#define BIT_MASK_R_MU_STA_GTAB_POSITION_L		0xffffffffL
#define BIT_R_MU_STA_GTAB_POSITION_L(x)		(((x) & BIT_MASK_R_MU_STA_GTAB_POSITION_L) << BIT_SHIFT_R_MU_STA_GTAB_POSITION_L)
#define BITS_R_MU_STA_GTAB_POSITION_L			(BIT_MASK_R_MU_STA_GTAB_POSITION_L << BIT_SHIFT_R_MU_STA_GTAB_POSITION_L)
#define BIT_CLEAR_R_MU_STA_GTAB_POSITION_L(x)		((x) & (~BITS_R_MU_STA_GTAB_POSITION_L))
#define BIT_GET_R_MU_STA_GTAB_POSITION_L(x)		(((x) >> BIT_SHIFT_R_MU_STA_GTAB_POSITION_L) & BIT_MASK_R_MU_STA_GTAB_POSITION_L)
#define BIT_SET_R_MU_STA_GTAB_POSITION_L(x, v)	(BIT_CLEAR_R_MU_STA_GTAB_POSITION_L(x) | BIT_R_MU_STA_GTAB_POSITION_L(v))

/* 2 REG_MU_STA_USER_POS_INFO_H		(Offset 0x14CC) */

#define BIT_SHIFT_R_MU_STA_GTAB_POSITION_H		0
#define BIT_MASK_R_MU_STA_GTAB_POSITION_H		0xffffffffL
#define BIT_R_MU_STA_GTAB_POSITION_H(x)		(((x) & BIT_MASK_R_MU_STA_GTAB_POSITION_H) << BIT_SHIFT_R_MU_STA_GTAB_POSITION_H)
#define BITS_R_MU_STA_GTAB_POSITION_H			(BIT_MASK_R_MU_STA_GTAB_POSITION_H << BIT_SHIFT_R_MU_STA_GTAB_POSITION_H)
#define BIT_CLEAR_R_MU_STA_GTAB_POSITION_H(x)		((x) & (~BITS_R_MU_STA_GTAB_POSITION_H))
#define BIT_GET_R_MU_STA_GTAB_POSITION_H(x)		(((x) >> BIT_SHIFT_R_MU_STA_GTAB_POSITION_H) & BIT_MASK_R_MU_STA_GTAB_POSITION_H)
#define BIT_SET_R_MU_STA_GTAB_POSITION_H(x, v)	(BIT_CLEAR_R_MU_STA_GTAB_POSITION_H(x) | BIT_R_MU_STA_GTAB_POSITION_H(v))

/* 2 REG_CHNL_INFO_CTRL			(Offset 0x14D0) */

#define BIT_CHNL_REF_RXNAV				BIT(7)
#define BIT_CHNL_REF_VBON				BIT(6)
#define BIT_CHNL_REF_EDCA				BIT(5)
#define BIT_CHNL_REF_CCA				BIT(4)
#define BIT_RST_CHNL_BUSY				BIT(3)
#define BIT_RST_CHNL_IDLE				BIT(2)
#define BIT_CHNL_INFO_RST				BIT(1)
#define BIT_ATM_AIRTIME_EN				BIT(0)

/* 2 REG_CHNL_IDLE_TIME			(Offset 0x14D4) */

#define BIT_SHIFT_CHNL_IDLE_TIME			0
#define BIT_MASK_CHNL_IDLE_TIME			0xffffffffL
#define BIT_CHNL_IDLE_TIME(x)				(((x) & BIT_MASK_CHNL_IDLE_TIME) << BIT_SHIFT_CHNL_IDLE_TIME)
#define BITS_CHNL_IDLE_TIME				(BIT_MASK_CHNL_IDLE_TIME << BIT_SHIFT_CHNL_IDLE_TIME)
#define BIT_CLEAR_CHNL_IDLE_TIME(x)			((x) & (~BITS_CHNL_IDLE_TIME))
#define BIT_GET_CHNL_IDLE_TIME(x)			(((x) >> BIT_SHIFT_CHNL_IDLE_TIME) & BIT_MASK_CHNL_IDLE_TIME)
#define BIT_SET_CHNL_IDLE_TIME(x, v)			(BIT_CLEAR_CHNL_IDLE_TIME(x) | BIT_CHNL_IDLE_TIME(v))

/* 2 REG_CHNL_BUSY_TIME			(Offset 0x14D8) */

#define BIT_SHIFT_CHNL_BUSY_TIME			0
#define BIT_MASK_CHNL_BUSY_TIME			0xffffffffL
#define BIT_CHNL_BUSY_TIME(x)				(((x) & BIT_MASK_CHNL_BUSY_TIME) << BIT_SHIFT_CHNL_BUSY_TIME)
#define BITS_CHNL_BUSY_TIME				(BIT_MASK_CHNL_BUSY_TIME << BIT_SHIFT_CHNL_BUSY_TIME)
#define BIT_CLEAR_CHNL_BUSY_TIME(x)			((x) & (~BITS_CHNL_BUSY_TIME))
#define BIT_GET_CHNL_BUSY_TIME(x)			(((x) >> BIT_SHIFT_CHNL_BUSY_TIME) & BIT_MASK_CHNL_BUSY_TIME)
#define BIT_SET_CHNL_BUSY_TIME(x, v)			(BIT_CLEAR_CHNL_BUSY_TIME(x) | BIT_CHNL_BUSY_TIME(v))

/* 2 REG_MU_TRX_DBG_CNT_V1			(Offset 0x14DC) */

#define BIT_MU_DNGCNT_RST				BIT(20)

#define BIT_SHIFT_MU_DNGCNT_SEL			16
#define BIT_MASK_MU_DNGCNT_SEL				0xf
#define BIT_MU_DNGCNT_SEL(x)				(((x) & BIT_MASK_MU_DNGCNT_SEL) << BIT_SHIFT_MU_DNGCNT_SEL)
#define BITS_MU_DNGCNT_SEL				(BIT_MASK_MU_DNGCNT_SEL << BIT_SHIFT_MU_DNGCNT_SEL)
#define BIT_CLEAR_MU_DNGCNT_SEL(x)			((x) & (~BITS_MU_DNGCNT_SEL))
#define BIT_GET_MU_DNGCNT_SEL(x)			(((x) >> BIT_SHIFT_MU_DNGCNT_SEL) & BIT_MASK_MU_DNGCNT_SEL)
#define BIT_SET_MU_DNGCNT_SEL(x, v)			(BIT_CLEAR_MU_DNGCNT_SEL(x) | BIT_MU_DNGCNT_SEL(v))

#define BIT_SHIFT_MU_DNGCNT				0
#define BIT_MASK_MU_DNGCNT				0xffff
#define BIT_MU_DNGCNT(x)				(((x) & BIT_MASK_MU_DNGCNT) << BIT_SHIFT_MU_DNGCNT)
#define BITS_MU_DNGCNT					(BIT_MASK_MU_DNGCNT << BIT_SHIFT_MU_DNGCNT)
#define BIT_CLEAR_MU_DNGCNT(x)				((x) & (~BITS_MU_DNGCNT))
#define BIT_GET_MU_DNGCNT(x)				(((x) >> BIT_SHIFT_MU_DNGCNT) & BIT_MASK_MU_DNGCNT)
#define BIT_SET_MU_DNGCNT(x, v)			(BIT_CLEAR_MU_DNGCNT(x) | BIT_MU_DNGCNT(v))

/* 2 REG_SU_DURATION				(Offset 0x14F0) */

#define BIT_SHIFT_SU_DURATION				0
#define BIT_MASK_SU_DURATION				0xffff
#define BIT_SU_DURATION(x)				(((x) & BIT_MASK_SU_DURATION) << BIT_SHIFT_SU_DURATION)
#define BITS_SU_DURATION				(BIT_MASK_SU_DURATION << BIT_SHIFT_SU_DURATION)
#define BIT_CLEAR_SU_DURATION(x)			((x) & (~BITS_SU_DURATION))
#define BIT_GET_SU_DURATION(x)				(((x) >> BIT_SHIFT_SU_DURATION) & BIT_MASK_SU_DURATION)
#define BIT_SET_SU_DURATION(x, v)			(BIT_CLEAR_SU_DURATION(x) | BIT_SU_DURATION(v))

/* 2 REG_MU_DURATION				(Offset 0x14F2) */

#define BIT_SHIFT_MU_DURATION				0
#define BIT_MASK_MU_DURATION				0xffff
#define BIT_MU_DURATION(x)				(((x) & BIT_MASK_MU_DURATION) << BIT_SHIFT_MU_DURATION)
#define BITS_MU_DURATION				(BIT_MASK_MU_DURATION << BIT_SHIFT_MU_DURATION)
#define BIT_CLEAR_MU_DURATION(x)			((x) & (~BITS_MU_DURATION))
#define BIT_GET_MU_DURATION(x)				(((x) >> BIT_SHIFT_MU_DURATION) & BIT_MASK_MU_DURATION)
#define BIT_SET_MU_DURATION(x, v)			(BIT_CLEAR_MU_DURATION(x) | BIT_MU_DURATION(v))

/* 2 REG_HW_NDPA_RTY_LIMIT			(Offset 0x14F4) */

#define BIT_SHIFT_HW_NDPA_RTY_LIMIT			0
#define BIT_MASK_HW_NDPA_RTY_LIMIT			0xf
#define BIT_HW_NDPA_RTY_LIMIT(x)			(((x) & BIT_MASK_HW_NDPA_RTY_LIMIT) << BIT_SHIFT_HW_NDPA_RTY_LIMIT)
#define BITS_HW_NDPA_RTY_LIMIT				(BIT_MASK_HW_NDPA_RTY_LIMIT << BIT_SHIFT_HW_NDPA_RTY_LIMIT)
#define BIT_CLEAR_HW_NDPA_RTY_LIMIT(x)			((x) & (~BITS_HW_NDPA_RTY_LIMIT))
#define BIT_GET_HW_NDPA_RTY_LIMIT(x)			(((x) >> BIT_SHIFT_HW_NDPA_RTY_LIMIT) & BIT_MASK_HW_NDPA_RTY_LIMIT)
#define BIT_SET_HW_NDPA_RTY_LIMIT(x, v)		(BIT_CLEAR_HW_NDPA_RTY_LIMIT(x) | BIT_HW_NDPA_RTY_LIMIT(v))

/* 2 REG_CPUMGQ_TX_TIMER			(Offset 0x1500) */

#define BIT_SHIFT_CPUMGQ_TX_TIMER_V1			0
#define BIT_MASK_CPUMGQ_TX_TIMER_V1			0xffffffffL
#define BIT_CPUMGQ_TX_TIMER_V1(x)			(((x) & BIT_MASK_CPUMGQ_TX_TIMER_V1) << BIT_SHIFT_CPUMGQ_TX_TIMER_V1)
#define BITS_CPUMGQ_TX_TIMER_V1			(BIT_MASK_CPUMGQ_TX_TIMER_V1 << BIT_SHIFT_CPUMGQ_TX_TIMER_V1)
#define BIT_CLEAR_CPUMGQ_TX_TIMER_V1(x)		((x) & (~BITS_CPUMGQ_TX_TIMER_V1))
#define BIT_GET_CPUMGQ_TX_TIMER_V1(x)			(((x) >> BIT_SHIFT_CPUMGQ_TX_TIMER_V1) & BIT_MASK_CPUMGQ_TX_TIMER_V1)
#define BIT_SET_CPUMGQ_TX_TIMER_V1(x, v)		(BIT_CLEAR_CPUMGQ_TX_TIMER_V1(x) | BIT_CPUMGQ_TX_TIMER_V1(v))

/* 2 REG_PS_TIMER_A				(Offset 0x1504) */

#define BIT_SHIFT_PS_TIMER_A_V1			0
#define BIT_MASK_PS_TIMER_A_V1				0xffffffffL
#define BIT_PS_TIMER_A_V1(x)				(((x) & BIT_MASK_PS_TIMER_A_V1) << BIT_SHIFT_PS_TIMER_A_V1)
#define BITS_PS_TIMER_A_V1				(BIT_MASK_PS_TIMER_A_V1 << BIT_SHIFT_PS_TIMER_A_V1)
#define BIT_CLEAR_PS_TIMER_A_V1(x)			((x) & (~BITS_PS_TIMER_A_V1))
#define BIT_GET_PS_TIMER_A_V1(x)			(((x) >> BIT_SHIFT_PS_TIMER_A_V1) & BIT_MASK_PS_TIMER_A_V1)
#define BIT_SET_PS_TIMER_A_V1(x, v)			(BIT_CLEAR_PS_TIMER_A_V1(x) | BIT_PS_TIMER_A_V1(v))

/* 2 REG_PS_TIMER_B				(Offset 0x1508) */

#define BIT_SHIFT_PS_TIMER_B_V1			0
#define BIT_MASK_PS_TIMER_B_V1				0xffffffffL
#define BIT_PS_TIMER_B_V1(x)				(((x) & BIT_MASK_PS_TIMER_B_V1) << BIT_SHIFT_PS_TIMER_B_V1)
#define BITS_PS_TIMER_B_V1				(BIT_MASK_PS_TIMER_B_V1 << BIT_SHIFT_PS_TIMER_B_V1)
#define BIT_CLEAR_PS_TIMER_B_V1(x)			((x) & (~BITS_PS_TIMER_B_V1))
#define BIT_GET_PS_TIMER_B_V1(x)			(((x) >> BIT_SHIFT_PS_TIMER_B_V1) & BIT_MASK_PS_TIMER_B_V1)
#define BIT_SET_PS_TIMER_B_V1(x, v)			(BIT_CLEAR_PS_TIMER_B_V1(x) | BIT_PS_TIMER_B_V1(v))

/* 2 REG_PS_TIMER_C				(Offset 0x150C) */

#define BIT_SHIFT_PS_TIMER_C_V1			0
#define BIT_MASK_PS_TIMER_C_V1				0xffffffffL
#define BIT_PS_TIMER_C_V1(x)				(((x) & BIT_MASK_PS_TIMER_C_V1) << BIT_SHIFT_PS_TIMER_C_V1)
#define BITS_PS_TIMER_C_V1				(BIT_MASK_PS_TIMER_C_V1 << BIT_SHIFT_PS_TIMER_C_V1)
#define BIT_CLEAR_PS_TIMER_C_V1(x)			((x) & (~BITS_PS_TIMER_C_V1))
#define BIT_GET_PS_TIMER_C_V1(x)			(((x) >> BIT_SHIFT_PS_TIMER_C_V1) & BIT_MASK_PS_TIMER_C_V1)
#define BIT_SET_PS_TIMER_C_V1(x, v)			(BIT_CLEAR_PS_TIMER_C_V1(x) | BIT_PS_TIMER_C_V1(v))

/* 2 REG_PS_TIMER_ABC_CPUMGQ_TIMER_CRTL	(Offset 0x1510) */

#define BIT_CPUMGQ_TIMER_EN				BIT(31)
#define BIT_CPUMGQ_TX_EN				BIT(28)

#define BIT_SHIFT_CPUMGQ_TIMER_TSF_SEL			24
#define BIT_MASK_CPUMGQ_TIMER_TSF_SEL			0x7
#define BIT_CPUMGQ_TIMER_TSF_SEL(x)			(((x) & BIT_MASK_CPUMGQ_TIMER_TSF_SEL) << BIT_SHIFT_CPUMGQ_TIMER_TSF_SEL)
#define BITS_CPUMGQ_TIMER_TSF_SEL			(BIT_MASK_CPUMGQ_TIMER_TSF_SEL << BIT_SHIFT_CPUMGQ_TIMER_TSF_SEL)
#define BIT_CLEAR_CPUMGQ_TIMER_TSF_SEL(x)		((x) & (~BITS_CPUMGQ_TIMER_TSF_SEL))
#define BIT_GET_CPUMGQ_TIMER_TSF_SEL(x)		(((x) >> BIT_SHIFT_CPUMGQ_TIMER_TSF_SEL) & BIT_MASK_CPUMGQ_TIMER_TSF_SEL)
#define BIT_SET_CPUMGQ_TIMER_TSF_SEL(x, v)		(BIT_CLEAR_CPUMGQ_TIMER_TSF_SEL(x) | BIT_CPUMGQ_TIMER_TSF_SEL(v))

#define BIT_PS_TIMER_C_EN				BIT(23)

#define BIT_SHIFT_PS_TIMER_C_TSF_SEL			16
#define BIT_MASK_PS_TIMER_C_TSF_SEL			0x7
#define BIT_PS_TIMER_C_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_C_TSF_SEL) << BIT_SHIFT_PS_TIMER_C_TSF_SEL)
#define BITS_PS_TIMER_C_TSF_SEL			(BIT_MASK_PS_TIMER_C_TSF_SEL << BIT_SHIFT_PS_TIMER_C_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_C_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_C_TSF_SEL))
#define BIT_GET_PS_TIMER_C_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_C_TSF_SEL) & BIT_MASK_PS_TIMER_C_TSF_SEL)
#define BIT_SET_PS_TIMER_C_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_C_TSF_SEL(x) | BIT_PS_TIMER_C_TSF_SEL(v))

#define BIT_PS_TIMER_B_EN				BIT(15)

#define BIT_SHIFT_PS_TIMER_B_TSF_SEL			8
#define BIT_MASK_PS_TIMER_B_TSF_SEL			0x7
#define BIT_PS_TIMER_B_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_B_TSF_SEL) << BIT_SHIFT_PS_TIMER_B_TSF_SEL)
#define BITS_PS_TIMER_B_TSF_SEL			(BIT_MASK_PS_TIMER_B_TSF_SEL << BIT_SHIFT_PS_TIMER_B_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_B_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_B_TSF_SEL))
#define BIT_GET_PS_TIMER_B_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_B_TSF_SEL) & BIT_MASK_PS_TIMER_B_TSF_SEL)
#define BIT_SET_PS_TIMER_B_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_B_TSF_SEL(x) | BIT_PS_TIMER_B_TSF_SEL(v))

#define BIT_PS_TIMER_A_EN				BIT(7)

#define BIT_SHIFT_PS_TIMER_A_TSF_SEL			0
#define BIT_MASK_PS_TIMER_A_TSF_SEL			0x7
#define BIT_PS_TIMER_A_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_A_TSF_SEL) << BIT_SHIFT_PS_TIMER_A_TSF_SEL)
#define BITS_PS_TIMER_A_TSF_SEL			(BIT_MASK_PS_TIMER_A_TSF_SEL << BIT_SHIFT_PS_TIMER_A_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_A_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_A_TSF_SEL))
#define BIT_GET_PS_TIMER_A_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_A_TSF_SEL) & BIT_MASK_PS_TIMER_A_TSF_SEL)
#define BIT_SET_PS_TIMER_A_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_A_TSF_SEL(x) | BIT_PS_TIMER_A_TSF_SEL(v))

/* 2 REG_CPUMGQ_TX_TIMER_EARLY		(Offset 0x1514) */

#define BIT_SHIFT_CPUMGQ_TX_TIMER_EARLY		0
#define BIT_MASK_CPUMGQ_TX_TIMER_EARLY			0xff
#define BIT_CPUMGQ_TX_TIMER_EARLY(x)			(((x) & BIT_MASK_CPUMGQ_TX_TIMER_EARLY) << BIT_SHIFT_CPUMGQ_TX_TIMER_EARLY)
#define BITS_CPUMGQ_TX_TIMER_EARLY			(BIT_MASK_CPUMGQ_TX_TIMER_EARLY << BIT_SHIFT_CPUMGQ_TX_TIMER_EARLY)
#define BIT_CLEAR_CPUMGQ_TX_TIMER_EARLY(x)		((x) & (~BITS_CPUMGQ_TX_TIMER_EARLY))
#define BIT_GET_CPUMGQ_TX_TIMER_EARLY(x)		(((x) >> BIT_SHIFT_CPUMGQ_TX_TIMER_EARLY) & BIT_MASK_CPUMGQ_TX_TIMER_EARLY)
#define BIT_SET_CPUMGQ_TX_TIMER_EARLY(x, v)		(BIT_CLEAR_CPUMGQ_TX_TIMER_EARLY(x) | BIT_CPUMGQ_TX_TIMER_EARLY(v))

/* 2 REG_PS_TIMER_A_EARLY			(Offset 0x1515) */

#define BIT_SHIFT_PS_TIMER_A_EARLY			0
#define BIT_MASK_PS_TIMER_A_EARLY			0xff
#define BIT_PS_TIMER_A_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_A_EARLY) << BIT_SHIFT_PS_TIMER_A_EARLY)
#define BITS_PS_TIMER_A_EARLY				(BIT_MASK_PS_TIMER_A_EARLY << BIT_SHIFT_PS_TIMER_A_EARLY)
#define BIT_CLEAR_PS_TIMER_A_EARLY(x)			((x) & (~BITS_PS_TIMER_A_EARLY))
#define BIT_GET_PS_TIMER_A_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_A_EARLY) & BIT_MASK_PS_TIMER_A_EARLY)
#define BIT_SET_PS_TIMER_A_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_A_EARLY(x) | BIT_PS_TIMER_A_EARLY(v))

/* 2 REG_PS_TIMER_B_EARLY			(Offset 0x1516) */

#define BIT_SHIFT_PS_TIMER_B_EARLY			0
#define BIT_MASK_PS_TIMER_B_EARLY			0xff
#define BIT_PS_TIMER_B_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_B_EARLY) << BIT_SHIFT_PS_TIMER_B_EARLY)
#define BITS_PS_TIMER_B_EARLY				(BIT_MASK_PS_TIMER_B_EARLY << BIT_SHIFT_PS_TIMER_B_EARLY)
#define BIT_CLEAR_PS_TIMER_B_EARLY(x)			((x) & (~BITS_PS_TIMER_B_EARLY))
#define BIT_GET_PS_TIMER_B_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_B_EARLY) & BIT_MASK_PS_TIMER_B_EARLY)
#define BIT_SET_PS_TIMER_B_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_B_EARLY(x) | BIT_PS_TIMER_B_EARLY(v))

/* 2 REG_PS_TIMER_C_EARLY			(Offset 0x1517) */

#define BIT_MAC_STOP_CPUMGQ				BIT(16)

#define BIT_SHIFT_PS_TIMER_C_EARLY			0
#define BIT_MASK_PS_TIMER_C_EARLY			0xff
#define BIT_PS_TIMER_C_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_C_EARLY) << BIT_SHIFT_PS_TIMER_C_EARLY)
#define BITS_PS_TIMER_C_EARLY				(BIT_MASK_PS_TIMER_C_EARLY << BIT_SHIFT_PS_TIMER_C_EARLY)
#define BIT_CLEAR_PS_TIMER_C_EARLY(x)			((x) & (~BITS_PS_TIMER_C_EARLY))
#define BIT_GET_PS_TIMER_C_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_C_EARLY) & BIT_MASK_PS_TIMER_C_EARLY)
#define BIT_SET_PS_TIMER_C_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_C_EARLY(x) | BIT_PS_TIMER_C_EARLY(v))

/* 2 REG_TSF_SYNC_ADJ			(Offset 0x1520) */

#define BIT_SHIFT_R_P0_TSFT_ADJ_VAL			16
#define BIT_MASK_R_P0_TSFT_ADJ_VAL			0xffff
#define BIT_R_P0_TSFT_ADJ_VAL(x)			(((x) & BIT_MASK_R_P0_TSFT_ADJ_VAL) << BIT_SHIFT_R_P0_TSFT_ADJ_VAL)
#define BITS_R_P0_TSFT_ADJ_VAL				(BIT_MASK_R_P0_TSFT_ADJ_VAL << BIT_SHIFT_R_P0_TSFT_ADJ_VAL)
#define BIT_CLEAR_R_P0_TSFT_ADJ_VAL(x)			((x) & (~BITS_R_P0_TSFT_ADJ_VAL))
#define BIT_GET_R_P0_TSFT_ADJ_VAL(x)			(((x) >> BIT_SHIFT_R_P0_TSFT_ADJ_VAL) & BIT_MASK_R_P0_TSFT_ADJ_VAL)
#define BIT_SET_R_P0_TSFT_ADJ_VAL(x, v)		(BIT_CLEAR_R_P0_TSFT_ADJ_VAL(x) | BIT_R_P0_TSFT_ADJ_VAL(v))

#define BIT_R_X_COMP_Y_OVER				BIT(8)

#define BIT_SHIFT_R_X_SYNC_SEL				3
#define BIT_MASK_R_X_SYNC_SEL				0x7
#define BIT_R_X_SYNC_SEL(x)				(((x) & BIT_MASK_R_X_SYNC_SEL) << BIT_SHIFT_R_X_SYNC_SEL)
#define BITS_R_X_SYNC_SEL				(BIT_MASK_R_X_SYNC_SEL << BIT_SHIFT_R_X_SYNC_SEL)
#define BIT_CLEAR_R_X_SYNC_SEL(x)			((x) & (~BITS_R_X_SYNC_SEL))
#define BIT_GET_R_X_SYNC_SEL(x)			(((x) >> BIT_SHIFT_R_X_SYNC_SEL) & BIT_MASK_R_X_SYNC_SEL)
#define BIT_SET_R_X_SYNC_SEL(x, v)			(BIT_CLEAR_R_X_SYNC_SEL(x) | BIT_R_X_SYNC_SEL(v))

#define BIT_SHIFT_R_SYNC_Y_SEL				0
#define BIT_MASK_R_SYNC_Y_SEL				0x7
#define BIT_R_SYNC_Y_SEL(x)				(((x) & BIT_MASK_R_SYNC_Y_SEL) << BIT_SHIFT_R_SYNC_Y_SEL)
#define BITS_R_SYNC_Y_SEL				(BIT_MASK_R_SYNC_Y_SEL << BIT_SHIFT_R_SYNC_Y_SEL)
#define BIT_CLEAR_R_SYNC_Y_SEL(x)			((x) & (~BITS_R_SYNC_Y_SEL))
#define BIT_GET_R_SYNC_Y_SEL(x)			(((x) >> BIT_SHIFT_R_SYNC_Y_SEL) & BIT_MASK_R_SYNC_Y_SEL)
#define BIT_SET_R_SYNC_Y_SEL(x, v)			(BIT_CLEAR_R_SYNC_Y_SEL(x) | BIT_R_SYNC_Y_SEL(v))

/* 2 REG_TSF_ADJ_VLAUE			(Offset 0x1524) */

#define BIT_SHIFT_R_CLI1_TSFT_ADJ_VAL			16
#define BIT_MASK_R_CLI1_TSFT_ADJ_VAL			0xffff
#define BIT_R_CLI1_TSFT_ADJ_VAL(x)			(((x) & BIT_MASK_R_CLI1_TSFT_ADJ_VAL) << BIT_SHIFT_R_CLI1_TSFT_ADJ_VAL)
#define BITS_R_CLI1_TSFT_ADJ_VAL			(BIT_MASK_R_CLI1_TSFT_ADJ_VAL << BIT_SHIFT_R_CLI1_TSFT_ADJ_VAL)
#define BIT_CLEAR_R_CLI1_TSFT_ADJ_VAL(x)		((x) & (~BITS_R_CLI1_TSFT_ADJ_VAL))
#define BIT_GET_R_CLI1_TSFT_ADJ_VAL(x)			(((x) >> BIT_SHIFT_R_CLI1_TSFT_ADJ_VAL) & BIT_MASK_R_CLI1_TSFT_ADJ_VAL)
#define BIT_SET_R_CLI1_TSFT_ADJ_VAL(x, v)		(BIT_CLEAR_R_CLI1_TSFT_ADJ_VAL(x) | BIT_R_CLI1_TSFT_ADJ_VAL(v))

#define BIT_SHIFT_R_CLI0_TSFT_ADJ_VAL			0
#define BIT_MASK_R_CLI0_TSFT_ADJ_VAL			0xffff
#define BIT_R_CLI0_TSFT_ADJ_VAL(x)			(((x) & BIT_MASK_R_CLI0_TSFT_ADJ_VAL) << BIT_SHIFT_R_CLI0_TSFT_ADJ_VAL)
#define BITS_R_CLI0_TSFT_ADJ_VAL			(BIT_MASK_R_CLI0_TSFT_ADJ_VAL << BIT_SHIFT_R_CLI0_TSFT_ADJ_VAL)
#define BIT_CLEAR_R_CLI0_TSFT_ADJ_VAL(x)		((x) & (~BITS_R_CLI0_TSFT_ADJ_VAL))
#define BIT_GET_R_CLI0_TSFT_ADJ_VAL(x)			(((x) >> BIT_SHIFT_R_CLI0_TSFT_ADJ_VAL) & BIT_MASK_R_CLI0_TSFT_ADJ_VAL)
#define BIT_SET_R_CLI0_TSFT_ADJ_VAL(x, v)		(BIT_CLEAR_R_CLI0_TSFT_ADJ_VAL(x) | BIT_R_CLI0_TSFT_ADJ_VAL(v))

/* 2 REG_TSF_ADJ_VLAUE_2			(Offset 0x1528) */

#define BIT_SHIFT_R_CLI3_TSFT_ADJ_VAL			16
#define BIT_MASK_R_CLI3_TSFT_ADJ_VAL			0xffff
#define BIT_R_CLI3_TSFT_ADJ_VAL(x)			(((x) & BIT_MASK_R_CLI3_TSFT_ADJ_VAL) << BIT_SHIFT_R_CLI3_TSFT_ADJ_VAL)
#define BITS_R_CLI3_TSFT_ADJ_VAL			(BIT_MASK_R_CLI3_TSFT_ADJ_VAL << BIT_SHIFT_R_CLI3_TSFT_ADJ_VAL)
#define BIT_CLEAR_R_CLI3_TSFT_ADJ_VAL(x)		((x) & (~BITS_R_CLI3_TSFT_ADJ_VAL))
#define BIT_GET_R_CLI3_TSFT_ADJ_VAL(x)			(((x) >> BIT_SHIFT_R_CLI3_TSFT_ADJ_VAL) & BIT_MASK_R_CLI3_TSFT_ADJ_VAL)
#define BIT_SET_R_CLI3_TSFT_ADJ_VAL(x, v)		(BIT_CLEAR_R_CLI3_TSFT_ADJ_VAL(x) | BIT_R_CLI3_TSFT_ADJ_VAL(v))

#define BIT_SHIFT_R_CLI2_TSFT_ADJ_VAL			0
#define BIT_MASK_R_CLI2_TSFT_ADJ_VAL			0xffff
#define BIT_R_CLI2_TSFT_ADJ_VAL(x)			(((x) & BIT_MASK_R_CLI2_TSFT_ADJ_VAL) << BIT_SHIFT_R_CLI2_TSFT_ADJ_VAL)
#define BITS_R_CLI2_TSFT_ADJ_VAL			(BIT_MASK_R_CLI2_TSFT_ADJ_VAL << BIT_SHIFT_R_CLI2_TSFT_ADJ_VAL)
#define BIT_CLEAR_R_CLI2_TSFT_ADJ_VAL(x)		((x) & (~BITS_R_CLI2_TSFT_ADJ_VAL))
#define BIT_GET_R_CLI2_TSFT_ADJ_VAL(x)			(((x) >> BIT_SHIFT_R_CLI2_TSFT_ADJ_VAL) & BIT_MASK_R_CLI2_TSFT_ADJ_VAL)
#define BIT_SET_R_CLI2_TSFT_ADJ_VAL(x, v)		(BIT_CLEAR_R_CLI2_TSFT_ADJ_VAL(x) | BIT_R_CLI2_TSFT_ADJ_VAL(v))

/* 2 REG_P2PPS_HW_AUTO_PAUSE_CTRL		(Offset 0x156C) */

#define BIT_P2PPS_NOA_STOP_TX_HANG			BIT(31)
#define BIT_P2PPS_MACID_PAUSE_EN			BIT(11)
#define BIT_P2PPS__MGQ_PAUSE				BIT(10)
#define BIT_P2PPS__HIQ_PAUSE				BIT(9)
#define BIT_P2PPS__BCNQ_PAUSE				BIT(8)

#define BIT_SHIFT_P2PPS_MACID_PAUSE			0
#define BIT_MASK_P2PPS_MACID_PAUSE			0xff
#define BIT_P2PPS_MACID_PAUSE(x)			(((x) & BIT_MASK_P2PPS_MACID_PAUSE) << BIT_SHIFT_P2PPS_MACID_PAUSE)
#define BITS_P2PPS_MACID_PAUSE				(BIT_MASK_P2PPS_MACID_PAUSE << BIT_SHIFT_P2PPS_MACID_PAUSE)
#define BIT_CLEAR_P2PPS_MACID_PAUSE(x)			((x) & (~BITS_P2PPS_MACID_PAUSE))
#define BIT_GET_P2PPS_MACID_PAUSE(x)			(((x) >> BIT_SHIFT_P2PPS_MACID_PAUSE) & BIT_MASK_P2PPS_MACID_PAUSE)
#define BIT_SET_P2PPS_MACID_PAUSE(x, v)		(BIT_CLEAR_P2PPS_MACID_PAUSE(x) | BIT_P2PPS_MACID_PAUSE(v))

/* 2 REG_P2PPS1_HW_AUTO_PAUSE_CTRL		(Offset 0x1570) */

#define BIT_P2PPS1_NOA_STOP_TX_HANG			BIT(31)
#define BIT_P2PPS1_MACID_PAUSE_EN			BIT(11)
#define BIT_P2PPS1__MGQ_PAUSE				BIT(10)
#define BIT_P2PPS1__HIQ_PAUSE				BIT(9)
#define BIT_P2PPS1__BCNQ_PAUSE				BIT(8)

#define BIT_SHIFT_P2PPS1_MACID_PAUSE			0
#define BIT_MASK_P2PPS1_MACID_PAUSE			0xff
#define BIT_P2PPS1_MACID_PAUSE(x)			(((x) & BIT_MASK_P2PPS1_MACID_PAUSE) << BIT_SHIFT_P2PPS1_MACID_PAUSE)
#define BITS_P2PPS1_MACID_PAUSE			(BIT_MASK_P2PPS1_MACID_PAUSE << BIT_SHIFT_P2PPS1_MACID_PAUSE)
#define BIT_CLEAR_P2PPS1_MACID_PAUSE(x)		((x) & (~BITS_P2PPS1_MACID_PAUSE))
#define BIT_GET_P2PPS1_MACID_PAUSE(x)			(((x) >> BIT_SHIFT_P2PPS1_MACID_PAUSE) & BIT_MASK_P2PPS1_MACID_PAUSE)
#define BIT_SET_P2PPS1_MACID_PAUSE(x, v)		(BIT_CLEAR_P2PPS1_MACID_PAUSE(x) | BIT_P2PPS1_MACID_PAUSE(v))

/* 2 REG_P2PPS2_HW_AUTO_PAUSE_CTRL		(Offset 0x1574) */

#define BIT_P2PPS2_NOA_STOP_TX_HANG			BIT(31)
#define BIT_P2PPS2_MACID_PAUSE_EN			BIT(11)
#define BIT_P2PPS2__MGQ_PAUSE				BIT(10)
#define BIT_P2PPS2__HIQ_PAUSE				BIT(9)
#define BIT_P2PPS2__BCNQ_PAUSE				BIT(8)

#define BIT_SHIFT_P2PPS2_MACID_PAUSE			0
#define BIT_MASK_P2PPS2_MACID_PAUSE			0xff
#define BIT_P2PPS2_MACID_PAUSE(x)			(((x) & BIT_MASK_P2PPS2_MACID_PAUSE) << BIT_SHIFT_P2PPS2_MACID_PAUSE)
#define BITS_P2PPS2_MACID_PAUSE			(BIT_MASK_P2PPS2_MACID_PAUSE << BIT_SHIFT_P2PPS2_MACID_PAUSE)
#define BIT_CLEAR_P2PPS2_MACID_PAUSE(x)		((x) & (~BITS_P2PPS2_MACID_PAUSE))
#define BIT_GET_P2PPS2_MACID_PAUSE(x)			(((x) >> BIT_SHIFT_P2PPS2_MACID_PAUSE) & BIT_MASK_P2PPS2_MACID_PAUSE)
#define BIT_SET_P2PPS2_MACID_PAUSE(x, v)		(BIT_CLEAR_P2PPS2_MACID_PAUSE(x) | BIT_P2PPS2_MACID_PAUSE(v))

/* 2 REG_BCN_PSR_RPT2			(Offset 0x1600) */

#define BIT_SHIFT_DTIM_CNT2				24
#define BIT_MASK_DTIM_CNT2				0xff
#define BIT_DTIM_CNT2(x)				(((x) & BIT_MASK_DTIM_CNT2) << BIT_SHIFT_DTIM_CNT2)
#define BITS_DTIM_CNT2					(BIT_MASK_DTIM_CNT2 << BIT_SHIFT_DTIM_CNT2)
#define BIT_CLEAR_DTIM_CNT2(x)				((x) & (~BITS_DTIM_CNT2))
#define BIT_GET_DTIM_CNT2(x)				(((x) >> BIT_SHIFT_DTIM_CNT2) & BIT_MASK_DTIM_CNT2)
#define BIT_SET_DTIM_CNT2(x, v)			(BIT_CLEAR_DTIM_CNT2(x) | BIT_DTIM_CNT2(v))

#define BIT_SHIFT_DTIM_PERIOD2				16
#define BIT_MASK_DTIM_PERIOD2				0xff
#define BIT_DTIM_PERIOD2(x)				(((x) & BIT_MASK_DTIM_PERIOD2) << BIT_SHIFT_DTIM_PERIOD2)
#define BITS_DTIM_PERIOD2				(BIT_MASK_DTIM_PERIOD2 << BIT_SHIFT_DTIM_PERIOD2)
#define BIT_CLEAR_DTIM_PERIOD2(x)			((x) & (~BITS_DTIM_PERIOD2))
#define BIT_GET_DTIM_PERIOD2(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD2) & BIT_MASK_DTIM_PERIOD2)
#define BIT_SET_DTIM_PERIOD2(x, v)			(BIT_CLEAR_DTIM_PERIOD2(x) | BIT_DTIM_PERIOD2(v))

#define BIT_DTIM2					BIT(15)
#define BIT_TIM2					BIT(14)

#define BIT_SHIFT_PS_AID_2				0
#define BIT_MASK_PS_AID_2				0x7ff
#define BIT_PS_AID_2(x)				(((x) & BIT_MASK_PS_AID_2) << BIT_SHIFT_PS_AID_2)
#define BITS_PS_AID_2					(BIT_MASK_PS_AID_2 << BIT_SHIFT_PS_AID_2)
#define BIT_CLEAR_PS_AID_2(x)				((x) & (~BITS_PS_AID_2))
#define BIT_GET_PS_AID_2(x)				(((x) >> BIT_SHIFT_PS_AID_2) & BIT_MASK_PS_AID_2)
#define BIT_SET_PS_AID_2(x, v)				(BIT_CLEAR_PS_AID_2(x) | BIT_PS_AID_2(v))

/* 2 REG_BCN_PSR_RPT3			(Offset 0x1604) */

#define BIT_SHIFT_DTIM_CNT3				24
#define BIT_MASK_DTIM_CNT3				0xff
#define BIT_DTIM_CNT3(x)				(((x) & BIT_MASK_DTIM_CNT3) << BIT_SHIFT_DTIM_CNT3)
#define BITS_DTIM_CNT3					(BIT_MASK_DTIM_CNT3 << BIT_SHIFT_DTIM_CNT3)
#define BIT_CLEAR_DTIM_CNT3(x)				((x) & (~BITS_DTIM_CNT3))
#define BIT_GET_DTIM_CNT3(x)				(((x) >> BIT_SHIFT_DTIM_CNT3) & BIT_MASK_DTIM_CNT3)
#define BIT_SET_DTIM_CNT3(x, v)			(BIT_CLEAR_DTIM_CNT3(x) | BIT_DTIM_CNT3(v))

#define BIT_SHIFT_DTIM_PERIOD3				16
#define BIT_MASK_DTIM_PERIOD3				0xff
#define BIT_DTIM_PERIOD3(x)				(((x) & BIT_MASK_DTIM_PERIOD3) << BIT_SHIFT_DTIM_PERIOD3)
#define BITS_DTIM_PERIOD3				(BIT_MASK_DTIM_PERIOD3 << BIT_SHIFT_DTIM_PERIOD3)
#define BIT_CLEAR_DTIM_PERIOD3(x)			((x) & (~BITS_DTIM_PERIOD3))
#define BIT_GET_DTIM_PERIOD3(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD3) & BIT_MASK_DTIM_PERIOD3)
#define BIT_SET_DTIM_PERIOD3(x, v)			(BIT_CLEAR_DTIM_PERIOD3(x) | BIT_DTIM_PERIOD3(v))

#define BIT_DTIM3					BIT(15)
#define BIT_TIM3					BIT(14)

#define BIT_SHIFT_PS_AID_3				0
#define BIT_MASK_PS_AID_3				0x7ff
#define BIT_PS_AID_3(x)				(((x) & BIT_MASK_PS_AID_3) << BIT_SHIFT_PS_AID_3)
#define BITS_PS_AID_3					(BIT_MASK_PS_AID_3 << BIT_SHIFT_PS_AID_3)
#define BIT_CLEAR_PS_AID_3(x)				((x) & (~BITS_PS_AID_3))
#define BIT_GET_PS_AID_3(x)				(((x) >> BIT_SHIFT_PS_AID_3) & BIT_MASK_PS_AID_3)
#define BIT_SET_PS_AID_3(x, v)				(BIT_CLEAR_PS_AID_3(x) | BIT_PS_AID_3(v))

/* 2 REG_BCN_PSR_RPT4			(Offset 0x1608) */

#define BIT_SHIFT_DTIM_CNT4				24
#define BIT_MASK_DTIM_CNT4				0xff
#define BIT_DTIM_CNT4(x)				(((x) & BIT_MASK_DTIM_CNT4) << BIT_SHIFT_DTIM_CNT4)
#define BITS_DTIM_CNT4					(BIT_MASK_DTIM_CNT4 << BIT_SHIFT_DTIM_CNT4)
#define BIT_CLEAR_DTIM_CNT4(x)				((x) & (~BITS_DTIM_CNT4))
#define BIT_GET_DTIM_CNT4(x)				(((x) >> BIT_SHIFT_DTIM_CNT4) & BIT_MASK_DTIM_CNT4)
#define BIT_SET_DTIM_CNT4(x, v)			(BIT_CLEAR_DTIM_CNT4(x) | BIT_DTIM_CNT4(v))

#define BIT_SHIFT_DTIM_PERIOD4				16
#define BIT_MASK_DTIM_PERIOD4				0xff
#define BIT_DTIM_PERIOD4(x)				(((x) & BIT_MASK_DTIM_PERIOD4) << BIT_SHIFT_DTIM_PERIOD4)
#define BITS_DTIM_PERIOD4				(BIT_MASK_DTIM_PERIOD4 << BIT_SHIFT_DTIM_PERIOD4)
#define BIT_CLEAR_DTIM_PERIOD4(x)			((x) & (~BITS_DTIM_PERIOD4))
#define BIT_GET_DTIM_PERIOD4(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD4) & BIT_MASK_DTIM_PERIOD4)
#define BIT_SET_DTIM_PERIOD4(x, v)			(BIT_CLEAR_DTIM_PERIOD4(x) | BIT_DTIM_PERIOD4(v))

#define BIT_DTIM4					BIT(15)
#define BIT_TIM4					BIT(14)

#define BIT_SHIFT_PS_AID_4				0
#define BIT_MASK_PS_AID_4				0x7ff
#define BIT_PS_AID_4(x)				(((x) & BIT_MASK_PS_AID_4) << BIT_SHIFT_PS_AID_4)
#define BITS_PS_AID_4					(BIT_MASK_PS_AID_4 << BIT_SHIFT_PS_AID_4)
#define BIT_CLEAR_PS_AID_4(x)				((x) & (~BITS_PS_AID_4))
#define BIT_GET_PS_AID_4(x)				(((x) >> BIT_SHIFT_PS_AID_4) & BIT_MASK_PS_AID_4)
#define BIT_SET_PS_AID_4(x, v)				(BIT_CLEAR_PS_AID_4(x) | BIT_PS_AID_4(v))

/* 2 REG_A1_ADDR_MASK			(Offset 0x160C) */

#define BIT_SHIFT_A1_ADDR_MASK				0
#define BIT_MASK_A1_ADDR_MASK				0xffffffffL
#define BIT_A1_ADDR_MASK(x)				(((x) & BIT_MASK_A1_ADDR_MASK) << BIT_SHIFT_A1_ADDR_MASK)
#define BITS_A1_ADDR_MASK				(BIT_MASK_A1_ADDR_MASK << BIT_SHIFT_A1_ADDR_MASK)
#define BIT_CLEAR_A1_ADDR_MASK(x)			((x) & (~BITS_A1_ADDR_MASK))
#define BIT_GET_A1_ADDR_MASK(x)			(((x) >> BIT_SHIFT_A1_ADDR_MASK) & BIT_MASK_A1_ADDR_MASK)
#define BIT_SET_A1_ADDR_MASK(x, v)			(BIT_CLEAR_A1_ADDR_MASK(x) | BIT_A1_ADDR_MASK(v))

/* 2 REG_RXPSF_CTRL				(Offset 0x1610) */

#define BIT_RXGCK_FIFOTHR_EN				BIT(28)

#define BIT_SHIFT_RXGCK_VHT_FIFOTHR			26
#define BIT_MASK_RXGCK_VHT_FIFOTHR			0x3
#define BIT_RXGCK_VHT_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_VHT_FIFOTHR) << BIT_SHIFT_RXGCK_VHT_FIFOTHR)
#define BITS_RXGCK_VHT_FIFOTHR				(BIT_MASK_RXGCK_VHT_FIFOTHR << BIT_SHIFT_RXGCK_VHT_FIFOTHR)
#define BIT_CLEAR_RXGCK_VHT_FIFOTHR(x)			((x) & (~BITS_RXGCK_VHT_FIFOTHR))
#define BIT_GET_RXGCK_VHT_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_VHT_FIFOTHR) & BIT_MASK_RXGCK_VHT_FIFOTHR)
#define BIT_SET_RXGCK_VHT_FIFOTHR(x, v)		(BIT_CLEAR_RXGCK_VHT_FIFOTHR(x) | BIT_RXGCK_VHT_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_HT_FIFOTHR			24
#define BIT_MASK_RXGCK_HT_FIFOTHR			0x3
#define BIT_RXGCK_HT_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_HT_FIFOTHR) << BIT_SHIFT_RXGCK_HT_FIFOTHR)
#define BITS_RXGCK_HT_FIFOTHR				(BIT_MASK_RXGCK_HT_FIFOTHR << BIT_SHIFT_RXGCK_HT_FIFOTHR)
#define BIT_CLEAR_RXGCK_HT_FIFOTHR(x)			((x) & (~BITS_RXGCK_HT_FIFOTHR))
#define BIT_GET_RXGCK_HT_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_HT_FIFOTHR) & BIT_MASK_RXGCK_HT_FIFOTHR)
#define BIT_SET_RXGCK_HT_FIFOTHR(x, v)			(BIT_CLEAR_RXGCK_HT_FIFOTHR(x) | BIT_RXGCK_HT_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_OFDM_FIFOTHR			22
#define BIT_MASK_RXGCK_OFDM_FIFOTHR			0x3
#define BIT_RXGCK_OFDM_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_OFDM_FIFOTHR) << BIT_SHIFT_RXGCK_OFDM_FIFOTHR)
#define BITS_RXGCK_OFDM_FIFOTHR			(BIT_MASK_RXGCK_OFDM_FIFOTHR << BIT_SHIFT_RXGCK_OFDM_FIFOTHR)
#define BIT_CLEAR_RXGCK_OFDM_FIFOTHR(x)		((x) & (~BITS_RXGCK_OFDM_FIFOTHR))
#define BIT_GET_RXGCK_OFDM_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_OFDM_FIFOTHR) & BIT_MASK_RXGCK_OFDM_FIFOTHR)
#define BIT_SET_RXGCK_OFDM_FIFOTHR(x, v)		(BIT_CLEAR_RXGCK_OFDM_FIFOTHR(x) | BIT_RXGCK_OFDM_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_CCK_FIFOTHR			20
#define BIT_MASK_RXGCK_CCK_FIFOTHR			0x3
#define BIT_RXGCK_CCK_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_CCK_FIFOTHR) << BIT_SHIFT_RXGCK_CCK_FIFOTHR)
#define BITS_RXGCK_CCK_FIFOTHR				(BIT_MASK_RXGCK_CCK_FIFOTHR << BIT_SHIFT_RXGCK_CCK_FIFOTHR)
#define BIT_CLEAR_RXGCK_CCK_FIFOTHR(x)			((x) & (~BITS_RXGCK_CCK_FIFOTHR))
#define BIT_GET_RXGCK_CCK_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_CCK_FIFOTHR) & BIT_MASK_RXGCK_CCK_FIFOTHR)
#define BIT_SET_RXGCK_CCK_FIFOTHR(x, v)		(BIT_CLEAR_RXGCK_CCK_FIFOTHR(x) | BIT_RXGCK_CCK_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_ENTRY_DELAY			17
#define BIT_MASK_RXGCK_ENTRY_DELAY			0x7
#define BIT_RXGCK_ENTRY_DELAY(x)			(((x) & BIT_MASK_RXGCK_ENTRY_DELAY) << BIT_SHIFT_RXGCK_ENTRY_DELAY)
#define BITS_RXGCK_ENTRY_DELAY				(BIT_MASK_RXGCK_ENTRY_DELAY << BIT_SHIFT_RXGCK_ENTRY_DELAY)
#define BIT_CLEAR_RXGCK_ENTRY_DELAY(x)			((x) & (~BITS_RXGCK_ENTRY_DELAY))
#define BIT_GET_RXGCK_ENTRY_DELAY(x)			(((x) >> BIT_SHIFT_RXGCK_ENTRY_DELAY) & BIT_MASK_RXGCK_ENTRY_DELAY)
#define BIT_SET_RXGCK_ENTRY_DELAY(x, v)		(BIT_CLEAR_RXGCK_ENTRY_DELAY(x) | BIT_RXGCK_ENTRY_DELAY(v))

#define BIT_RXGCK_OFDMCCA_EN				BIT(16)

#define BIT_SHIFT_RXPSF_PKTLENTHR			13
#define BIT_MASK_RXPSF_PKTLENTHR			0x7
#define BIT_RXPSF_PKTLENTHR(x)				(((x) & BIT_MASK_RXPSF_PKTLENTHR) << BIT_SHIFT_RXPSF_PKTLENTHR)
#define BITS_RXPSF_PKTLENTHR				(BIT_MASK_RXPSF_PKTLENTHR << BIT_SHIFT_RXPSF_PKTLENTHR)
#define BIT_CLEAR_RXPSF_PKTLENTHR(x)			((x) & (~BITS_RXPSF_PKTLENTHR))
#define BIT_GET_RXPSF_PKTLENTHR(x)			(((x) >> BIT_SHIFT_RXPSF_PKTLENTHR) & BIT_MASK_RXPSF_PKTLENTHR)
#define BIT_SET_RXPSF_PKTLENTHR(x, v)			(BIT_CLEAR_RXPSF_PKTLENTHR(x) | BIT_RXPSF_PKTLENTHR(v))

#define BIT_RXPSF_CTRLEN				BIT(12)
#define BIT_RXPSF_VHTCHKEN				BIT(11)
#define BIT_RXPSF_HTCHKEN				BIT(10)
#define BIT_RXPSF_OFDMCHKEN				BIT(9)
#define BIT_RXPSF_CCKCHKEN				BIT(8)
#define BIT_RXPSF_OFDMRST				BIT(7)
#define BIT_RXPSF_CCKRST				BIT(6)
#define BIT_RXPSF_MHCHKEN				BIT(5)
#define BIT_RXPSF_CONT_ERRCHKEN			BIT(4)
#define BIT_RXPSF_ALL_ERRCHKEN				BIT(3)

#define BIT_SHIFT_RXPSF_ERRTHR				0
#define BIT_MASK_RXPSF_ERRTHR				0x7
#define BIT_RXPSF_ERRTHR(x)				(((x) & BIT_MASK_RXPSF_ERRTHR) << BIT_SHIFT_RXPSF_ERRTHR)
#define BITS_RXPSF_ERRTHR				(BIT_MASK_RXPSF_ERRTHR << BIT_SHIFT_RXPSF_ERRTHR)
#define BIT_CLEAR_RXPSF_ERRTHR(x)			((x) & (~BITS_RXPSF_ERRTHR))
#define BIT_GET_RXPSF_ERRTHR(x)			(((x) >> BIT_SHIFT_RXPSF_ERRTHR) & BIT_MASK_RXPSF_ERRTHR)
#define BIT_SET_RXPSF_ERRTHR(x, v)			(BIT_CLEAR_RXPSF_ERRTHR(x) | BIT_RXPSF_ERRTHR(v))

/* 2 REG_RXPSF_TYPE_CTRL			(Offset 0x1614) */

#define BIT_RXPSF_DATA15EN				BIT(31)
#define BIT_RXPSF_DATA14EN				BIT(30)
#define BIT_RXPSF_DATA13EN				BIT(29)
#define BIT_RXPSF_DATA12EN				BIT(28)
#define BIT_RXPSF_DATA11EN				BIT(27)
#define BIT_RXPSF_DATA10EN				BIT(26)
#define BIT_RXPSF_DATA9EN				BIT(25)
#define BIT_RXPSF_DATA8EN				BIT(24)
#define BIT_RXPSF_DATA7EN				BIT(23)
#define BIT_RXPSF_DATA6EN				BIT(22)
#define BIT_RXPSF_DATA5EN				BIT(21)
#define BIT_RXPSF_DATA4EN				BIT(20)
#define BIT_RXPSF_DATA3EN				BIT(19)
#define BIT_RXPSF_DATA2EN				BIT(18)
#define BIT_RXPSF_DATA1EN				BIT(17)
#define BIT_RXPSF_DATA0EN				BIT(16)
#define BIT_RXPSF_MGT15EN				BIT(15)
#define BIT_RXPSF_MGT14EN				BIT(14)
#define BIT_RXPSF_MGT13EN				BIT(13)
#define BIT_RXPSF_MGT12EN				BIT(12)
#define BIT_RXPSF_MGT11EN				BIT(11)
#define BIT_RXPSF_MGT10EN				BIT(10)
#define BIT_RXPSF_MGT9EN				BIT(9)
#define BIT_RXPSF_MGT8EN				BIT(8)
#define BIT_RXPSF_MGT7EN				BIT(7)
#define BIT_RXPSF_MGT6EN				BIT(6)
#define BIT_RXPSF_MGT5EN				BIT(5)
#define BIT_RXPSF_MGT4EN				BIT(4)
#define BIT_RXPSF_MGT3EN				BIT(3)
#define BIT_RXPSF_MGT2EN				BIT(2)
#define BIT_RXPSF_MGT1EN				BIT(1)
#define BIT_RXPSF_MGT0EN				BIT(0)

/* 2 REG_CAM_ACCESS_CTRL			(Offset 0x1618) */

#define BIT_INDIRECT_ERR				BIT(6)
#define BIT_DIRECT_ERR					BIT(5)
#define BIT_DIR_ACCESS_EN_RX_BA			BIT(4)
#define BIT_DIR_ACCESS_EN_MBSSIDCAM			BIT(3)
#define BIT_DIR_ACCESS_EN_KEY				BIT(2)
#define BIT_DIR_ACCESS_EN_WOWLAN			BIT(1)
#define BIT_DIR_ACCESS_EN_FW_FILTER			BIT(0)

/* 2 REG_HT_SND_REF_RATE			(Offset 0x161C) */

#define BIT_SHIFT_WMAC_HT_CSI_RATE			0
#define BIT_MASK_WMAC_HT_CSI_RATE			0x3f
#define BIT_WMAC_HT_CSI_RATE(x)			(((x) & BIT_MASK_WMAC_HT_CSI_RATE) << BIT_SHIFT_WMAC_HT_CSI_RATE)
#define BITS_WMAC_HT_CSI_RATE				(BIT_MASK_WMAC_HT_CSI_RATE << BIT_SHIFT_WMAC_HT_CSI_RATE)
#define BIT_CLEAR_WMAC_HT_CSI_RATE(x)			((x) & (~BITS_WMAC_HT_CSI_RATE))
#define BIT_GET_WMAC_HT_CSI_RATE(x)			(((x) >> BIT_SHIFT_WMAC_HT_CSI_RATE) & BIT_MASK_WMAC_HT_CSI_RATE)
#define BIT_SET_WMAC_HT_CSI_RATE(x, v)			(BIT_CLEAR_WMAC_HT_CSI_RATE(x) | BIT_WMAC_HT_CSI_RATE(v))

/* 2 REG_MACID2				(Offset 0x1620) */

#define BIT_SHIFT_MACID2_V1				0
#define BIT_MASK_MACID2_V1				0xffffffffL
#define BIT_MACID2_V1(x)				(((x) & BIT_MASK_MACID2_V1) << BIT_SHIFT_MACID2_V1)
#define BITS_MACID2_V1					(BIT_MASK_MACID2_V1 << BIT_SHIFT_MACID2_V1)
#define BIT_CLEAR_MACID2_V1(x)				((x) & (~BITS_MACID2_V1))
#define BIT_GET_MACID2_V1(x)				(((x) >> BIT_SHIFT_MACID2_V1) & BIT_MASK_MACID2_V1)
#define BIT_SET_MACID2_V1(x, v)			(BIT_CLEAR_MACID2_V1(x) | BIT_MACID2_V1(v))

/* 2 REG_MACID2_H				(Offset 0x1624) */

#define BIT_SHIFT_MACID2_H_V1				0
#define BIT_MASK_MACID2_H_V1				0xffff
#define BIT_MACID2_H_V1(x)				(((x) & BIT_MASK_MACID2_H_V1) << BIT_SHIFT_MACID2_H_V1)
#define BITS_MACID2_H_V1				(BIT_MASK_MACID2_H_V1 << BIT_SHIFT_MACID2_H_V1)
#define BIT_CLEAR_MACID2_H_V1(x)			((x) & (~BITS_MACID2_H_V1))
#define BIT_GET_MACID2_H_V1(x)				(((x) >> BIT_SHIFT_MACID2_H_V1) & BIT_MASK_MACID2_H_V1)
#define BIT_SET_MACID2_H_V1(x, v)			(BIT_CLEAR_MACID2_H_V1(x) | BIT_MACID2_H_V1(v))

/* 2 REG_BSSID2				(Offset 0x1628) */

#define BIT_SHIFT_BSSID2_V1				0
#define BIT_MASK_BSSID2_V1				0xffffffffL
#define BIT_BSSID2_V1(x)				(((x) & BIT_MASK_BSSID2_V1) << BIT_SHIFT_BSSID2_V1)
#define BITS_BSSID2_V1					(BIT_MASK_BSSID2_V1 << BIT_SHIFT_BSSID2_V1)
#define BIT_CLEAR_BSSID2_V1(x)				((x) & (~BITS_BSSID2_V1))
#define BIT_GET_BSSID2_V1(x)				(((x) >> BIT_SHIFT_BSSID2_V1) & BIT_MASK_BSSID2_V1)
#define BIT_SET_BSSID2_V1(x, v)			(BIT_CLEAR_BSSID2_V1(x) | BIT_BSSID2_V1(v))

/* 2 REG_BSSID2_H				(Offset 0x162C) */

#define BIT_SHIFT_BSSID2_H_V1				0
#define BIT_MASK_BSSID2_H_V1				0xffff
#define BIT_BSSID2_H_V1(x)				(((x) & BIT_MASK_BSSID2_H_V1) << BIT_SHIFT_BSSID2_H_V1)
#define BITS_BSSID2_H_V1				(BIT_MASK_BSSID2_H_V1 << BIT_SHIFT_BSSID2_H_V1)
#define BIT_CLEAR_BSSID2_H_V1(x)			((x) & (~BITS_BSSID2_H_V1))
#define BIT_GET_BSSID2_H_V1(x)				(((x) >> BIT_SHIFT_BSSID2_H_V1) & BIT_MASK_BSSID2_H_V1)
#define BIT_SET_BSSID2_H_V1(x, v)			(BIT_CLEAR_BSSID2_H_V1(x) | BIT_BSSID2_H_V1(v))

/* 2 REG_MACID3				(Offset 0x1630) */

#define BIT_SHIFT_MACID3_V1				0
#define BIT_MASK_MACID3_V1				0xffffffffL
#define BIT_MACID3_V1(x)				(((x) & BIT_MASK_MACID3_V1) << BIT_SHIFT_MACID3_V1)
#define BITS_MACID3_V1					(BIT_MASK_MACID3_V1 << BIT_SHIFT_MACID3_V1)
#define BIT_CLEAR_MACID3_V1(x)				((x) & (~BITS_MACID3_V1))
#define BIT_GET_MACID3_V1(x)				(((x) >> BIT_SHIFT_MACID3_V1) & BIT_MASK_MACID3_V1)
#define BIT_SET_MACID3_V1(x, v)			(BIT_CLEAR_MACID3_V1(x) | BIT_MACID3_V1(v))

/* 2 REG_MACID3_H				(Offset 0x1634) */

#define BIT_SHIFT_MACID3_H_V1				0
#define BIT_MASK_MACID3_H_V1				0xffff
#define BIT_MACID3_H_V1(x)				(((x) & BIT_MASK_MACID3_H_V1) << BIT_SHIFT_MACID3_H_V1)
#define BITS_MACID3_H_V1				(BIT_MASK_MACID3_H_V1 << BIT_SHIFT_MACID3_H_V1)
#define BIT_CLEAR_MACID3_H_V1(x)			((x) & (~BITS_MACID3_H_V1))
#define BIT_GET_MACID3_H_V1(x)				(((x) >> BIT_SHIFT_MACID3_H_V1) & BIT_MASK_MACID3_H_V1)
#define BIT_SET_MACID3_H_V1(x, v)			(BIT_CLEAR_MACID3_H_V1(x) | BIT_MACID3_H_V1(v))

/* 2 REG_BSSID3				(Offset 0x1638) */

#define BIT_SHIFT_BSSID3_V1				0
#define BIT_MASK_BSSID3_V1				0xffffffffL
#define BIT_BSSID3_V1(x)				(((x) & BIT_MASK_BSSID3_V1) << BIT_SHIFT_BSSID3_V1)
#define BITS_BSSID3_V1					(BIT_MASK_BSSID3_V1 << BIT_SHIFT_BSSID3_V1)
#define BIT_CLEAR_BSSID3_V1(x)				((x) & (~BITS_BSSID3_V1))
#define BIT_GET_BSSID3_V1(x)				(((x) >> BIT_SHIFT_BSSID3_V1) & BIT_MASK_BSSID3_V1)
#define BIT_SET_BSSID3_V1(x, v)			(BIT_CLEAR_BSSID3_V1(x) | BIT_BSSID3_V1(v))

/* 2 REG_BSSID3_H				(Offset 0x163C) */

#define BIT_SHIFT_BSSID3_H_V1				0
#define BIT_MASK_BSSID3_H_V1				0xffff
#define BIT_BSSID3_H_V1(x)				(((x) & BIT_MASK_BSSID3_H_V1) << BIT_SHIFT_BSSID3_H_V1)
#define BITS_BSSID3_H_V1				(BIT_MASK_BSSID3_H_V1 << BIT_SHIFT_BSSID3_H_V1)
#define BIT_CLEAR_BSSID3_H_V1(x)			((x) & (~BITS_BSSID3_H_V1))
#define BIT_GET_BSSID3_H_V1(x)				(((x) >> BIT_SHIFT_BSSID3_H_V1) & BIT_MASK_BSSID3_H_V1)
#define BIT_SET_BSSID3_H_V1(x, v)			(BIT_CLEAR_BSSID3_H_V1(x) | BIT_BSSID3_H_V1(v))

/* 2 REG_MACID4				(Offset 0x1640) */

#define BIT_SHIFT_MACID4_V1				0
#define BIT_MASK_MACID4_V1				0xffffffffL
#define BIT_MACID4_V1(x)				(((x) & BIT_MASK_MACID4_V1) << BIT_SHIFT_MACID4_V1)
#define BITS_MACID4_V1					(BIT_MASK_MACID4_V1 << BIT_SHIFT_MACID4_V1)
#define BIT_CLEAR_MACID4_V1(x)				((x) & (~BITS_MACID4_V1))
#define BIT_GET_MACID4_V1(x)				(((x) >> BIT_SHIFT_MACID4_V1) & BIT_MASK_MACID4_V1)
#define BIT_SET_MACID4_V1(x, v)			(BIT_CLEAR_MACID4_V1(x) | BIT_MACID4_V1(v))

/* 2 REG_MACID4_H				(Offset 0x1644) */

#define BIT_SHIFT_MACID4_H_V1				0
#define BIT_MASK_MACID4_H_V1				0xffff
#define BIT_MACID4_H_V1(x)				(((x) & BIT_MASK_MACID4_H_V1) << BIT_SHIFT_MACID4_H_V1)
#define BITS_MACID4_H_V1				(BIT_MASK_MACID4_H_V1 << BIT_SHIFT_MACID4_H_V1)
#define BIT_CLEAR_MACID4_H_V1(x)			((x) & (~BITS_MACID4_H_V1))
#define BIT_GET_MACID4_H_V1(x)				(((x) >> BIT_SHIFT_MACID4_H_V1) & BIT_MASK_MACID4_H_V1)
#define BIT_SET_MACID4_H_V1(x, v)			(BIT_CLEAR_MACID4_H_V1(x) | BIT_MACID4_H_V1(v))

/* 2 REG_BSSID4				(Offset 0x1648) */

#define BIT_SHIFT_BSSID4_V1				0
#define BIT_MASK_BSSID4_V1				0xffffffffL
#define BIT_BSSID4_V1(x)				(((x) & BIT_MASK_BSSID4_V1) << BIT_SHIFT_BSSID4_V1)
#define BITS_BSSID4_V1					(BIT_MASK_BSSID4_V1 << BIT_SHIFT_BSSID4_V1)
#define BIT_CLEAR_BSSID4_V1(x)				((x) & (~BITS_BSSID4_V1))
#define BIT_GET_BSSID4_V1(x)				(((x) >> BIT_SHIFT_BSSID4_V1) & BIT_MASK_BSSID4_V1)
#define BIT_SET_BSSID4_V1(x, v)			(BIT_CLEAR_BSSID4_V1(x) | BIT_BSSID4_V1(v))

/* 2 REG_BSSID4_H				(Offset 0x164C) */

#define BIT_SHIFT_BSSID4_H_V1				0
#define BIT_MASK_BSSID4_H_V1				0xffff
#define BIT_BSSID4_H_V1(x)				(((x) & BIT_MASK_BSSID4_H_V1) << BIT_SHIFT_BSSID4_H_V1)
#define BITS_BSSID4_H_V1				(BIT_MASK_BSSID4_H_V1 << BIT_SHIFT_BSSID4_H_V1)
#define BIT_CLEAR_BSSID4_H_V1(x)			((x) & (~BITS_BSSID4_H_V1))
#define BIT_GET_BSSID4_H_V1(x)				(((x) >> BIT_SHIFT_BSSID4_H_V1) & BIT_MASK_BSSID4_H_V1)
#define BIT_SET_BSSID4_H_V1(x, v)			(BIT_CLEAR_BSSID4_H_V1(x) | BIT_BSSID4_H_V1(v))

/* 2 REG_PWRBIT_SETTING			(Offset 0x1660) */

#define BIT_CLI3_WMAC_TCRPWRMGT_HWCTL_EN		BIT(15)
#define BIT_CLI3_WMAC_TCRPWRMGT_HWDATA_EN		BIT(14)
#define BIT_CLI3_WMAC_TCRPWRMGT_HWACT_EN		BIT(13)
#define BIT_CLI3_PWR_ST_V1				BIT(12)
#define BIT_CLI2_WMAC_TCRPWRMGT_HWCTL_EN		BIT(11)
#define BIT_CLI2_WMAC_TCRPWRMGT_HWDATA_EN		BIT(10)
#define BIT_CLI2_WMAC_TCRPWRMGT_HWACT_EN		BIT(9)
#define BIT_CLI2_PWR_ST_V1				BIT(8)
#define BIT_CLI1_WMAC_TCRPWRMGT_HWCTL_EN		BIT(7)
#define BIT_CLI1_WMAC_TCRPWRMGT_HWDATA_EN		BIT(6)
#define BIT_CLI1_WMAC_TCRPWRMGT_HWACT_EN		BIT(5)
#define BIT_CLI1_PWR_ST_V1				BIT(4)
#define BIT_CLI0_WMAC_TCRPWRMGT_HWCTL_EN		BIT(3)
#define BIT_CLI0_WMAC_TCRPWRMGT_HWDATA_EN		BIT(2)
#define BIT_CLI0_WMAC_TCRPWRMGT_HWACT_EN		BIT(1)
#define BIT_CLI0_PWR_ST_V1				BIT(0)

/* 2 REG_GENERAL_OPTION			(Offset 0x1664) */

#define BIT_WMAC_EXT_DBG_SEL_V1			BIT(6)
#define BIT_WMAC_FIX_FIRST_MPDU_WITH_PHYSTS		BIT(5)
#define BIT_RX_DMA_BYPASS_CHECK_DATABYPASS_CHECK_DATA	BIT(4)
#define BIT_RX_DMA_BYPASS_CHECK_MGTBIT_RX_DMA_BYPASS_CHECK_MGT	BIT(3)
#define BIT_TXSERV_FIELD_SEL				BIT(2)
#define BIT_RXVHT_LEN_SEL				BIT(1)
#define BIT_RXMIC_PROTECT_EN				BIT(0)

/* 2 REG_RXAI_CTRL				(Offset 0x1668) */

#define BIT_RXAI_INFO_RST				BIT(7)
#define BIT_RXAI_PRTCT_REL				BIT(6)
#define BIT_RXAI_PRTCT_VIO				BIT(5)
#define BIT_RXAI_PRTCT_SEL				BIT(2)
#define BIT_RXAI_AGG_CHKEN				BIT(1)
#define BIT_RXAI_ADDR_CHKEN				BIT(0)

/* 2 REG_CSI_RRSR				(Offset 0x1678) */

#define BIT_CSI_LDPC_EN				BIT(29)
#define BIT_CSI_STBC_EN				BIT(28)

#define BIT_SHIFT_CSI_RRSC_BITMAP			4
#define BIT_MASK_CSI_RRSC_BITMAP			0xffffff
#define BIT_CSI_RRSC_BITMAP(x)				(((x) & BIT_MASK_CSI_RRSC_BITMAP) << BIT_SHIFT_CSI_RRSC_BITMAP)
#define BITS_CSI_RRSC_BITMAP				(BIT_MASK_CSI_RRSC_BITMAP << BIT_SHIFT_CSI_RRSC_BITMAP)
#define BIT_CLEAR_CSI_RRSC_BITMAP(x)			((x) & (~BITS_CSI_RRSC_BITMAP))
#define BIT_GET_CSI_RRSC_BITMAP(x)			(((x) >> BIT_SHIFT_CSI_RRSC_BITMAP) & BIT_MASK_CSI_RRSC_BITMAP)
#define BIT_SET_CSI_RRSC_BITMAP(x, v)			(BIT_CLEAR_CSI_RRSC_BITMAP(x) | BIT_CSI_RRSC_BITMAP(v))

#define BIT_SHIFT_OFDM_LEN_TH				0
#define BIT_MASK_OFDM_LEN_TH				0xf
#define BIT_OFDM_LEN_TH(x)				(((x) & BIT_MASK_OFDM_LEN_TH) << BIT_SHIFT_OFDM_LEN_TH)
#define BITS_OFDM_LEN_TH				(BIT_MASK_OFDM_LEN_TH << BIT_SHIFT_OFDM_LEN_TH)
#define BIT_CLEAR_OFDM_LEN_TH(x)			((x) & (~BITS_OFDM_LEN_TH))
#define BIT_GET_OFDM_LEN_TH(x)				(((x) >> BIT_SHIFT_OFDM_LEN_TH) & BIT_MASK_OFDM_LEN_TH)
#define BIT_SET_OFDM_LEN_TH(x, v)			(BIT_CLEAR_OFDM_LEN_TH(x) | BIT_OFDM_LEN_TH(v))

/* 2 REG_MU_BF_OPTION			(Offset 0x167C) */

#define BIT_WMAC_RESP_NONSTA1_DIS			BIT(7)
#define BIT_WMAC_TXMU_ACKPOLICY_EN			BIT(6)

#define BIT_SHIFT_WMAC_TXMU_ACKPOLICY			4
#define BIT_MASK_WMAC_TXMU_ACKPOLICY			0x3
#define BIT_WMAC_TXMU_ACKPOLICY(x)			(((x) & BIT_MASK_WMAC_TXMU_ACKPOLICY) << BIT_SHIFT_WMAC_TXMU_ACKPOLICY)
#define BITS_WMAC_TXMU_ACKPOLICY			(BIT_MASK_WMAC_TXMU_ACKPOLICY << BIT_SHIFT_WMAC_TXMU_ACKPOLICY)
#define BIT_CLEAR_WMAC_TXMU_ACKPOLICY(x)		((x) & (~BITS_WMAC_TXMU_ACKPOLICY))
#define BIT_GET_WMAC_TXMU_ACKPOLICY(x)			(((x) >> BIT_SHIFT_WMAC_TXMU_ACKPOLICY) & BIT_MASK_WMAC_TXMU_ACKPOLICY)
#define BIT_SET_WMAC_TXMU_ACKPOLICY(x, v)		(BIT_CLEAR_WMAC_TXMU_ACKPOLICY(x) | BIT_WMAC_TXMU_ACKPOLICY(v))

#define BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL		1
#define BIT_MASK_WMAC_MU_BFEE_PORT_SEL			0x7
#define BIT_WMAC_MU_BFEE_PORT_SEL(x)			(((x) & BIT_MASK_WMAC_MU_BFEE_PORT_SEL) << BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL)
#define BITS_WMAC_MU_BFEE_PORT_SEL			(BIT_MASK_WMAC_MU_BFEE_PORT_SEL << BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL)
#define BIT_CLEAR_WMAC_MU_BFEE_PORT_SEL(x)		((x) & (~BITS_WMAC_MU_BFEE_PORT_SEL))
#define BIT_GET_WMAC_MU_BFEE_PORT_SEL(x)		(((x) >> BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL) & BIT_MASK_WMAC_MU_BFEE_PORT_SEL)
#define BIT_SET_WMAC_MU_BFEE_PORT_SEL(x, v)		(BIT_CLEAR_WMAC_MU_BFEE_PORT_SEL(x) | BIT_WMAC_MU_BFEE_PORT_SEL(v))

#define BIT_WMAC_MU_BFEE_DIS				BIT(0)

/* 2 REG_WMAC_PAUSE_BB_CLR_TH		(Offset 0x167D) */

#define BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH			0
#define BIT_MASK_WMAC_PAUSE_BB_CLR_TH			0xff
#define BIT_WMAC_PAUSE_BB_CLR_TH(x)			(((x) & BIT_MASK_WMAC_PAUSE_BB_CLR_TH) << BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH)
#define BITS_WMAC_PAUSE_BB_CLR_TH			(BIT_MASK_WMAC_PAUSE_BB_CLR_TH << BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH)
#define BIT_CLEAR_WMAC_PAUSE_BB_CLR_TH(x)		((x) & (~BITS_WMAC_PAUSE_BB_CLR_TH))
#define BIT_GET_WMAC_PAUSE_BB_CLR_TH(x)		(((x) >> BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH) & BIT_MASK_WMAC_PAUSE_BB_CLR_TH)
#define BIT_SET_WMAC_PAUSE_BB_CLR_TH(x, v)		(BIT_CLEAR_WMAC_PAUSE_BB_CLR_TH(x) | BIT_WMAC_PAUSE_BB_CLR_TH(v))

/* 2 REG__WMAC_MULBK_BUF			(Offset 0x167E) */

#define BIT_SHIFT_WMAC_MULBK_PAGE_SIZE			0
#define BIT_MASK_WMAC_MULBK_PAGE_SIZE			0xff
#define BIT_WMAC_MULBK_PAGE_SIZE(x)			(((x) & BIT_MASK_WMAC_MULBK_PAGE_SIZE) << BIT_SHIFT_WMAC_MULBK_PAGE_SIZE)
#define BITS_WMAC_MULBK_PAGE_SIZE			(BIT_MASK_WMAC_MULBK_PAGE_SIZE << BIT_SHIFT_WMAC_MULBK_PAGE_SIZE)
#define BIT_CLEAR_WMAC_MULBK_PAGE_SIZE(x)		((x) & (~BITS_WMAC_MULBK_PAGE_SIZE))
#define BIT_GET_WMAC_MULBK_PAGE_SIZE(x)		(((x) >> BIT_SHIFT_WMAC_MULBK_PAGE_SIZE) & BIT_MASK_WMAC_MULBK_PAGE_SIZE)
#define BIT_SET_WMAC_MULBK_PAGE_SIZE(x, v)		(BIT_CLEAR_WMAC_MULBK_PAGE_SIZE(x) | BIT_WMAC_MULBK_PAGE_SIZE(v))

/* 2 REG_WMAC_MU_BF_CTL			(Offset 0x1680) */

#define BIT_WMAC_INVLD_BFPRT_CHK			BIT(15)
#define BIT_WMAC_RETXBFRPTSEQ_UPD			BIT(14)

#define BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL			12
#define BIT_MASK_WMAC_MU_BFRPTSEG_SEL			0x3
#define BIT_WMAC_MU_BFRPTSEG_SEL(x)			(((x) & BIT_MASK_WMAC_MU_BFRPTSEG_SEL) << BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL)
#define BITS_WMAC_MU_BFRPTSEG_SEL			(BIT_MASK_WMAC_MU_BFRPTSEG_SEL << BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL)
#define BIT_CLEAR_WMAC_MU_BFRPTSEG_SEL(x)		((x) & (~BITS_WMAC_MU_BFRPTSEG_SEL))
#define BIT_GET_WMAC_MU_BFRPTSEG_SEL(x)		(((x) >> BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL) & BIT_MASK_WMAC_MU_BFRPTSEG_SEL)
#define BIT_SET_WMAC_MU_BFRPTSEG_SEL(x, v)		(BIT_CLEAR_WMAC_MU_BFRPTSEG_SEL(x) | BIT_WMAC_MU_BFRPTSEG_SEL(v))

#define BIT_SHIFT_WMAC_MU_BF_MYAID			0
#define BIT_MASK_WMAC_MU_BF_MYAID			0xfff
#define BIT_WMAC_MU_BF_MYAID(x)			(((x) & BIT_MASK_WMAC_MU_BF_MYAID) << BIT_SHIFT_WMAC_MU_BF_MYAID)
#define BITS_WMAC_MU_BF_MYAID				(BIT_MASK_WMAC_MU_BF_MYAID << BIT_SHIFT_WMAC_MU_BF_MYAID)
#define BIT_CLEAR_WMAC_MU_BF_MYAID(x)			((x) & (~BITS_WMAC_MU_BF_MYAID))
#define BIT_GET_WMAC_MU_BF_MYAID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BF_MYAID) & BIT_MASK_WMAC_MU_BF_MYAID)
#define BIT_SET_WMAC_MU_BF_MYAID(x, v)			(BIT_CLEAR_WMAC_MU_BF_MYAID(x) | BIT_WMAC_MU_BF_MYAID(v))

/* 2 REG_WMAC_MU_BFRPT_PARA			(Offset 0x1682) */

#define BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1		13
#define BIT_MASK_BFRPT_PARA_USERID_SEL_V1		0x7
#define BIT_BFRPT_PARA_USERID_SEL_V1(x)		(((x) & BIT_MASK_BFRPT_PARA_USERID_SEL_V1) << BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1)
#define BITS_BFRPT_PARA_USERID_SEL_V1			(BIT_MASK_BFRPT_PARA_USERID_SEL_V1 << BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1)
#define BIT_CLEAR_BFRPT_PARA_USERID_SEL_V1(x)		((x) & (~BITS_BFRPT_PARA_USERID_SEL_V1))
#define BIT_GET_BFRPT_PARA_USERID_SEL_V1(x)		(((x) >> BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1) & BIT_MASK_BFRPT_PARA_USERID_SEL_V1)
#define BIT_SET_BFRPT_PARA_USERID_SEL_V1(x, v)	(BIT_CLEAR_BFRPT_PARA_USERID_SEL_V1(x) | BIT_BFRPT_PARA_USERID_SEL_V1(v))

#define BIT_SHIFT_BFRPT_PARA_V1			0
#define BIT_MASK_BFRPT_PARA_V1				0x1fff
#define BIT_BFRPT_PARA_V1(x)				(((x) & BIT_MASK_BFRPT_PARA_V1) << BIT_SHIFT_BFRPT_PARA_V1)
#define BITS_BFRPT_PARA_V1				(BIT_MASK_BFRPT_PARA_V1 << BIT_SHIFT_BFRPT_PARA_V1)
#define BIT_CLEAR_BFRPT_PARA_V1(x)			((x) & (~BITS_BFRPT_PARA_V1))
#define BIT_GET_BFRPT_PARA_V1(x)			(((x) >> BIT_SHIFT_BFRPT_PARA_V1) & BIT_MASK_BFRPT_PARA_V1)
#define BIT_SET_BFRPT_PARA_V1(x, v)			(BIT_CLEAR_BFRPT_PARA_V1(x) | BIT_BFRPT_PARA_V1(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE2		(Offset 0x1684) */

#define BIT_STATUS_BFEE2				BIT(10)
#define BIT_WMAC_MU_BFEE2_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE2_AID			0
#define BIT_MASK_WMAC_MU_BFEE2_AID			0x1ff
#define BIT_WMAC_MU_BFEE2_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE2_AID) << BIT_SHIFT_WMAC_MU_BFEE2_AID)
#define BITS_WMAC_MU_BFEE2_AID				(BIT_MASK_WMAC_MU_BFEE2_AID << BIT_SHIFT_WMAC_MU_BFEE2_AID)
#define BIT_CLEAR_WMAC_MU_BFEE2_AID(x)			((x) & (~BITS_WMAC_MU_BFEE2_AID))
#define BIT_GET_WMAC_MU_BFEE2_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE2_AID) & BIT_MASK_WMAC_MU_BFEE2_AID)
#define BIT_SET_WMAC_MU_BFEE2_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE2_AID(x) | BIT_WMAC_MU_BFEE2_AID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE3		(Offset 0x1686) */

#define BIT_STATUS_BFEE3				BIT(10)
#define BIT_WMAC_MU_BFEE3_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE3_AID			0
#define BIT_MASK_WMAC_MU_BFEE3_AID			0x1ff
#define BIT_WMAC_MU_BFEE3_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE3_AID) << BIT_SHIFT_WMAC_MU_BFEE3_AID)
#define BITS_WMAC_MU_BFEE3_AID				(BIT_MASK_WMAC_MU_BFEE3_AID << BIT_SHIFT_WMAC_MU_BFEE3_AID)
#define BIT_CLEAR_WMAC_MU_BFEE3_AID(x)			((x) & (~BITS_WMAC_MU_BFEE3_AID))
#define BIT_GET_WMAC_MU_BFEE3_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE3_AID) & BIT_MASK_WMAC_MU_BFEE3_AID)
#define BIT_SET_WMAC_MU_BFEE3_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE3_AID(x) | BIT_WMAC_MU_BFEE3_AID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE4		(Offset 0x1688) */

#define BIT_STATUS_BFEE4				BIT(10)
#define BIT_WMAC_MU_BFEE4_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE4_AID			0
#define BIT_MASK_WMAC_MU_BFEE4_AID			0x1ff
#define BIT_WMAC_MU_BFEE4_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE4_AID) << BIT_SHIFT_WMAC_MU_BFEE4_AID)
#define BITS_WMAC_MU_BFEE4_AID				(BIT_MASK_WMAC_MU_BFEE4_AID << BIT_SHIFT_WMAC_MU_BFEE4_AID)
#define BIT_CLEAR_WMAC_MU_BFEE4_AID(x)			((x) & (~BITS_WMAC_MU_BFEE4_AID))
#define BIT_GET_WMAC_MU_BFEE4_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE4_AID) & BIT_MASK_WMAC_MU_BFEE4_AID)
#define BIT_SET_WMAC_MU_BFEE4_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE4_AID(x) | BIT_WMAC_MU_BFEE4_AID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE5		(Offset 0x168A) */

#define BIT_BIT_STATUS_BFEE5				BIT(10)
#define BIT_WMAC_MU_BFEE5_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE5_AID			0
#define BIT_MASK_WMAC_MU_BFEE5_AID			0x1ff
#define BIT_WMAC_MU_BFEE5_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE5_AID) << BIT_SHIFT_WMAC_MU_BFEE5_AID)
#define BITS_WMAC_MU_BFEE5_AID				(BIT_MASK_WMAC_MU_BFEE5_AID << BIT_SHIFT_WMAC_MU_BFEE5_AID)
#define BIT_CLEAR_WMAC_MU_BFEE5_AID(x)			((x) & (~BITS_WMAC_MU_BFEE5_AID))
#define BIT_GET_WMAC_MU_BFEE5_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE5_AID) & BIT_MASK_WMAC_MU_BFEE5_AID)
#define BIT_SET_WMAC_MU_BFEE5_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE5_AID(x) | BIT_WMAC_MU_BFEE5_AID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE6		(Offset 0x168C) */

#define BIT_STATUS_BFEE6				BIT(10)
#define BIT_WMAC_MU_BFEE6_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE6_AID			0
#define BIT_MASK_WMAC_MU_BFEE6_AID			0x1ff
#define BIT_WMAC_MU_BFEE6_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE6_AID) << BIT_SHIFT_WMAC_MU_BFEE6_AID)
#define BITS_WMAC_MU_BFEE6_AID				(BIT_MASK_WMAC_MU_BFEE6_AID << BIT_SHIFT_WMAC_MU_BFEE6_AID)
#define BIT_CLEAR_WMAC_MU_BFEE6_AID(x)			((x) & (~BITS_WMAC_MU_BFEE6_AID))
#define BIT_GET_WMAC_MU_BFEE6_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE6_AID) & BIT_MASK_WMAC_MU_BFEE6_AID)
#define BIT_SET_WMAC_MU_BFEE6_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE6_AID(x) | BIT_WMAC_MU_BFEE6_AID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE7		(Offset 0x168E) */

#define BIT_STATUS_BFEE7				BIT(10)
#define BIT_WMAC_MU_BFEE7_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE7_AID			0
#define BIT_MASK_WMAC_MU_BFEE7_AID			0x1ff
#define BIT_WMAC_MU_BFEE7_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE7_AID) << BIT_SHIFT_WMAC_MU_BFEE7_AID)
#define BITS_WMAC_MU_BFEE7_AID				(BIT_MASK_WMAC_MU_BFEE7_AID << BIT_SHIFT_WMAC_MU_BFEE7_AID)
#define BIT_CLEAR_WMAC_MU_BFEE7_AID(x)			((x) & (~BITS_WMAC_MU_BFEE7_AID))
#define BIT_GET_WMAC_MU_BFEE7_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE7_AID) & BIT_MASK_WMAC_MU_BFEE7_AID)
#define BIT_SET_WMAC_MU_BFEE7_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE7_AID(x) | BIT_WMAC_MU_BFEE7_AID(v))

/* 2 REG_WMAC_BB_STOP_RX_COUNTER		(Offset 0x1690) */

#define BIT_RST_ALL_COUNTER				BIT(31)

#define BIT_SHIFT_ABORT_RX_VBON_COUNTER		16
#define BIT_MASK_ABORT_RX_VBON_COUNTER			0xff
#define BIT_ABORT_RX_VBON_COUNTER(x)			(((x) & BIT_MASK_ABORT_RX_VBON_COUNTER) << BIT_SHIFT_ABORT_RX_VBON_COUNTER)
#define BITS_ABORT_RX_VBON_COUNTER			(BIT_MASK_ABORT_RX_VBON_COUNTER << BIT_SHIFT_ABORT_RX_VBON_COUNTER)
#define BIT_CLEAR_ABORT_RX_VBON_COUNTER(x)		((x) & (~BITS_ABORT_RX_VBON_COUNTER))
#define BIT_GET_ABORT_RX_VBON_COUNTER(x)		(((x) >> BIT_SHIFT_ABORT_RX_VBON_COUNTER) & BIT_MASK_ABORT_RX_VBON_COUNTER)
#define BIT_SET_ABORT_RX_VBON_COUNTER(x, v)		(BIT_CLEAR_ABORT_RX_VBON_COUNTER(x) | BIT_ABORT_RX_VBON_COUNTER(v))

#define BIT_SHIFT_ABORT_RX_RDRDY_COUNTER		8
#define BIT_MASK_ABORT_RX_RDRDY_COUNTER		0xff
#define BIT_ABORT_RX_RDRDY_COUNTER(x)			(((x) & BIT_MASK_ABORT_RX_RDRDY_COUNTER) << BIT_SHIFT_ABORT_RX_RDRDY_COUNTER)
#define BITS_ABORT_RX_RDRDY_COUNTER			(BIT_MASK_ABORT_RX_RDRDY_COUNTER << BIT_SHIFT_ABORT_RX_RDRDY_COUNTER)
#define BIT_CLEAR_ABORT_RX_RDRDY_COUNTER(x)		((x) & (~BITS_ABORT_RX_RDRDY_COUNTER))
#define BIT_GET_ABORT_RX_RDRDY_COUNTER(x)		(((x) >> BIT_SHIFT_ABORT_RX_RDRDY_COUNTER) & BIT_MASK_ABORT_RX_RDRDY_COUNTER)
#define BIT_SET_ABORT_RX_RDRDY_COUNTER(x, v)		(BIT_CLEAR_ABORT_RX_RDRDY_COUNTER(x) | BIT_ABORT_RX_RDRDY_COUNTER(v))

#define BIT_SHIFT_VBON_EARLY_FALLING_COUNTER		0
#define BIT_MASK_VBON_EARLY_FALLING_COUNTER		0xff
#define BIT_VBON_EARLY_FALLING_COUNTER(x)		(((x) & BIT_MASK_VBON_EARLY_FALLING_COUNTER) << BIT_SHIFT_VBON_EARLY_FALLING_COUNTER)
#define BITS_VBON_EARLY_FALLING_COUNTER		(BIT_MASK_VBON_EARLY_FALLING_COUNTER << BIT_SHIFT_VBON_EARLY_FALLING_COUNTER)
#define BIT_CLEAR_VBON_EARLY_FALLING_COUNTER(x)	((x) & (~BITS_VBON_EARLY_FALLING_COUNTER))
#define BIT_GET_VBON_EARLY_FALLING_COUNTER(x)		(((x) >> BIT_SHIFT_VBON_EARLY_FALLING_COUNTER) & BIT_MASK_VBON_EARLY_FALLING_COUNTER)
#define BIT_SET_VBON_EARLY_FALLING_COUNTER(x, v)	(BIT_CLEAR_VBON_EARLY_FALLING_COUNTER(x) | BIT_VBON_EARLY_FALLING_COUNTER(v))

/* 2 REG_WMAC_PLCP_MONITOR			(Offset 0x1694) */

#define BIT_WMAC_PLCP_TRX_SEL				BIT(31)

#define BIT_SHIFT_WMAC_PLCP_RDSIG_SEL			28
#define BIT_MASK_WMAC_PLCP_RDSIG_SEL			0x7
#define BIT_WMAC_PLCP_RDSIG_SEL(x)			(((x) & BIT_MASK_WMAC_PLCP_RDSIG_SEL) << BIT_SHIFT_WMAC_PLCP_RDSIG_SEL)
#define BITS_WMAC_PLCP_RDSIG_SEL			(BIT_MASK_WMAC_PLCP_RDSIG_SEL << BIT_SHIFT_WMAC_PLCP_RDSIG_SEL)
#define BIT_CLEAR_WMAC_PLCP_RDSIG_SEL(x)		((x) & (~BITS_WMAC_PLCP_RDSIG_SEL))
#define BIT_GET_WMAC_PLCP_RDSIG_SEL(x)			(((x) >> BIT_SHIFT_WMAC_PLCP_RDSIG_SEL) & BIT_MASK_WMAC_PLCP_RDSIG_SEL)
#define BIT_SET_WMAC_PLCP_RDSIG_SEL(x, v)		(BIT_CLEAR_WMAC_PLCP_RDSIG_SEL(x) | BIT_WMAC_PLCP_RDSIG_SEL(v))

#define BIT_SHIFT_WMAC_RATE_IDX			24
#define BIT_MASK_WMAC_RATE_IDX				0xf
#define BIT_WMAC_RATE_IDX(x)				(((x) & BIT_MASK_WMAC_RATE_IDX) << BIT_SHIFT_WMAC_RATE_IDX)
#define BITS_WMAC_RATE_IDX				(BIT_MASK_WMAC_RATE_IDX << BIT_SHIFT_WMAC_RATE_IDX)
#define BIT_CLEAR_WMAC_RATE_IDX(x)			((x) & (~BITS_WMAC_RATE_IDX))
#define BIT_GET_WMAC_RATE_IDX(x)			(((x) >> BIT_SHIFT_WMAC_RATE_IDX) & BIT_MASK_WMAC_RATE_IDX)
#define BIT_SET_WMAC_RATE_IDX(x, v)			(BIT_CLEAR_WMAC_RATE_IDX(x) | BIT_WMAC_RATE_IDX(v))

#define BIT_SHIFT_WMAC_PLCP_RDSIG			0
#define BIT_MASK_WMAC_PLCP_RDSIG			0xffffff
#define BIT_WMAC_PLCP_RDSIG(x)				(((x) & BIT_MASK_WMAC_PLCP_RDSIG) << BIT_SHIFT_WMAC_PLCP_RDSIG)
#define BITS_WMAC_PLCP_RDSIG				(BIT_MASK_WMAC_PLCP_RDSIG << BIT_SHIFT_WMAC_PLCP_RDSIG)
#define BIT_CLEAR_WMAC_PLCP_RDSIG(x)			((x) & (~BITS_WMAC_PLCP_RDSIG))
#define BIT_GET_WMAC_PLCP_RDSIG(x)			(((x) >> BIT_SHIFT_WMAC_PLCP_RDSIG) & BIT_MASK_WMAC_PLCP_RDSIG)
#define BIT_SET_WMAC_PLCP_RDSIG(x, v)			(BIT_CLEAR_WMAC_PLCP_RDSIG(x) | BIT_WMAC_PLCP_RDSIG(v))

/* 2 REG_WMAC_PLCP_MONITOR_MUTX		(Offset 0x1698) */

#define BIT_WMAC_MUTX_IDX				BIT(24)

/* 2 REG_WMAC_CSIDMA_CFG			(Offset 0x169C) */

#define BIT_SHIFT_CSI_SEG_SIZE				16
#define BIT_MASK_CSI_SEG_SIZE				0xfff
#define BIT_CSI_SEG_SIZE(x)				(((x) & BIT_MASK_CSI_SEG_SIZE) << BIT_SHIFT_CSI_SEG_SIZE)
#define BITS_CSI_SEG_SIZE				(BIT_MASK_CSI_SEG_SIZE << BIT_SHIFT_CSI_SEG_SIZE)
#define BIT_CLEAR_CSI_SEG_SIZE(x)			((x) & (~BITS_CSI_SEG_SIZE))
#define BIT_GET_CSI_SEG_SIZE(x)			(((x) >> BIT_SHIFT_CSI_SEG_SIZE) & BIT_MASK_CSI_SEG_SIZE)
#define BIT_SET_CSI_SEG_SIZE(x, v)			(BIT_CLEAR_CSI_SEG_SIZE(x) | BIT_CSI_SEG_SIZE(v))

#define BIT_SHIFT_CSI_START_PAGE			0
#define BIT_MASK_CSI_START_PAGE			0xfff
#define BIT_CSI_START_PAGE(x)				(((x) & BIT_MASK_CSI_START_PAGE) << BIT_SHIFT_CSI_START_PAGE)
#define BITS_CSI_START_PAGE				(BIT_MASK_CSI_START_PAGE << BIT_SHIFT_CSI_START_PAGE)
#define BIT_CLEAR_CSI_START_PAGE(x)			((x) & (~BITS_CSI_START_PAGE))
#define BIT_GET_CSI_START_PAGE(x)			(((x) >> BIT_SHIFT_CSI_START_PAGE) & BIT_MASK_CSI_START_PAGE)
#define BIT_SET_CSI_START_PAGE(x, v)			(BIT_CLEAR_CSI_START_PAGE(x) | BIT_CSI_START_PAGE(v))

/* 2 REG_TRANSMIT_ADDRSS_0			(Offset 0x16A0) */

#define BIT_SHIFT_TA0_V1				0
#define BIT_MASK_TA0_V1				0xffffffffL
#define BIT_TA0_V1(x)					(((x) & BIT_MASK_TA0_V1) << BIT_SHIFT_TA0_V1)
#define BITS_TA0_V1					(BIT_MASK_TA0_V1 << BIT_SHIFT_TA0_V1)
#define BIT_CLEAR_TA0_V1(x)				((x) & (~BITS_TA0_V1))
#define BIT_GET_TA0_V1(x)				(((x) >> BIT_SHIFT_TA0_V1) & BIT_MASK_TA0_V1)
#define BIT_SET_TA0_V1(x, v)				(BIT_CLEAR_TA0_V1(x) | BIT_TA0_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_0_H			(Offset 0x16A4) */

#define BIT_SHIFT_TA0_H_V1				0
#define BIT_MASK_TA0_H_V1				0xffff
#define BIT_TA0_H_V1(x)				(((x) & BIT_MASK_TA0_H_V1) << BIT_SHIFT_TA0_H_V1)
#define BITS_TA0_H_V1					(BIT_MASK_TA0_H_V1 << BIT_SHIFT_TA0_H_V1)
#define BIT_CLEAR_TA0_H_V1(x)				((x) & (~BITS_TA0_H_V1))
#define BIT_GET_TA0_H_V1(x)				(((x) >> BIT_SHIFT_TA0_H_V1) & BIT_MASK_TA0_H_V1)
#define BIT_SET_TA0_H_V1(x, v)				(BIT_CLEAR_TA0_H_V1(x) | BIT_TA0_H_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_1			(Offset 0x16A8) */

#define BIT_SHIFT_TA1_V1				0
#define BIT_MASK_TA1_V1				0xffffffffL
#define BIT_TA1_V1(x)					(((x) & BIT_MASK_TA1_V1) << BIT_SHIFT_TA1_V1)
#define BITS_TA1_V1					(BIT_MASK_TA1_V1 << BIT_SHIFT_TA1_V1)
#define BIT_CLEAR_TA1_V1(x)				((x) & (~BITS_TA1_V1))
#define BIT_GET_TA1_V1(x)				(((x) >> BIT_SHIFT_TA1_V1) & BIT_MASK_TA1_V1)
#define BIT_SET_TA1_V1(x, v)				(BIT_CLEAR_TA1_V1(x) | BIT_TA1_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_1_H			(Offset 0x16AC) */

#define BIT_SHIFT_TA1_H_V1				0
#define BIT_MASK_TA1_H_V1				0xffff
#define BIT_TA1_H_V1(x)				(((x) & BIT_MASK_TA1_H_V1) << BIT_SHIFT_TA1_H_V1)
#define BITS_TA1_H_V1					(BIT_MASK_TA1_H_V1 << BIT_SHIFT_TA1_H_V1)
#define BIT_CLEAR_TA1_H_V1(x)				((x) & (~BITS_TA1_H_V1))
#define BIT_GET_TA1_H_V1(x)				(((x) >> BIT_SHIFT_TA1_H_V1) & BIT_MASK_TA1_H_V1)
#define BIT_SET_TA1_H_V1(x, v)				(BIT_CLEAR_TA1_H_V1(x) | BIT_TA1_H_V1(v))

#define BIT_SHIFT_TA2_V1				0
#define BIT_MASK_TA2_V1				0xffffffffL
#define BIT_TA2_V1(x)					(((x) & BIT_MASK_TA2_V1) << BIT_SHIFT_TA2_V1)
#define BITS_TA2_V1					(BIT_MASK_TA2_V1 << BIT_SHIFT_TA2_V1)
#define BIT_CLEAR_TA2_V1(x)				((x) & (~BITS_TA2_V1))
#define BIT_GET_TA2_V1(x)				(((x) >> BIT_SHIFT_TA2_V1) & BIT_MASK_TA2_V1)
#define BIT_SET_TA2_V1(x, v)				(BIT_CLEAR_TA2_V1(x) | BIT_TA2_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_2_H			(Offset 0x16B4) */

#define BIT_SHIFT_TA2_H_V1				0
#define BIT_MASK_TA2_H_V1				0xffff
#define BIT_TA2_H_V1(x)				(((x) & BIT_MASK_TA2_H_V1) << BIT_SHIFT_TA2_H_V1)
#define BITS_TA2_H_V1					(BIT_MASK_TA2_H_V1 << BIT_SHIFT_TA2_H_V1)
#define BIT_CLEAR_TA2_H_V1(x)				((x) & (~BITS_TA2_H_V1))
#define BIT_GET_TA2_H_V1(x)				(((x) >> BIT_SHIFT_TA2_H_V1) & BIT_MASK_TA2_H_V1)
#define BIT_SET_TA2_H_V1(x, v)				(BIT_CLEAR_TA2_H_V1(x) | BIT_TA2_H_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_3_H			(Offset 0x16BC) */

#define BIT_SHIFT_TA3_H_V1				0
#define BIT_MASK_TA3_H_V1				0xffff
#define BIT_TA3_H_V1(x)				(((x) & BIT_MASK_TA3_H_V1) << BIT_SHIFT_TA3_H_V1)
#define BITS_TA3_H_V1					(BIT_MASK_TA3_H_V1 << BIT_SHIFT_TA3_H_V1)
#define BIT_CLEAR_TA3_H_V1(x)				((x) & (~BITS_TA3_H_V1))
#define BIT_GET_TA3_H_V1(x)				(((x) >> BIT_SHIFT_TA3_H_V1) & BIT_MASK_TA3_H_V1)
#define BIT_SET_TA3_H_V1(x, v)				(BIT_CLEAR_TA3_H_V1(x) | BIT_TA3_H_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_4			(Offset 0x16C0) */

#define BIT_SHIFT_TA4_V1				0
#define BIT_MASK_TA4_V1				0xffffffffL
#define BIT_TA4_V1(x)					(((x) & BIT_MASK_TA4_V1) << BIT_SHIFT_TA4_V1)
#define BITS_TA4_V1					(BIT_MASK_TA4_V1 << BIT_SHIFT_TA4_V1)
#define BIT_CLEAR_TA4_V1(x)				((x) & (~BITS_TA4_V1))
#define BIT_GET_TA4_V1(x)				(((x) >> BIT_SHIFT_TA4_V1) & BIT_MASK_TA4_V1)
#define BIT_SET_TA4_V1(x, v)				(BIT_CLEAR_TA4_V1(x) | BIT_TA4_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_4_H			(Offset 0x16C4) */

#define BIT_SHIFT_TA4_H_V1				0
#define BIT_MASK_TA4_H_V1				0xffff
#define BIT_TA4_H_V1(x)				(((x) & BIT_MASK_TA4_H_V1) << BIT_SHIFT_TA4_H_V1)
#define BITS_TA4_H_V1					(BIT_MASK_TA4_H_V1 << BIT_SHIFT_TA4_H_V1)
#define BIT_CLEAR_TA4_H_V1(x)				((x) & (~BITS_TA4_H_V1))
#define BIT_GET_TA4_H_V1(x)				(((x) >> BIT_SHIFT_TA4_H_V1) & BIT_MASK_TA4_H_V1)
#define BIT_SET_TA4_H_V1(x, v)				(BIT_CLEAR_TA4_H_V1(x) | BIT_TA4_H_V1(v))

/* 2 REG_SND_AID12				(Offset 0x16D0) */

#define BIT_SHIFT_USERID_SEL				12
#define BIT_MASK_USERID_SEL				0x7
#define BIT_USERID_SEL(x)				(((x) & BIT_MASK_USERID_SEL) << BIT_SHIFT_USERID_SEL)
#define BITS_USERID_SEL				(BIT_MASK_USERID_SEL << BIT_SHIFT_USERID_SEL)
#define BIT_CLEAR_USERID_SEL(x)			((x) & (~BITS_USERID_SEL))
#define BIT_GET_USERID_SEL(x)				(((x) >> BIT_SHIFT_USERID_SEL) & BIT_MASK_USERID_SEL)
#define BIT_SET_USERID_SEL(x, v)			(BIT_CLEAR_USERID_SEL(x) | BIT_USERID_SEL(v))

#define BIT_SHIFT_USERID_AID12				0
#define BIT_MASK_USERID_AID12				0xfff
#define BIT_USERID_AID12(x)				(((x) & BIT_MASK_USERID_AID12) << BIT_SHIFT_USERID_AID12)
#define BITS_USERID_AID12				(BIT_MASK_USERID_AID12 << BIT_SHIFT_USERID_AID12)
#define BIT_CLEAR_USERID_AID12(x)			((x) & (~BITS_USERID_AID12))
#define BIT_GET_USERID_AID12(x)			(((x) >> BIT_SHIFT_USERID_AID12) & BIT_MASK_USERID_AID12)
#define BIT_SET_USERID_AID12(x, v)			(BIT_CLEAR_USERID_AID12(x) | BIT_USERID_AID12(v))

/* 2 REG_SND_PKT_INFO			(Offset 0x16D2) */

#define BIT_SND_FROM_DS				BIT(7)
#define BIT_SND_TO_DS					BIT(6)

#define BIT_SHIFT_SND_TOKEN				0
#define BIT_MASK_SND_TOKEN				0x3f
#define BIT_SND_TOKEN(x)				(((x) & BIT_MASK_SND_TOKEN) << BIT_SHIFT_SND_TOKEN)
#define BITS_SND_TOKEN					(BIT_MASK_SND_TOKEN << BIT_SHIFT_SND_TOKEN)
#define BIT_CLEAR_SND_TOKEN(x)				((x) & (~BITS_SND_TOKEN))
#define BIT_GET_SND_TOKEN(x)				(((x) >> BIT_SHIFT_SND_TOKEN) & BIT_MASK_SND_TOKEN)
#define BIT_SET_SND_TOKEN(x, v)			(BIT_CLEAR_SND_TOKEN(x) | BIT_SND_TOKEN(v))

/* 2 REG_WL2LTECOEX_INDIRECT_ACCESS_CTRL_V1 (Offset 0x1700) */

#define BIT_LTECOEX_ACCESS_START_V1			BIT(31)
#define BIT_LTECOEX_WRITE_MODE_V1			BIT(30)
#define BIT_LTECOEX_READY_BIT_V1			BIT(29)

#define BIT_SHIFT_WRITE_BYTE_EN_V1			16
#define BIT_MASK_WRITE_BYTE_EN_V1			0xf
#define BIT_WRITE_BYTE_EN_V1(x)			(((x) & BIT_MASK_WRITE_BYTE_EN_V1) << BIT_SHIFT_WRITE_BYTE_EN_V1)
#define BITS_WRITE_BYTE_EN_V1				(BIT_MASK_WRITE_BYTE_EN_V1 << BIT_SHIFT_WRITE_BYTE_EN_V1)
#define BIT_CLEAR_WRITE_BYTE_EN_V1(x)			((x) & (~BITS_WRITE_BYTE_EN_V1))
#define BIT_GET_WRITE_BYTE_EN_V1(x)			(((x) >> BIT_SHIFT_WRITE_BYTE_EN_V1) & BIT_MASK_WRITE_BYTE_EN_V1)
#define BIT_SET_WRITE_BYTE_EN_V1(x, v)			(BIT_CLEAR_WRITE_BYTE_EN_V1(x) | BIT_WRITE_BYTE_EN_V1(v))

#define BIT_SHIFT_LTECOEX_REG_ADDR_V1			0
#define BIT_MASK_LTECOEX_REG_ADDR_V1			0xffff
#define BIT_LTECOEX_REG_ADDR_V1(x)			(((x) & BIT_MASK_LTECOEX_REG_ADDR_V1) << BIT_SHIFT_LTECOEX_REG_ADDR_V1)
#define BITS_LTECOEX_REG_ADDR_V1			(BIT_MASK_LTECOEX_REG_ADDR_V1 << BIT_SHIFT_LTECOEX_REG_ADDR_V1)
#define BIT_CLEAR_LTECOEX_REG_ADDR_V1(x)		((x) & (~BITS_LTECOEX_REG_ADDR_V1))
#define BIT_GET_LTECOEX_REG_ADDR_V1(x)			(((x) >> BIT_SHIFT_LTECOEX_REG_ADDR_V1) & BIT_MASK_LTECOEX_REG_ADDR_V1)
#define BIT_SET_LTECOEX_REG_ADDR_V1(x, v)		(BIT_CLEAR_LTECOEX_REG_ADDR_V1(x) | BIT_LTECOEX_REG_ADDR_V1(v))

/* 2 REG_WL2LTECOEX_INDIRECT_ACCESS_WRITE_DATA_V1 (Offset 0x1704) */

#define BIT_SHIFT_LTECOEX_W_DATA_V1			0
#define BIT_MASK_LTECOEX_W_DATA_V1			0xffffffffL
#define BIT_LTECOEX_W_DATA_V1(x)			(((x) & BIT_MASK_LTECOEX_W_DATA_V1) << BIT_SHIFT_LTECOEX_W_DATA_V1)
#define BITS_LTECOEX_W_DATA_V1				(BIT_MASK_LTECOEX_W_DATA_V1 << BIT_SHIFT_LTECOEX_W_DATA_V1)
#define BIT_CLEAR_LTECOEX_W_DATA_V1(x)			((x) & (~BITS_LTECOEX_W_DATA_V1))
#define BIT_GET_LTECOEX_W_DATA_V1(x)			(((x) >> BIT_SHIFT_LTECOEX_W_DATA_V1) & BIT_MASK_LTECOEX_W_DATA_V1)
#define BIT_SET_LTECOEX_W_DATA_V1(x, v)		(BIT_CLEAR_LTECOEX_W_DATA_V1(x) | BIT_LTECOEX_W_DATA_V1(v))

/* 2 REG_WL2LTECOEX_INDIRECT_ACCESS_READ_DATA_V1 (Offset 0x1708) */

#define BIT_SHIFT_LTECOEX_R_DATA_V1			0
#define BIT_MASK_LTECOEX_R_DATA_V1			0xffffffffL
#define BIT_LTECOEX_R_DATA_V1(x)			(((x) & BIT_MASK_LTECOEX_R_DATA_V1) << BIT_SHIFT_LTECOEX_R_DATA_V1)
#define BITS_LTECOEX_R_DATA_V1				(BIT_MASK_LTECOEX_R_DATA_V1 << BIT_SHIFT_LTECOEX_R_DATA_V1)
#define BIT_CLEAR_LTECOEX_R_DATA_V1(x)			((x) & (~BITS_LTECOEX_R_DATA_V1))
#define BIT_GET_LTECOEX_R_DATA_V1(x)			(((x) >> BIT_SHIFT_LTECOEX_R_DATA_V1) & BIT_MASK_LTECOEX_R_DATA_V1)
#define BIT_SET_LTECOEX_R_DATA_V1(x, v)		(BIT_CLEAR_LTECOEX_R_DATA_V1(x) | BIT_LTECOEX_R_DATA_V1(v))

/* 2 REG_GT0_CTRL				(Offset 0x2180) */

#define BIT_GT0INT_EN					BIT(31)
#define BIT_GT0MODE					BIT(30)
#define BIT_GT0EN					BIT(29)
#define BIT_GT0_SORT_EN				BIT(28)

#define BIT_SHIFT_GT0DATA				0
#define BIT_MASK_GT0DATA				0xfffffff
#define BIT_GT0DATA(x)					(((x) & BIT_MASK_GT0DATA) << BIT_SHIFT_GT0DATA)
#define BITS_GT0DATA					(BIT_MASK_GT0DATA << BIT_SHIFT_GT0DATA)
#define BIT_CLEAR_GT0DATA(x)				((x) & (~BITS_GT0DATA))
#define BIT_GET_GT0DATA(x)				(((x) >> BIT_SHIFT_GT0DATA) & BIT_MASK_GT0DATA)
#define BIT_SET_GT0DATA(x, v)				(BIT_CLEAR_GT0DATA(x) | BIT_GT0DATA(v))

/* 2 REG_GT0_CNT				(Offset 0x2184) */

#define BIT_SHIFT_GT0_CNT				0
#define BIT_MASK_GT0_CNT				0xfffffff
#define BIT_GT0_CNT(x)					(((x) & BIT_MASK_GT0_CNT) << BIT_SHIFT_GT0_CNT)
#define BITS_GT0_CNT					(BIT_MASK_GT0_CNT << BIT_SHIFT_GT0_CNT)
#define BIT_CLEAR_GT0_CNT(x)				((x) & (~BITS_GT0_CNT))
#define BIT_GET_GT0_CNT(x)				(((x) >> BIT_SHIFT_GT0_CNT) & BIT_MASK_GT0_CNT)
#define BIT_SET_GT0_CNT(x, v)				(BIT_CLEAR_GT0_CNT(x) | BIT_GT0_CNT(v))

/* 2 REG_GT1_CTRL				(Offset 0x2188) */

#define BIT_GT1INT_EN					BIT(31)
#define BIT_GT1MODE					BIT(30)
#define BIT_GT1EN					BIT(29)
#define BIT_GT1_SORT_EN				BIT(28)

#define BIT_SHIFT_GT1DATA				0
#define BIT_MASK_GT1DATA				0xfffffff
#define BIT_GT1DATA(x)					(((x) & BIT_MASK_GT1DATA) << BIT_SHIFT_GT1DATA)
#define BITS_GT1DATA					(BIT_MASK_GT1DATA << BIT_SHIFT_GT1DATA)
#define BIT_CLEAR_GT1DATA(x)				((x) & (~BITS_GT1DATA))
#define BIT_GET_GT1DATA(x)				(((x) >> BIT_SHIFT_GT1DATA) & BIT_MASK_GT1DATA)
#define BIT_SET_GT1DATA(x, v)				(BIT_CLEAR_GT1DATA(x) | BIT_GT1DATA(v))

/* 2 REG_GT1_CNT				(Offset 0x218C) */

#define BIT_SHIFT_GT1_CNT				0
#define BIT_MASK_GT1_CNT				0xfffffff
#define BIT_GT1_CNT(x)					(((x) & BIT_MASK_GT1_CNT) << BIT_SHIFT_GT1_CNT)
#define BITS_GT1_CNT					(BIT_MASK_GT1_CNT << BIT_SHIFT_GT1_CNT)
#define BIT_CLEAR_GT1_CNT(x)				((x) & (~BITS_GT1_CNT))
#define BIT_GET_GT1_CNT(x)				(((x) >> BIT_SHIFT_GT1_CNT) & BIT_MASK_GT1_CNT)
#define BIT_SET_GT1_CNT(x, v)				(BIT_CLEAR_GT1_CNT(x) | BIT_GT1_CNT(v))

/* 2 REG_GT2_CTRL				(Offset 0x2190) */

#define BIT_GT2INT_EN					BIT(31)
#define BIT_GT2MODE					BIT(30)
#define BIT_GT2EN					BIT(29)
#define BIT_GT2_SORT_EN				BIT(28)

#define BIT_SHIFT_GT2DATA				0
#define BIT_MASK_GT2DATA				0xfffffff
#define BIT_GT2DATA(x)					(((x) & BIT_MASK_GT2DATA) << BIT_SHIFT_GT2DATA)
#define BITS_GT2DATA					(BIT_MASK_GT2DATA << BIT_SHIFT_GT2DATA)
#define BIT_CLEAR_GT2DATA(x)				((x) & (~BITS_GT2DATA))
#define BIT_GET_GT2DATA(x)				(((x) >> BIT_SHIFT_GT2DATA) & BIT_MASK_GT2DATA)
#define BIT_SET_GT2DATA(x, v)				(BIT_CLEAR_GT2DATA(x) | BIT_GT2DATA(v))

/* 2 REG_GT2_CNT				(Offset 0x2194) */

#define BIT_SHIFT_GT2_CNT				0
#define BIT_MASK_GT2_CNT				0xfffffff
#define BIT_GT2_CNT(x)					(((x) & BIT_MASK_GT2_CNT) << BIT_SHIFT_GT2_CNT)
#define BITS_GT2_CNT					(BIT_MASK_GT2_CNT << BIT_SHIFT_GT2_CNT)
#define BIT_CLEAR_GT2_CNT(x)				((x) & (~BITS_GT2_CNT))
#define BIT_GET_GT2_CNT(x)				(((x) >> BIT_SHIFT_GT2_CNT) & BIT_MASK_GT2_CNT)
#define BIT_SET_GT2_CNT(x, v)				(BIT_CLEAR_GT2_CNT(x) | BIT_GT2_CNT(v))

/* 2 REG_GT3_CTRL				(Offset 0x2198) */

#define BIT_GT3MODE					BIT(33)
#define BIT_GT3INT_EN					BIT(31)
#define BIT_GT3EN					BIT(29)
#define BIT_GT3_SORT_EN				BIT(28)

#define BIT_SHIFT_GT3DATA				0
#define BIT_MASK_GT3DATA				0xfffffff
#define BIT_GT3DATA(x)					(((x) & BIT_MASK_GT3DATA) << BIT_SHIFT_GT3DATA)
#define BITS_GT3DATA					(BIT_MASK_GT3DATA << BIT_SHIFT_GT3DATA)
#define BIT_CLEAR_GT3DATA(x)				((x) & (~BITS_GT3DATA))
#define BIT_GET_GT3DATA(x)				(((x) >> BIT_SHIFT_GT3DATA) & BIT_MASK_GT3DATA)
#define BIT_SET_GT3DATA(x, v)				(BIT_CLEAR_GT3DATA(x) | BIT_GT3DATA(v))

/* 2 REG_GT3_CNT				(Offset 0x219C) */

#define BIT_SHIFT_GT3_CNT				0
#define BIT_MASK_GT3_CNT				0xfffffff
#define BIT_GT3_CNT(x)					(((x) & BIT_MASK_GT3_CNT) << BIT_SHIFT_GT3_CNT)
#define BITS_GT3_CNT					(BIT_MASK_GT3_CNT << BIT_SHIFT_GT3_CNT)
#define BIT_CLEAR_GT3_CNT(x)				((x) & (~BITS_GT3_CNT))
#define BIT_GET_GT3_CNT(x)				(((x) >> BIT_SHIFT_GT3_CNT) & BIT_MASK_GT3_CNT)
#define BIT_SET_GT3_CNT(x, v)				(BIT_CLEAR_GT3_CNT(x) | BIT_GT3_CNT(v))

/* 2 REG_GT4_CTRL				(Offset 0x21A0) */

#define BIT_GT4INT_EN					BIT(31)
#define BIT_GT4MODE					BIT(30)
#define BIT_GT4EN					BIT(29)
#define BIT_GT4_SORT_EN				BIT(28)

#define BIT_SHIFT_GT4DATA				0
#define BIT_MASK_GT4DATA				0xfffffff
#define BIT_GT4DATA(x)					(((x) & BIT_MASK_GT4DATA) << BIT_SHIFT_GT4DATA)
#define BITS_GT4DATA					(BIT_MASK_GT4DATA << BIT_SHIFT_GT4DATA)
#define BIT_CLEAR_GT4DATA(x)				((x) & (~BITS_GT4DATA))
#define BIT_GET_GT4DATA(x)				(((x) >> BIT_SHIFT_GT4DATA) & BIT_MASK_GT4DATA)
#define BIT_SET_GT4DATA(x, v)				(BIT_CLEAR_GT4DATA(x) | BIT_GT4DATA(v))

/* 2 REG_GT4_CNT				(Offset 0x21A4) */

#define BIT_SHIFT_GT4_CNT				0
#define BIT_MASK_GT4_CNT				0xfffffff
#define BIT_GT4_CNT(x)					(((x) & BIT_MASK_GT4_CNT) << BIT_SHIFT_GT4_CNT)
#define BITS_GT4_CNT					(BIT_MASK_GT4_CNT << BIT_SHIFT_GT4_CNT)
#define BIT_CLEAR_GT4_CNT(x)				((x) & (~BITS_GT4_CNT))
#define BIT_GET_GT4_CNT(x)				(((x) >> BIT_SHIFT_GT4_CNT) & BIT_MASK_GT4_CNT)
#define BIT_SET_GT4_CNT(x, v)				(BIT_CLEAR_GT4_CNT(x) | BIT_GT4_CNT(v))

/* 2 REG_GT5_CTRL				(Offset 0x21A8) */

#define BIT_GT5INT_EN					BIT(31)
#define BIT_GT5MODE					BIT(30)
#define BIT_GT5EN					BIT(29)
#define BIT_GT5_SORT_EN				BIT(28)

#define BIT_SHIFT_GT5DATA				0
#define BIT_MASK_GT5DATA				0xfffffff
#define BIT_GT5DATA(x)					(((x) & BIT_MASK_GT5DATA) << BIT_SHIFT_GT5DATA)
#define BITS_GT5DATA					(BIT_MASK_GT5DATA << BIT_SHIFT_GT5DATA)
#define BIT_CLEAR_GT5DATA(x)				((x) & (~BITS_GT5DATA))
#define BIT_GET_GT5DATA(x)				(((x) >> BIT_SHIFT_GT5DATA) & BIT_MASK_GT5DATA)
#define BIT_SET_GT5DATA(x, v)				(BIT_CLEAR_GT5DATA(x) | BIT_GT5DATA(v))

/* 2 REG_GT5_CNT				(Offset 0x21AC) */

#define BIT_SHIFT_GT5_CNT				0
#define BIT_MASK_GT5_CNT				0xfffffff
#define BIT_GT5_CNT(x)					(((x) & BIT_MASK_GT5_CNT) << BIT_SHIFT_GT5_CNT)
#define BITS_GT5_CNT					(BIT_MASK_GT5_CNT << BIT_SHIFT_GT5_CNT)
#define BIT_CLEAR_GT5_CNT(x)				((x) & (~BITS_GT5_CNT))
#define BIT_GET_GT5_CNT(x)				(((x) >> BIT_SHIFT_GT5_CNT) & BIT_MASK_GT5_CNT)
#define BIT_SET_GT5_CNT(x, v)				(BIT_CLEAR_GT5_CNT(x) | BIT_GT5_CNT(v))

/* 2 REG_GT6_CTRL				(Offset 0x21B0) */

#define BIT_GT6INT_EN					BIT(31)
#define BIT_GT6MODE					BIT(30)
#define BIT_GT6EN					BIT(29)
#define BIT_GT6_SORT_EN				BIT(28)

#define BIT_SHIFT_GT6DATA				0
#define BIT_MASK_GT6DATA				0xfffffff
#define BIT_GT6DATA(x)					(((x) & BIT_MASK_GT6DATA) << BIT_SHIFT_GT6DATA)
#define BITS_GT6DATA					(BIT_MASK_GT6DATA << BIT_SHIFT_GT6DATA)
#define BIT_CLEAR_GT6DATA(x)				((x) & (~BITS_GT6DATA))
#define BIT_GET_GT6DATA(x)				(((x) >> BIT_SHIFT_GT6DATA) & BIT_MASK_GT6DATA)
#define BIT_SET_GT6DATA(x, v)				(BIT_CLEAR_GT6DATA(x) | BIT_GT6DATA(v))

/* 2 REG_GT6_CNT				(Offset 0x21B4) */

#define BIT_SHIFT_GT6_CNT				0
#define BIT_MASK_GT6_CNT				0xfffffff
#define BIT_GT6_CNT(x)					(((x) & BIT_MASK_GT6_CNT) << BIT_SHIFT_GT6_CNT)
#define BITS_GT6_CNT					(BIT_MASK_GT6_CNT << BIT_SHIFT_GT6_CNT)
#define BIT_CLEAR_GT6_CNT(x)				((x) & (~BITS_GT6_CNT))
#define BIT_GET_GT6_CNT(x)				(((x) >> BIT_SHIFT_GT6_CNT) & BIT_MASK_GT6_CNT)
#define BIT_SET_GT6_CNT(x, v)				(BIT_CLEAR_GT6_CNT(x) | BIT_GT6_CNT(v))

/* 2 REG_GT7_CTRL				(Offset 0x21B8) */

#define BIT_GT7INT_EN					BIT(31)
#define BIT_GT7MODE					BIT(30)
#define BIT_GT7EN					BIT(29)
#define BIT_GT7_SORT_EN				BIT(28)

#define BIT_SHIFT_GT7DATA				0
#define BIT_MASK_GT7DATA				0xfffffff
#define BIT_GT7DATA(x)					(((x) & BIT_MASK_GT7DATA) << BIT_SHIFT_GT7DATA)
#define BITS_GT7DATA					(BIT_MASK_GT7DATA << BIT_SHIFT_GT7DATA)
#define BIT_CLEAR_GT7DATA(x)				((x) & (~BITS_GT7DATA))
#define BIT_GET_GT7DATA(x)				(((x) >> BIT_SHIFT_GT7DATA) & BIT_MASK_GT7DATA)
#define BIT_SET_GT7DATA(x, v)				(BIT_CLEAR_GT7DATA(x) | BIT_GT7DATA(v))

/* 2 REG_GT7_CNT				(Offset 0x21BC) */

#define BIT_SHIFT_TX_OQT_HE_FREE_SPACE_V1		16
#define BIT_MASK_TX_OQT_HE_FREE_SPACE_V1		0xff
#define BIT_TX_OQT_HE_FREE_SPACE_V1(x)			(((x) & BIT_MASK_TX_OQT_HE_FREE_SPACE_V1) << BIT_SHIFT_TX_OQT_HE_FREE_SPACE_V1)
#define BITS_TX_OQT_HE_FREE_SPACE_V1			(BIT_MASK_TX_OQT_HE_FREE_SPACE_V1 << BIT_SHIFT_TX_OQT_HE_FREE_SPACE_V1)
#define BIT_CLEAR_TX_OQT_HE_FREE_SPACE_V1(x)		((x) & (~BITS_TX_OQT_HE_FREE_SPACE_V1))
#define BIT_GET_TX_OQT_HE_FREE_SPACE_V1(x)		(((x) >> BIT_SHIFT_TX_OQT_HE_FREE_SPACE_V1) & BIT_MASK_TX_OQT_HE_FREE_SPACE_V1)
#define BIT_SET_TX_OQT_HE_FREE_SPACE_V1(x, v)		(BIT_CLEAR_TX_OQT_HE_FREE_SPACE_V1(x) | BIT_TX_OQT_HE_FREE_SPACE_V1(v))

#define BIT_SHIFT_GT7_CNT				0
#define BIT_MASK_GT7_CNT				0xfffffff
#define BIT_GT7_CNT(x)					(((x) & BIT_MASK_GT7_CNT) << BIT_SHIFT_GT7_CNT)
#define BITS_GT7_CNT					(BIT_MASK_GT7_CNT << BIT_SHIFT_GT7_CNT)
#define BIT_CLEAR_GT7_CNT(x)				((x) & (~BITS_GT7_CNT))
#define BIT_GET_GT7_CNT(x)				(((x) >> BIT_SHIFT_GT7_CNT) & BIT_MASK_GT7_CNT)
#define BIT_SET_GT7_CNT(x, v)				(BIT_CLEAR_GT7_CNT(x) | BIT_GT7_CNT(v))

#define BIT_SHIFT_TX_OQT_NL_FREE_SPACE_V1		0
#define BIT_MASK_TX_OQT_NL_FREE_SPACE_V1		0xff
#define BIT_TX_OQT_NL_FREE_SPACE_V1(x)			(((x) & BIT_MASK_TX_OQT_NL_FREE_SPACE_V1) << BIT_SHIFT_TX_OQT_NL_FREE_SPACE_V1)
#define BITS_TX_OQT_NL_FREE_SPACE_V1			(BIT_MASK_TX_OQT_NL_FREE_SPACE_V1 << BIT_SHIFT_TX_OQT_NL_FREE_SPACE_V1)
#define BIT_CLEAR_TX_OQT_NL_FREE_SPACE_V1(x)		((x) & (~BITS_TX_OQT_NL_FREE_SPACE_V1))
#define BIT_GET_TX_OQT_NL_FREE_SPACE_V1(x)		(((x) >> BIT_SHIFT_TX_OQT_NL_FREE_SPACE_V1) & BIT_MASK_TX_OQT_NL_FREE_SPACE_V1)
#define BIT_SET_TX_OQT_NL_FREE_SPACE_V1(x, v)		(BIT_CLEAR_TX_OQT_NL_FREE_SPACE_V1(x) | BIT_TX_OQT_NL_FREE_SPACE_V1(v))

#endif

#endif/* __RTL_WLAN_BITDEF_H__ */
